
ETH_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cac  0800f890  0800f890  00010890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801253c  0801253c  00014088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801253c  0801253c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012544  08012544  00014088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012544  08012544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012548  08012548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0801254c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014088  2**0
                  CONTENTS
 10 .bss          00008524  20000088  20000088  00014088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200085ac  200085ac  00014088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c193  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005277  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001063  00000000  00000000  00036950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fb60  00000000  00000000  000379b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000232dd  00000000  00000000  00067513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eadec  00000000  00000000  0008a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001755dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b4c  00000000  00000000  00175620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0017b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f878 	.word	0x0800f878

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f878 	.word	0x0800f878

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <tcp_client_connected>:
/* USER CODE BEGIN 0 */
extern struct netif gnetif;

static struct tcp_pcb *client_pcb;

err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	4613      	mov	r3, r2
 80005d8:	71fb      	strb	r3, [r7, #7]
	if(err == ERR_OK){
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d10e      	bne.n	8000600 <tcp_client_connected+0x34>
		const char *buf = "hello stm32";
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <tcp_client_connected+0x40>)
 80005e4:	617b      	str	r3, [r7, #20]

		tcp_write(tpcb, buf, strlen(buf), TCP_WRITE_FLAG_COPY);
 80005e6:	6978      	ldr	r0, [r7, #20]
 80005e8:	f7ff fe02 	bl	80001f0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	2301      	movs	r3, #1
 80005f2:	6979      	ldr	r1, [r7, #20]
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f009 fe01 	bl	800a1fc <tcp_write>
		tcp_output(tpcb);
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f00a fbe8 	bl	800add0 <tcp_output>

	}
	return ERR_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	0800f890 	.word	0x0800f890

08000610 <send_tcp_message>:

void send_tcp_message(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	ip_addr_t server_ip;
	IP4_ADDR(&server_ip, 192,168,0,10);
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <send_tcp_message+0x34>)
 8000618:	607b      	str	r3, [r7, #4]

	client_pcb = tcp_new();
 800061a:	f006 ff6b 	bl	80074f4 <tcp_new>
 800061e:	4603      	mov	r3, r0
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <send_tcp_message+0x38>)
 8000622:	6013      	str	r3, [r2, #0]
	if(client_pcb != NULL){
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <send_tcp_message+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d007      	beq.n	800063c <send_tcp_message+0x2c>
		tcp_connect(client_pcb, &server_ip, 5000, tcp_client_connected);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <send_tcp_message+0x38>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <send_tcp_message+0x3c>)
 8000634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000638:	f006 f820 	bl	800667c <tcp_connect>
	}

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	0a00a8c0 	.word	0x0a00a8c0
 8000648:	200000ec 	.word	0x200000ec
 800064c:	080005cd 	.word	0x080005cd

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fc32 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f816 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8ae 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000660:	f000 f882 	bl	8000768 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000664:	f003 f84c 	bl	8003700 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
HAL_Delay(2000);
 8000668:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800066c:	f000 fc98 	bl	8000fa0 <HAL_Delay>
send_tcp_message();
 8000670:	f7ff ffce 	bl	8000610 <send_tcp_message>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	   ethernetif_input(&gnetif);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <main+0x34>)
 8000676:	f003 faaf 	bl	8003bd8 <ethernetif_input>
		   sys_check_timeouts();
 800067a:	f00b fc27 	bl	800becc <sys_check_timeouts>
	   ethernetif_input(&gnetif);
 800067e:	bf00      	nop
 8000680:	e7f8      	b.n	8000674 <main+0x24>
 8000682:	bf00      	nop
 8000684:	200000f8 	.word	0x200000f8

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	@ 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00e fa4b 	bl	800eb32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <SystemClock_Config+0xdc>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <SystemClock_Config+0xdc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006fc:	23b4      	movs	r3, #180	@ 0xb4
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f89b 	bl	8002848 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f91e 	bl	8000958 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f002 f844 	bl	80027a8 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000726:	f000 f917 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f002 faf5 	bl	8002d38 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000754:	f000 f900 	bl	8000958 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART3_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART3_UART_Init+0x4c>)
 80007a0:	f002 fcea 	bl	8003178 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f8d5 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000a4 	.word	0x200000a4
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b5b      	ldr	r3, [pc, #364]	@ (8000944 <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a5a      	ldr	r2, [pc, #360]	@ (8000944 <MX_GPIO_Init+0x188>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b58      	ldr	r3, [pc, #352]	@ (8000944 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b54      	ldr	r3, [pc, #336]	@ (8000944 <MX_GPIO_Init+0x188>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a53      	ldr	r2, [pc, #332]	@ (8000944 <MX_GPIO_Init+0x188>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b51      	ldr	r3, [pc, #324]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b4d      	ldr	r3, [pc, #308]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a4c      	ldr	r2, [pc, #304]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b4a      	ldr	r3, [pc, #296]	@ (8000944 <MX_GPIO_Init+0x188>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b46      	ldr	r3, [pc, #280]	@ (8000944 <MX_GPIO_Init+0x188>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a45      	ldr	r2, [pc, #276]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b43      	ldr	r3, [pc, #268]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b3f      	ldr	r3, [pc, #252]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a3e      	ldr	r2, [pc, #248]	@ (8000944 <MX_GPIO_Init+0x188>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b3c      	ldr	r3, [pc, #240]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a37      	ldr	r2, [pc, #220]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b35      	ldr	r3, [pc, #212]	@ (8000944 <MX_GPIO_Init+0x188>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000880:	4831      	ldr	r0, [pc, #196]	@ (8000948 <MX_GPIO_Init+0x18c>)
 8000882:	f001 ff77 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	4830      	ldr	r0, [pc, #192]	@ (800094c <MX_GPIO_Init+0x190>)
 800088c:	f001 ff72 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	482a      	ldr	r0, [pc, #168]	@ (8000950 <MX_GPIO_Init+0x194>)
 80008a8:	f001 fdb8 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4820      	ldr	r0, [pc, #128]	@ (8000948 <MX_GPIO_Init+0x18c>)
 80008c6:	f001 fda9 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481a      	ldr	r0, [pc, #104]	@ (800094c <MX_GPIO_Init+0x190>)
 80008e2:	f001 fd9b 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	@ 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4814      	ldr	r0, [pc, #80]	@ (800094c <MX_GPIO_Init+0x190>)
 80008fa:	f001 fd8f 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008fe:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000910:	230a      	movs	r3, #10
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <MX_GPIO_Init+0x198>)
 800091c:	f001 fd7e 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <MX_GPIO_Init+0x198>)
 8000936:	f001 fd71 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3730      	adds	r7, #48	@ 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40021800 	.word	0x40021800
 8000950:	40020800 	.word	0x40020800
 8000954:	40020000 	.word	0x40020000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_UART_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12c      	bne.n	8000a30 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <HAL_UART_MspInit+0x88>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <HAL_UART_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <HAL_UART_MspInit+0x88>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a20:	2307      	movs	r3, #7
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <HAL_UART_MspInit+0x8c>)
 8000a2c:	f001 fcf6 	bl	800241c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	@ 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004800 	.word	0x40004800
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9a:	f000 fa61 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_kill>:

int _kill(int pid, int sig)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000abe:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <_kill+0x20>)
 8000ac0:	2216      	movs	r2, #22
 8000ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	2000859c 	.word	0x2000859c

08000ad8 <_exit>:

void _exit (int status)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffe5 	bl	8000ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000aea:	bf00      	nop
 8000aec:	e7fd      	b.n	8000aea <_exit+0x12>

08000aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e00a      	b.n	8000b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b00:	f3af 8000 	nop.w
 8000b04:	4601      	mov	r1, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	b2ca      	uxtb	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <_read+0x12>
  }

  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e009      	b.n	8000b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	60ba      	str	r2, [r7, #8]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbf1      	blt.n	8000b3a <_write+0x12>
  }
  return len;
 8000b56:	687b      	ldr	r3, [r7, #4]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_close>:

int _close(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_isatty>:

int _isatty(int file)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d205      	bcs.n	8000c04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <_sbrk+0x6c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20030000 	.word	0x20030000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200000f0 	.word	0x200000f0
 8000c30:	200085b0 	.word	0x200085b0
 8000c34:	2000859c 	.word	0x2000859c

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f00d ffa1 	bl	800ebd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fcdf 	bl	8000650 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ca0:	0801254c 	.word	0x0801254c
  ldr r2, =_sbss
 8000ca4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ca8:	200085ac 	.word	0x200085ac

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>

08000cae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <LAN8742_RegisterBusIO+0x28>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <LAN8742_RegisterBusIO+0x28>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <LAN8742_RegisterBusIO+0x28>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e014      	b.n	8000d06 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d139      	bne.n	8000da2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2220      	movs	r2, #32
 8000d40:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e01c      	b.n	8000d82 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	2112      	movs	r1, #18
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	4798      	blx	r3
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da03      	bge.n	8000d64 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d5c:	f06f 0304 	mvn.w	r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d62:	e00b      	b.n	8000d7c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d105      	bne.n	8000d7c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
         break;
 8000d7a:	e005      	b.n	8000d88 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2b1f      	cmp	r3, #31
 8000d86:	d9df      	bls.n	8000d48 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b1f      	cmp	r3, #31
 8000d8e:	d902      	bls.n	8000d96 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d90:	f06f 0302 	mvn.w	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000da2:	693b      	ldr	r3, [r7, #16]
 }
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6810      	ldr	r0, [r2, #0]
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4798      	blx	r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da02      	bge.n	8000dd4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dce:	f06f 0304 	mvn.w	r3, #4
 8000dd2:	e06e      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6810      	ldr	r0, [r2, #0]
 8000ddc:	f107 020c 	add.w	r2, r7, #12
 8000de0:	2101      	movs	r1, #1
 8000de2:	4798      	blx	r3
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da02      	bge.n	8000df0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dea:	f06f 0304 	mvn.w	r3, #4
 8000dee:	e060      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e059      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6810      	ldr	r0, [r2, #0]
 8000e06:	f107 020c 	add.w	r2, r7, #12
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4798      	blx	r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da02      	bge.n	8000e1a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e14:	f06f 0304 	mvn.w	r3, #4
 8000e18:	e04b      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11b      	bne.n	8000e5c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <LAN8742_GetLinkState+0x90>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e03a      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e033      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e54:	2304      	movs	r3, #4
 8000e56:	e02c      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e58:	2305      	movs	r3, #5
 8000e5a:	e02a      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6810      	ldr	r0, [r2, #0]
 8000e64:	f107 020c 	add.w	r2, r7, #12
 8000e68:	211f      	movs	r1, #31
 8000e6a:	4798      	blx	r3
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da02      	bge.n	8000e78 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e72:	f06f 0304 	mvn.w	r3, #4
 8000e76:	e01c      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e82:	2306      	movs	r3, #6
 8000e84:	e015      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f003 031c 	and.w	r3, r3, #28
 8000e8c:	2b18      	cmp	r3, #24
 8000e8e:	d101      	bne.n	8000e94 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e90:	2302      	movs	r3, #2
 8000e92:	e00e      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 031c 	and.w	r3, r3, #28
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d101      	bne.n	8000ea2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e007      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f003 031c 	and.w	r3, r3, #28
 8000ea8:	2b14      	cmp	r3, #20
 8000eaa:	d101      	bne.n	8000eb0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000eac:	2304      	movs	r3, #4
 8000eae:	e000      	b.n	8000eb2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000eb0:	2305      	movs	r3, #5
    }
  }
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f931 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fd38 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f93b 	bl	800119a <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f911 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200000f4 	.word	0x200000f4

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200000f4 	.word	0x200000f4

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff47 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff5c 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffb0 	bl	8001108 <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e08a      	b.n	80012dc <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f002 fd6d 	bl	8003cb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a3f      	ldr	r2, [pc, #252]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_ETH_Init+0x134>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a3a      	ldr	r2, [pc, #232]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001200:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001204:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001206:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4936      	ldr	r1, [pc, #216]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001216:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800122e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001230:	f7ff feaa 	bl	8000f88 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001236:	e011      	b.n	800125c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001238:	f7ff fea6 	bl	8000f88 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001246:	d909      	bls.n	800125c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	22e0      	movs	r2, #224	@ 0xe0
 8001254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e03f      	b.n	80012dc <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e4      	bne.n	8001238 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fe16 	bl	8001ea0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fec1 	bl	8001ffc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 ff17 	bl	80020ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	461a      	mov	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fe7f 	bl	8001f8c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800129c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2210      	movs	r2, #16
 80012d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800

080012ec <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d150      	bne.n	80013a0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f9f8 	bl	8001702 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0208 	orr.w	r2, r2, #8
 8001320:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fe38 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0204 	orr.w	r2, r2, #4
 8001346:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fe25 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fc3a 	bl	8001bd8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001376:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800137a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001392:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2240      	movs	r2, #64	@ 0x40
 8001398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e000      	b.n	80013a2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
  }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013b8:	2b40      	cmp	r3, #64	@ 0x40
 80013ba:	d14a      	bne.n	8001452 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80013d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013da:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	f023 0302 	bic.w	r3, r3, #2
 80013ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0204 	bic.w	r2, r2, #4
 8001402:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fdc7 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fbdc 	bl	8001bd8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0208 	bic.w	r2, r2, #8
 800142e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff fdb1 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2210      	movs	r2, #16
 800144a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07c      	b.n	800157c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001488:	2b40      	cmp	r3, #64	@ 0x40
 800148a:	d176      	bne.n	800157a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800148c:	2200      	movs	r2, #0
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fe7b 	bl	800218c <ETH_Prepare_Tx_Descriptors>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a2:	f043 0202 	orr.w	r2, r3, #2
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e065      	b.n	800157c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3206      	adds	r2, #6
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d904      	bls.n	80014e0 <HAL_ETH_Transmit+0x84>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	1f1a      	subs	r2, r3, #4
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3106      	adds	r1, #6
 80014ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014f4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014f6:	f7ff fd47 	bl	8000f88 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014fc:	e037      	b.n	800156e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d011      	beq.n	8001534 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001516:	f043 0208 	orr.w	r2, r3, #8
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e023      	b.n	800157c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d018      	beq.n	800156e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800153c:	f7ff fd24 	bl	8000f88 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d302      	bcc.n	8001552 <HAL_ETH_Transmit+0xf6>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001558:	f043 0204 	orr.w	r2, r3, #4
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001568:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e006      	b.n	800157c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	dbc3      	blt.n	80014fe <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0a4      	b.n	80016fa <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015b6:	2b40      	cmp	r3, #64	@ 0x40
 80015b8:	d001      	beq.n	80015be <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e09d      	b.n	80016fa <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	3212      	adds	r2, #18
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015d4:	f1c3 0304 	rsb	r3, r3, #4
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015da:	e066      	b.n	80016aa <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_ETH_ReadData+0x88>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03c      	beq.n	8001686 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800162e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001644:	2301      	movs	r3, #1
 8001646:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	b29b      	uxth	r3, r3
 8001666:	f002 fcf7 	bl	8004058 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	441a      	add	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d902      	bls.n	8001698 <HAL_ETH_ReadData+0x114>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b04      	subs	r3, #4
 8001696:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	3212      	adds	r2, #18
 800169e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db06      	blt.n	80016c0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d202      	bcs.n	80016c0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80016ba:	7cfb      	ldrb	r3, [r7, #19]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d08d      	beq.n	80015dc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	441a      	add	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f814 	bl	8001702 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80016e0:	7cfb      	ldrb	r3, [r7, #19]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b088      	sub	sp, #32
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800170e:	2301      	movs	r3, #1
 8001710:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001716:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	3212      	adds	r2, #18
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001728:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800172a:	e044      	b.n	80017b6 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d112      	bne.n	800175a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fc5d 	bl	8003ff8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	74fb      	strb	r3, [r7, #19]
 8001748:	e007      	b.n	800175a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	461a      	mov	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02a      	beq.n	80017b6 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	6053      	str	r3, [r2, #4]
 8001778:	e005      	b.n	8001786 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d902      	bls.n	80017a4 <ETH_UpdateDescriptor+0xa2>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b04      	subs	r3, #4
 80017a2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	3212      	adds	r2, #18
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	617b      	str	r3, [r7, #20]
      desccount--;
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <ETH_UpdateDescriptor+0xc0>
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1b4      	bne.n	800172c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d01a      	beq.n	8001802 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	3303      	adds	r3, #3
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80017d6:	f3bf 8f5f 	dmb	sy
}
 80017da:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6919      	ldr	r1, [r3, #16]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	18ca      	adds	r2, r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 031c 	and.w	r3, r3, #28
 8001826:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	02db      	lsls	r3, r3, #11
 800182c:	b29b      	uxth	r3, r3
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f023 0302 	bic.w	r3, r3, #2
 8001848:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800185a:	f7ff fb95 	bl	8000f88 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001860:	e00d      	b.n	800187e <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001862:	f7ff fb91 	bl	8000f88 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001870:	d301      	bcc.n	8001876 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e010      	b.n	8001898 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ec      	bne.n	8001862 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	b29b      	uxth	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 031c 	and.w	r3, r3, #28
 80018bc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	02db      	lsls	r3, r3, #11
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fa:	f7ff fb45 	bl	8000f88 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001900:	e00d      	b.n	800191e <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001902:	f7ff fb41 	bl	8000f88 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001910:	d301      	bcc.n	8001916 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e009      	b.n	800192a <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ec      	bne.n	8001902 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0e6      	b.n	8001b14 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e00b      	b.n	8001b4c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d105      	bne.n	8001b4a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f86f 	bl	8001c24 <ETH_SetMACConfig>

    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
  }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f023 031c 	bic.w	r3, r3, #28
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b6c:	f001 fad0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8001b70:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d804      	bhi.n	8001b84 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e019      	b.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <HAL_ETH_SetMDIOClockRange+0x78>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d204      	bcs.n	8001b96 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f043 030c 	orr.w	r3, r3, #12
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e010      	b.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d90c      	bls.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d804      	bhi.n	8001bb0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e003      	b.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	02160ebf 	.word	0x02160ebf
 8001bcc:	03938700 	.word	0x03938700
 8001bd0:	05f5e0ff 	.word	0x05f5e0ff
 8001bd4:	08f0d17f 	.word	0x08f0d17f

08001bd8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bfa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff f9c9 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c18:	6193      	str	r3, [r2, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4b53      	ldr	r3, [pc, #332]	@ (8001d88 <ETH_SetMACConfig+0x164>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	7c12      	ldrb	r2, [r2, #16]
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d102      	bne.n	8001c52 <ETH_SetMACConfig+0x2e>
 8001c4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x30>
 8001c52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	7c52      	ldrb	r2, [r2, #17]
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	d102      	bne.n	8001c64 <ETH_SetMACConfig+0x40>
 8001c5e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c62:	e000      	b.n	8001c66 <ETH_SetMACConfig+0x42>
 8001c64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7fdb      	ldrb	r3, [r3, #31]
 8001c72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	7f92      	ldrb	r2, [r2, #30]
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d102      	bne.n	8001c8a <ETH_SetMACConfig+0x66>
 8001c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c88:	e000      	b.n	8001c8c <ETH_SetMACConfig+0x68>
 8001c8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	7f1b      	ldrb	r3, [r3, #28]
 8001c92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	791b      	ldrb	r3, [r3, #4]
 8001ca0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d102      	bne.n	8001cb4 <ETH_SetMACConfig+0x90>
 8001cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb2:	e000      	b.n	8001cb6 <ETH_SetMACConfig+0x92>
 8001cb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7bdb      	ldrb	r3, [r3, #15]
 8001cbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ccc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff f95a 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d101      	bne.n	8001d1a <ETH_SetMACConfig+0xf6>
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0xf8>
 8001d1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d2a:	2a01      	cmp	r2, #1
 8001d2c:	d101      	bne.n	8001d32 <ETH_SetMACConfig+0x10e>
 8001d2e:	2208      	movs	r2, #8
 8001d30:	e000      	b.n	8001d34 <ETH_SetMACConfig+0x110>
 8001d32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d3c:	2a01      	cmp	r2, #1
 8001d3e:	d101      	bne.n	8001d44 <ETH_SetMACConfig+0x120>
 8001d40:	2204      	movs	r2, #4
 8001d42:	e000      	b.n	8001d46 <ETH_SetMACConfig+0x122>
 8001d44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001d4e:	2a01      	cmp	r2, #1
 8001d50:	d101      	bne.n	8001d56 <ETH_SetMACConfig+0x132>
 8001d52:	2202      	movs	r2, #2
 8001d54:	e000      	b.n	8001d58 <ETH_SetMACConfig+0x134>
 8001d56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff f915 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	fd20810f 	.word	0xfd20810f

08001d8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <ETH_SetDMAConfig+0x110>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7b1b      	ldrb	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <ETH_SetDMAConfig+0x2c>
 8001db2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001db6:	e000      	b.n	8001dba <ETH_SetDMAConfig+0x2e>
 8001db8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	7b5b      	ldrb	r3, [r3, #13]
 8001dbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	7f52      	ldrb	r2, [r2, #29]
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d102      	bne.n	8001dd0 <ETH_SetDMAConfig+0x44>
 8001dca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dce:	e000      	b.n	8001dd2 <ETH_SetDMAConfig+0x46>
 8001dd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7b9b      	ldrb	r3, [r3, #14]
 8001dd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001de0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7f1b      	ldrb	r3, [r3, #28]
 8001de6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001de8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	7f9b      	ldrb	r3, [r3, #30]
 8001dee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001df0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001df6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff f8bc 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7ff f88d 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	f8de3f23 	.word	0xf8de3f23

08001ea0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0a6      	sub	sp, #152	@ 0x98
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe7f 	bl	8001c24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f60:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f66:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff05 	bl	8001d8c <ETH_SetDMAConfig>
}
 8001f82:	bf00      	nop
 8001f84:	3798      	adds	r7, #152	@ 0x98
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3305      	adds	r3, #5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	3204      	adds	r2, #4
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <ETH_MACAddressConfig+0x68>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3303      	adds	r3, #3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	061a      	lsls	r2, r3, #24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <ETH_MACAddressConfig+0x6c>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40028040 	.word	0x40028040
 8001ff8:	40028044 	.word	0x40028044

08001ffc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e03e      	b.n	8002088 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68d9      	ldr	r1, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	3206      	adds	r2, #6
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d80c      	bhi.n	800206c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68d9      	ldr	r1, [r3, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	e004      	b.n	8002076 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d9bd      	bls.n	800200a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a0:	611a      	str	r2, [r3, #16]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e048      	b.n	800214e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80020f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	3212      	adds	r2, #18
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d80c      	bhi.n	800213e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e004      	b.n	8002148 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3301      	adds	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d9b3      	bls.n	80020bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217e:	60da      	str	r2, [r3, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800218c:	b480      	push	{r7}
 800218e:	b091      	sub	sp, #68	@ 0x44
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3318      	adds	r3, #24
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021ce:	d007      	beq.n	80021e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d4:	3304      	adds	r3, #4
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e115      	b.n	8002410 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e6:	3301      	adds	r3, #1
 80021e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80021fc:	f023 031f 	bic.w	r3, r3, #31
 8002200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002202:	6852      	ldr	r2, [r2, #4]
 8002204:	431a      	orrs	r2, r3
 8002206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002208:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	431a      	orrs	r2, r3
 8002224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002226:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	431a      	orrs	r2, r3
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002268:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800226a:	e084      	b.n	8002376 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e005      	b.n	8002298 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229a:	3301      	adds	r3, #1
 800229c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800229e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d902      	bls.n	80022aa <ETH_Prepare_Tx_Descriptors+0x11e>
 80022a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a6:	3b04      	subs	r3, #4
 80022a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022c0:	d007      	beq.n	80022d2 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c6:	3304      	adds	r3, #4
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d029      	beq.n	8002326 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e4:	e019      	b.n	800231a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80022e6:	f3bf 8f5f 	dmb	sy
}
 80022ea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fa:	3301      	adds	r3, #1
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002300:	2b03      	cmp	r3, #3
 8002302:	d902      	bls.n	800230a <ETH_Prepare_Tx_Descriptors+0x17e>
 8002304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002306:	3b04      	subs	r3, #4
 8002308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800230e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002312:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002316:	3301      	adds	r3, #1
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800231a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800231c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231e:	429a      	cmp	r2, r3
 8002320:	d3e1      	bcc.n	80022e6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002322:	2302      	movs	r3, #2
 8002324:	e074      	b.n	8002410 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800232e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002330:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002334:	3301      	adds	r3, #1
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800233e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002350:	f023 031f 	bic.w	r3, r3, #31
 8002354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002356:	6852      	ldr	r2, [r2, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002360:	3301      	adds	r3, #1
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002364:	f3bf 8f5f 	dmb	sy
}
 8002368:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f47f af76 	bne.w	800226c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e005      	b.n	80023a0 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800239c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	6a3a      	ldr	r2, [r7, #32]
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80023b6:	f3bf 8f5f 	dmb	sy
}
 80023ba:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023d0:	3304      	adds	r3, #4
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023dc:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023de:	f3ef 8310 	mrs	r3, PRIMASK
 80023e2:	613b      	str	r3, [r7, #16]
  return(result);
 80023e4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f383 8810 	msr	PRIMASK, r3
}
 80023f2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fa:	4413      	add	r3, r2
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	629a      	str	r2, [r3, #40]	@ 0x28
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f383 8810 	msr	PRIMASK, r3
}
 800240c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3744      	adds	r7, #68	@ 0x44
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e177      	b.n	8002728 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8166 	bne.w	8002722 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80c0 	beq.w	8002722 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_GPIO_Init+0x328>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d037      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a57      	ldr	r2, [pc, #348]	@ (800274c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a56      	ldr	r2, [pc, #344]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02b      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a55      	ldr	r2, [pc, #340]	@ (8002754 <HAL_GPIO_Init+0x338>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a54      	ldr	r2, [pc, #336]	@ (8002758 <HAL_GPIO_Init+0x33c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a53      	ldr	r2, [pc, #332]	@ (800275c <HAL_GPIO_Init+0x340>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a52      	ldr	r2, [pc, #328]	@ (8002760 <HAL_GPIO_Init+0x344>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x226>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_GPIO_Init+0x348>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x222>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a50      	ldr	r2, [pc, #320]	@ (8002768 <HAL_GPIO_Init+0x34c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x21e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4f      	ldr	r2, [pc, #316]	@ (800276c <HAL_GPIO_Init+0x350>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x21a>
 8002632:	2309      	movs	r3, #9
 8002634:	e012      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002636:	230a      	movs	r3, #10
 8002638:	e010      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263a:	2308      	movs	r3, #8
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263e:	2307      	movs	r3, #7
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x240>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	@ (8002744 <HAL_GPIO_Init+0x328>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_GPIO_Init+0x354>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b32      	ldr	r3, [pc, #200]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <HAL_GPIO_Init+0x354>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae84 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40022000 	.word	0x40022000
 800276c:	40022400 	.word	0x40022400
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_PWREx_EnableOverDrive+0x90>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <HAL_PWREx_EnableOverDrive+0x90>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_PWREx_EnableOverDrive+0x90>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027ce:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_PWREx_EnableOverDrive+0x94>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d4:	f7fe fbd8 	bl	8000f88 <HAL_GetTick>
 80027d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027da:	e009      	b.n	80027f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027dc:	f7fe fbd4 	bl	8000f88 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027ea:	d901      	bls.n	80027f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e01f      	b.n	8002830 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fc:	d1ee      	bne.n	80027dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7fe fbc0 	bl	8000f88 <HAL_GetTick>
 8002808:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800280a:	e009      	b.n	8002820 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800280c:	f7fe fbbc 	bl	8000f88 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800281a:	d901      	bls.n	8002820 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e007      	b.n	8002830 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002820:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <HAL_PWREx_EnableOverDrive+0x98>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800282c:	d1ee      	bne.n	800280c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	420e0040 	.word	0x420e0040
 8002840:	40007000 	.word	0x40007000
 8002844:	420e0044 	.word	0x420e0044

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e267      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e242      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fb42 	bl	8000f88 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fb3e 	bl	8000f88 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e207      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe fb2e 	bl	8000f88 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe fb2a 	bl	8000f88 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f3      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800295e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c7      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7fe fae3 	bl	8000f88 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7fe fadf 	bl	8000f88 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a8      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fac2 	bl	8000f88 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a08:	f7fe fabe 	bl	8000f88 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e187      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe faa2 	bl	8000f88 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fa9e 	bl	8000f88 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e167      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fa8b 	bl	8000f88 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7fe fa87 	bl	8000f88 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e150      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fa47 	bl	8000f88 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7fe fa43 	bl	8000f88 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e10c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fa08 	bl	8000f88 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fa04 	bl	8000f88 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0cb      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9f2 	bl	8000f88 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe f9ee 	bl	8000f88 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe f9c2 	bl	8000f88 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe f9be 	bl	8000f88 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e087      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe f997 	bl	8000f88 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe f993 	bl	8000f88 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e05c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe f980 	bl	8000f88 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe f97c 	bl	8000f88 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e045      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e038      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d121      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7fe f8ae 	bl	8000f88 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe f8aa 	bl	8000f88 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe f80e 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08012348 	.word	0x08012348
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b094      	sub	sp, #80	@ 0x50
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1c:	4b79      	ldr	r3, [pc, #484]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00d      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x40>
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	f200 80e1 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x34>
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f36:	e0db      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b73      	ldr	r3, [pc, #460]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f3c:	e0db      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3e:	4b73      	ldr	r3, [pc, #460]	@ (800310c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f42:	e0d8      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b6f      	ldr	r3, [pc, #444]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d063      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4621      	mov	r1, r4
 8002f90:	1a51      	subs	r1, r2, r1
 8002f92:	6139      	str	r1, [r7, #16]
 8002f94:	4629      	mov	r1, r5
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	018b      	lsls	r3, r1, #6
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	018a      	lsls	r2, r1, #6
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd6:	4690      	mov	r8, r2
 8002fd8:	4699      	mov	r9, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	eb18 0303 	adds.w	r3, r8, r3
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	462b      	mov	r3, r5
 8002fe4:	eb49 0303 	adc.w	r3, r9, r3
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	024b      	lsls	r3, r1, #9
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003000:	4621      	mov	r1, r4
 8003002:	024a      	lsls	r2, r1, #9
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800300e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003014:	f7fd f944 	bl	80002a0 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003020:	e058      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	2200      	movs	r2, #0
 800302a:	4618      	mov	r0, r3
 800302c:	4611      	mov	r1, r2
 800302e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800303c:	4642      	mov	r2, r8
 800303e:	464b      	mov	r3, r9
 8003040:	f04f 0000 	mov.w	r0, #0
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	0159      	lsls	r1, r3, #5
 800304a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304e:	0150      	lsls	r0, r2, #5
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4641      	mov	r1, r8
 8003056:	ebb2 0a01 	subs.w	sl, r2, r1
 800305a:	4649      	mov	r1, r9
 800305c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800306c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003074:	ebb2 040a 	subs.w	r4, r2, sl
 8003078:	eb63 050b 	sbc.w	r5, r3, fp
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	00eb      	lsls	r3, r5, #3
 8003086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308a:	00e2      	lsls	r2, r4, #3
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	4643      	mov	r3, r8
 8003092:	18e3      	adds	r3, r4, r3
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	464b      	mov	r3, r9
 8003098:	eb45 0303 	adc.w	r3, r5, r3
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030aa:	4629      	mov	r1, r5
 80030ac:	028b      	lsls	r3, r1, #10
 80030ae:	4621      	mov	r1, r4
 80030b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	028a      	lsls	r2, r1, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030be:	2200      	movs	r2, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	61fa      	str	r2, [r7, #28]
 80030c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c8:	f7fd f8ea 	bl	80002a0 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x204>)
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3750      	adds	r7, #80	@ 0x50
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	007a1200 	.word	0x007a1200

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08012358 	.word	0x08012358

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08012358 	.word	0x08012358

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e042      	b.n	8003210 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fc08 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	@ 0x24
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f82b 	bl	8003218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b0c0      	sub	sp, #256	@ 0x100
 800321e:	af00      	add	r7, sp, #0
 8003220:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	ea40 0301 	orr.w	r3, r0, r1
 8003240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003270:	f021 010c 	bic.w	r1, r1, #12
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800327e:	430b      	orrs	r3, r1
 8003280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003292:	6999      	ldr	r1, [r3, #24]
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	ea40 0301 	orr.w	r3, r0, r1
 800329e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b8f      	ldr	r3, [pc, #572]	@ (80034e4 <UART_SetConfig+0x2cc>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d005      	beq.n	80032b8 <UART_SetConfig+0xa0>
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b8d      	ldr	r3, [pc, #564]	@ (80034e8 <UART_SetConfig+0x2d0>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d104      	bne.n	80032c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b8:	f7ff ff4a 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 80032bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032c0:	e003      	b.n	80032ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c2:	f7ff ff31 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80032c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d4:	f040 810c 	bne.w	80034f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032f2:	415b      	adcs	r3, r3
 80032f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032fa:	4621      	mov	r1, r4
 80032fc:	eb12 0801 	adds.w	r8, r2, r1
 8003300:	4629      	mov	r1, r5
 8003302:	eb43 0901 	adc.w	r9, r3, r1
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331a:	4690      	mov	r8, r2
 800331c:	4699      	mov	r9, r3
 800331e:	4623      	mov	r3, r4
 8003320:	eb18 0303 	adds.w	r3, r8, r3
 8003324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003328:	462b      	mov	r3, r5
 800332a:	eb49 0303 	adc.w	r3, r9, r3
 800332e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800333e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003346:	460b      	mov	r3, r1
 8003348:	18db      	adds	r3, r3, r3
 800334a:	653b      	str	r3, [r7, #80]	@ 0x50
 800334c:	4613      	mov	r3, r2
 800334e:	eb42 0303 	adc.w	r3, r2, r3
 8003352:	657b      	str	r3, [r7, #84]	@ 0x54
 8003354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800335c:	f7fc ffa0 	bl	80002a0 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4b61      	ldr	r3, [pc, #388]	@ (80034ec <UART_SetConfig+0x2d4>)
 8003366:	fba3 2302 	umull	r2, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	011c      	lsls	r4, r3, #4
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003378:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800337c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003388:	415b      	adcs	r3, r3
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003390:	4641      	mov	r1, r8
 8003392:	eb12 0a01 	adds.w	sl, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb43 0b01 	adc.w	fp, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b0:	4692      	mov	sl, r2
 80033b2:	469b      	mov	fp, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	eb1a 0303 	adds.w	r3, sl, r3
 80033ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033be:	464b      	mov	r3, r9
 80033c0:	eb4b 0303 	adc.w	r3, fp, r3
 80033c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033dc:	460b      	mov	r3, r1
 80033de:	18db      	adds	r3, r3, r3
 80033e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033e2:	4613      	mov	r3, r2
 80033e4:	eb42 0303 	adc.w	r3, r2, r3
 80033e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033f2:	f7fc ff55 	bl	80002a0 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	4b3b      	ldr	r3, [pc, #236]	@ (80034ec <UART_SetConfig+0x2d4>)
 80033fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2264      	movs	r2, #100	@ 0x64
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003412:	4b36      	ldr	r3, [pc, #216]	@ (80034ec <UART_SetConfig+0x2d4>)
 8003414:	fba3 2302 	umull	r2, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003420:	441c      	add	r4, r3
 8003422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800342c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	1891      	adds	r1, r2, r2
 800343a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800343c:	415b      	adcs	r3, r3
 800343e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003444:	4641      	mov	r1, r8
 8003446:	1851      	adds	r1, r2, r1
 8003448:	6339      	str	r1, [r7, #48]	@ 0x30
 800344a:	4649      	mov	r1, r9
 800344c:	414b      	adcs	r3, r1
 800344e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800345c:	4659      	mov	r1, fp
 800345e:	00cb      	lsls	r3, r1, #3
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003466:	4651      	mov	r1, sl
 8003468:	00ca      	lsls	r2, r1, #3
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4603      	mov	r3, r0
 8003470:	4642      	mov	r2, r8
 8003472:	189b      	adds	r3, r3, r2
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003478:	464b      	mov	r3, r9
 800347a:	460a      	mov	r2, r1
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003490:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003498:	460b      	mov	r3, r1
 800349a:	18db      	adds	r3, r3, r3
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800349e:	4613      	mov	r3, r2
 80034a0:	eb42 0303 	adc.w	r3, r2, r3
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034ae:	f7fc fef7 	bl	80002a0 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <UART_SetConfig+0x2d4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	@ 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3332      	adds	r3, #50	@ 0x32
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <UART_SetConfig+0x2d4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 0207 	and.w	r2, r3, #7
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4422      	add	r2, r4
 80034de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e0:	e106      	b.n	80036f0 <UART_SetConfig+0x4d8>
 80034e2:	bf00      	nop
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40011400 	.word	0x40011400
 80034ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003502:	4642      	mov	r2, r8
 8003504:	464b      	mov	r3, r9
 8003506:	1891      	adds	r1, r2, r2
 8003508:	6239      	str	r1, [r7, #32]
 800350a:	415b      	adcs	r3, r3
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
 800350e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003512:	4641      	mov	r1, r8
 8003514:	1854      	adds	r4, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb43 0501 	adc.w	r5, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00eb      	lsls	r3, r5, #3
 8003526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	4614      	mov	r4, r2
 800352e:	461d      	mov	r5, r3
 8003530:	4643      	mov	r3, r8
 8003532:	18e3      	adds	r3, r4, r3
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003538:	464b      	mov	r3, r9
 800353a:	eb45 0303 	adc.w	r3, r5, r3
 800353e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800354e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800355e:	4629      	mov	r1, r5
 8003560:	008b      	lsls	r3, r1, #2
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003568:	4621      	mov	r1, r4
 800356a:	008a      	lsls	r2, r1, #2
 800356c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003570:	f7fc fe96 	bl	80002a0 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4b60      	ldr	r3, [pc, #384]	@ (80036fc <UART_SetConfig+0x4e4>)
 800357a:	fba3 2302 	umull	r2, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	011c      	lsls	r4, r3, #4
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800358c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	61b9      	str	r1, [r7, #24]
 800359c:	415b      	adcs	r3, r3
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6139      	str	r1, [r7, #16]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035d8:	464b      	mov	r3, r9
 80035da:	460a      	mov	r2, r1
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035fc:	4649      	mov	r1, r9
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	4641      	mov	r1, r8
 8003602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003606:	4641      	mov	r1, r8
 8003608:	008a      	lsls	r2, r1, #2
 800360a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800360e:	f7fc fe47 	bl	80002a0 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4611      	mov	r1, r2
 8003618:	4b38      	ldr	r3, [pc, #224]	@ (80036fc <UART_SetConfig+0x4e4>)
 800361a:	fba3 2301 	umull	r2, r3, r3, r1
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2264      	movs	r2, #100	@ 0x64
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	3332      	adds	r3, #50	@ 0x32
 800362c:	4a33      	ldr	r2, [pc, #204]	@ (80036fc <UART_SetConfig+0x4e4>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003638:	441c      	add	r4, r3
 800363a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800363e:	2200      	movs	r2, #0
 8003640:	673b      	str	r3, [r7, #112]	@ 0x70
 8003642:	677a      	str	r2, [r7, #116]	@ 0x74
 8003644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	1891      	adds	r1, r2, r2
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	415b      	adcs	r3, r3
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003658:	4641      	mov	r1, r8
 800365a:	1851      	adds	r1, r2, r1
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	4649      	mov	r1, r9
 8003660:	414b      	adcs	r3, r1
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003670:	4659      	mov	r1, fp
 8003672:	00cb      	lsls	r3, r1, #3
 8003674:	4651      	mov	r1, sl
 8003676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367a:	4651      	mov	r1, sl
 800367c:	00ca      	lsls	r2, r1, #3
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	4603      	mov	r3, r0
 8003684:	4642      	mov	r2, r8
 8003686:	189b      	adds	r3, r3, r2
 8003688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800368a:	464b      	mov	r3, r9
 800368c:	460a      	mov	r2, r1
 800368e:	eb42 0303 	adc.w	r3, r2, r3
 8003692:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	663b      	str	r3, [r7, #96]	@ 0x60
 800369e:	667a      	str	r2, [r7, #100]	@ 0x64
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036ac:	4649      	mov	r1, r9
 80036ae:	008b      	lsls	r3, r1, #2
 80036b0:	4641      	mov	r1, r8
 80036b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b6:	4641      	mov	r1, r8
 80036b8:	008a      	lsls	r2, r1, #2
 80036ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036be:	f7fc fdef 	bl	80002a0 <__aeabi_uldivmod>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <UART_SetConfig+0x4e4>)
 80036c8:	fba3 1302 	umull	r1, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	2164      	movs	r1, #100	@ 0x64
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	3332      	adds	r3, #50	@ 0x32
 80036da:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <UART_SetConfig+0x4e4>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4422      	add	r2, r4
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036f6:	46bd      	mov	sp, r7
 80036f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fc:	51eb851f 	.word	0x51eb851f

08003700 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003706:	4b87      	ldr	r3, [pc, #540]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003708:	22c0      	movs	r2, #192	@ 0xc0
 800370a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800370c:	4b85      	ldr	r3, [pc, #532]	@ (8003924 <MX_LWIP_Init+0x224>)
 800370e:	22a8      	movs	r2, #168	@ 0xa8
 8003710:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003712:	4b84      	ldr	r3, [pc, #528]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003714:	2200      	movs	r2, #0
 8003716:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8003718:	4b82      	ldr	r3, [pc, #520]	@ (8003924 <MX_LWIP_Init+0x224>)
 800371a:	2214      	movs	r2, #20
 800371c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 800371e:	4b82      	ldr	r3, [pc, #520]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8003724:	4b80      	ldr	r3, [pc, #512]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003726:	2200      	movs	r2, #0
 8003728:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800372a:	4b7f      	ldr	r3, [pc, #508]	@ (8003928 <MX_LWIP_Init+0x228>)
 800372c:	2200      	movs	r2, #0
 800372e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003730:	4b7d      	ldr	r3, [pc, #500]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003732:	2200      	movs	r2, #0
 8003734:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003736:	4b7d      	ldr	r3, [pc, #500]	@ (800392c <MX_LWIP_Init+0x22c>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800373c:	4b7b      	ldr	r3, [pc, #492]	@ (800392c <MX_LWIP_Init+0x22c>)
 800373e:	2200      	movs	r2, #0
 8003740:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003742:	4b7a      	ldr	r3, [pc, #488]	@ (800392c <MX_LWIP_Init+0x22c>)
 8003744:	2200      	movs	r2, #0
 8003746:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003748:	4b78      	ldr	r3, [pc, #480]	@ (800392c <MX_LWIP_Init+0x22c>)
 800374a:	2200      	movs	r2, #0
 800374c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800374e:	f000 fcf2 	bl	8004136 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003752:	4b74      	ldr	r3, [pc, #464]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	061a      	lsls	r2, r3, #24
 8003758:	4b72      	ldr	r3, [pc, #456]	@ (8003924 <MX_LWIP_Init+0x224>)
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	4b70      	ldr	r3, [pc, #448]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003762:	789b      	ldrb	r3, [r3, #2]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	4313      	orrs	r3, r2
 8003768:	4a6e      	ldr	r2, [pc, #440]	@ (8003924 <MX_LWIP_Init+0x224>)
 800376a:	78d2      	ldrb	r2, [r2, #3]
 800376c:	4313      	orrs	r3, r2
 800376e:	061a      	lsls	r2, r3, #24
 8003770:	4b6c      	ldr	r3, [pc, #432]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	0619      	lsls	r1, r3, #24
 8003776:	4b6b      	ldr	r3, [pc, #428]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	4319      	orrs	r1, r3
 800377e:	4b69      	ldr	r3, [pc, #420]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003780:	789b      	ldrb	r3, [r3, #2]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	430b      	orrs	r3, r1
 8003786:	4967      	ldr	r1, [pc, #412]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003788:	78c9      	ldrb	r1, [r1, #3]
 800378a:	430b      	orrs	r3, r1
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003792:	431a      	orrs	r2, r3
 8003794:	4b63      	ldr	r3, [pc, #396]	@ (8003924 <MX_LWIP_Init+0x224>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	0619      	lsls	r1, r3, #24
 800379a:	4b62      	ldr	r3, [pc, #392]	@ (8003924 <MX_LWIP_Init+0x224>)
 800379c:	785b      	ldrb	r3, [r3, #1]
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	4319      	orrs	r1, r3
 80037a2:	4b60      	ldr	r3, [pc, #384]	@ (8003924 <MX_LWIP_Init+0x224>)
 80037a4:	789b      	ldrb	r3, [r3, #2]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	430b      	orrs	r3, r1
 80037aa:	495e      	ldr	r1, [pc, #376]	@ (8003924 <MX_LWIP_Init+0x224>)
 80037ac:	78c9      	ldrb	r1, [r1, #3]
 80037ae:	430b      	orrs	r3, r1
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037b6:	431a      	orrs	r2, r3
 80037b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003924 <MX_LWIP_Init+0x224>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	0619      	lsls	r1, r3, #24
 80037be:	4b59      	ldr	r3, [pc, #356]	@ (8003924 <MX_LWIP_Init+0x224>)
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	4319      	orrs	r1, r3
 80037c6:	4b57      	ldr	r3, [pc, #348]	@ (8003924 <MX_LWIP_Init+0x224>)
 80037c8:	789b      	ldrb	r3, [r3, #2]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4955      	ldr	r1, [pc, #340]	@ (8003924 <MX_LWIP_Init+0x224>)
 80037d0:	78c9      	ldrb	r1, [r1, #3]
 80037d2:	430b      	orrs	r3, r1
 80037d4:	0e1b      	lsrs	r3, r3, #24
 80037d6:	4313      	orrs	r3, r2
 80037d8:	4a55      	ldr	r2, [pc, #340]	@ (8003930 <MX_LWIP_Init+0x230>)
 80037da:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037dc:	4b52      	ldr	r3, [pc, #328]	@ (8003928 <MX_LWIP_Init+0x228>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	061a      	lsls	r2, r3, #24
 80037e2:	4b51      	ldr	r3, [pc, #324]	@ (8003928 <MX_LWIP_Init+0x228>)
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003928 <MX_LWIP_Init+0x228>)
 80037ec:	789b      	ldrb	r3, [r3, #2]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	4313      	orrs	r3, r2
 80037f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003928 <MX_LWIP_Init+0x228>)
 80037f4:	78d2      	ldrb	r2, [r2, #3]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	061a      	lsls	r2, r3, #24
 80037fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003928 <MX_LWIP_Init+0x228>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	0619      	lsls	r1, r3, #24
 8003800:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	4319      	orrs	r1, r3
 8003808:	4b47      	ldr	r3, [pc, #284]	@ (8003928 <MX_LWIP_Init+0x228>)
 800380a:	789b      	ldrb	r3, [r3, #2]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	430b      	orrs	r3, r1
 8003810:	4945      	ldr	r1, [pc, #276]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003812:	78c9      	ldrb	r1, [r1, #3]
 8003814:	430b      	orrs	r3, r1
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800381c:	431a      	orrs	r2, r3
 800381e:	4b42      	ldr	r3, [pc, #264]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	0619      	lsls	r1, r3, #24
 8003824:	4b40      	ldr	r3, [pc, #256]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003826:	785b      	ldrb	r3, [r3, #1]
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	4319      	orrs	r1, r3
 800382c:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <MX_LWIP_Init+0x228>)
 800382e:	789b      	ldrb	r3, [r3, #2]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	430b      	orrs	r3, r1
 8003834:	493c      	ldr	r1, [pc, #240]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003836:	78c9      	ldrb	r1, [r1, #3]
 8003838:	430b      	orrs	r3, r1
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003840:	431a      	orrs	r2, r3
 8003842:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	0619      	lsls	r1, r3, #24
 8003848:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <MX_LWIP_Init+0x228>)
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	4319      	orrs	r1, r3
 8003850:	4b35      	ldr	r3, [pc, #212]	@ (8003928 <MX_LWIP_Init+0x228>)
 8003852:	789b      	ldrb	r3, [r3, #2]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	430b      	orrs	r3, r1
 8003858:	4933      	ldr	r1, [pc, #204]	@ (8003928 <MX_LWIP_Init+0x228>)
 800385a:	78c9      	ldrb	r1, [r1, #3]
 800385c:	430b      	orrs	r3, r1
 800385e:	0e1b      	lsrs	r3, r3, #24
 8003860:	4313      	orrs	r3, r2
 8003862:	4a34      	ldr	r2, [pc, #208]	@ (8003934 <MX_LWIP_Init+0x234>)
 8003864:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <MX_LWIP_Init+0x22c>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	061a      	lsls	r2, r3, #24
 800386c:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <MX_LWIP_Init+0x22c>)
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	431a      	orrs	r2, r3
 8003874:	4b2d      	ldr	r3, [pc, #180]	@ (800392c <MX_LWIP_Init+0x22c>)
 8003876:	789b      	ldrb	r3, [r3, #2]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	4313      	orrs	r3, r2
 800387c:	4a2b      	ldr	r2, [pc, #172]	@ (800392c <MX_LWIP_Init+0x22c>)
 800387e:	78d2      	ldrb	r2, [r2, #3]
 8003880:	4313      	orrs	r3, r2
 8003882:	061a      	lsls	r2, r3, #24
 8003884:	4b29      	ldr	r3, [pc, #164]	@ (800392c <MX_LWIP_Init+0x22c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	0619      	lsls	r1, r3, #24
 800388a:	4b28      	ldr	r3, [pc, #160]	@ (800392c <MX_LWIP_Init+0x22c>)
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	4319      	orrs	r1, r3
 8003892:	4b26      	ldr	r3, [pc, #152]	@ (800392c <MX_LWIP_Init+0x22c>)
 8003894:	789b      	ldrb	r3, [r3, #2]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	430b      	orrs	r3, r1
 800389a:	4924      	ldr	r1, [pc, #144]	@ (800392c <MX_LWIP_Init+0x22c>)
 800389c:	78c9      	ldrb	r1, [r1, #3]
 800389e:	430b      	orrs	r3, r1
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80038a6:	431a      	orrs	r2, r3
 80038a8:	4b20      	ldr	r3, [pc, #128]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	0619      	lsls	r1, r3, #24
 80038ae:	4b1f      	ldr	r3, [pc, #124]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	4319      	orrs	r1, r3
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038b8:	789b      	ldrb	r3, [r3, #2]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	430b      	orrs	r3, r1
 80038be:	491b      	ldr	r1, [pc, #108]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038c0:	78c9      	ldrb	r1, [r1, #3]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80038ca:	431a      	orrs	r2, r3
 80038cc:	4b17      	ldr	r3, [pc, #92]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	0619      	lsls	r1, r3, #24
 80038d2:	4b16      	ldr	r3, [pc, #88]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	4319      	orrs	r1, r3
 80038da:	4b14      	ldr	r3, [pc, #80]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038dc:	789b      	ldrb	r3, [r3, #2]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	430b      	orrs	r3, r1
 80038e2:	4912      	ldr	r1, [pc, #72]	@ (800392c <MX_LWIP_Init+0x22c>)
 80038e4:	78c9      	ldrb	r1, [r1, #3]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	0e1b      	lsrs	r3, r3, #24
 80038ea:	4313      	orrs	r3, r2
 80038ec:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <MX_LWIP_Init+0x238>)
 80038ee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <MX_LWIP_Init+0x23c>)
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <MX_LWIP_Init+0x240>)
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <MX_LWIP_Init+0x238>)
 80038fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003934 <MX_LWIP_Init+0x234>)
 8003900:	490b      	ldr	r1, [pc, #44]	@ (8003930 <MX_LWIP_Init+0x230>)
 8003902:	4810      	ldr	r0, [pc, #64]	@ (8003944 <MX_LWIP_Init+0x244>)
 8003904:	f001 f902 	bl	8004b0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003908:	480e      	ldr	r0, [pc, #56]	@ (8003944 <MX_LWIP_Init+0x244>)
 800390a:	f001 fab5 	bl	8004e78 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800390e:	480d      	ldr	r0, [pc, #52]	@ (8003944 <MX_LWIP_Init+0x244>)
 8003910:	f001 fac2 	bl	8004e98 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003914:	490c      	ldr	r1, [pc, #48]	@ (8003948 <MX_LWIP_Init+0x248>)
 8003916:	480b      	ldr	r0, [pc, #44]	@ (8003944 <MX_LWIP_Init+0x244>)
 8003918:	f001 fbc0 	bl	800509c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000138 	.word	0x20000138
 8003928:	2000013c 	.word	0x2000013c
 800392c:	20000140 	.word	0x20000140
 8003930:	2000012c 	.word	0x2000012c
 8003934:	20000130 	.word	0x20000130
 8003938:	20000134 	.word	0x20000134
 800393c:	0800e6bd 	.word	0x0800e6bd
 8003940:	08003c19 	.word	0x08003c19
 8003944:	200000f8 	.word	0x200000f8
 8003948:	0800394d 	.word	0x0800394d

0800394c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800396c:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <low_level_init+0x120>)
 800396e:	4a45      	ldr	r2, [pc, #276]	@ (8003a84 <low_level_init+0x124>)
 8003970:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003972:	2300      	movs	r3, #0
 8003974:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800397a:	23e1      	movs	r3, #225	@ 0xe1
 800397c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800397e:	2300      	movs	r3, #0
 8003980:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800398a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a80 <low_level_init+0x120>)
 800398c:	f107 0308 	add.w	r3, r7, #8
 8003990:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <low_level_init+0x120>)
 8003994:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003998:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800399a:	4b39      	ldr	r3, [pc, #228]	@ (8003a80 <low_level_init+0x120>)
 800399c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a88 <low_level_init+0x128>)
 800399e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80039a0:	4b37      	ldr	r3, [pc, #220]	@ (8003a80 <low_level_init+0x120>)
 80039a2:	4a3a      	ldr	r2, [pc, #232]	@ (8003a8c <low_level_init+0x12c>)
 80039a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80039a6:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <low_level_init+0x120>)
 80039a8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80039ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80039ae:	4834      	ldr	r0, [pc, #208]	@ (8003a80 <low_level_init+0x120>)
 80039b0:	f7fd fc00 	bl	80011b4 <HAL_ETH_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80039b8:	2238      	movs	r2, #56	@ 0x38
 80039ba:	2100      	movs	r1, #0
 80039bc:	4834      	ldr	r0, [pc, #208]	@ (8003a90 <low_level_init+0x130>)
 80039be:	f00b f8b8 	bl	800eb32 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80039c2:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <low_level_init+0x130>)
 80039c4:	2221      	movs	r2, #33	@ 0x21
 80039c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80039c8:	4b31      	ldr	r3, [pc, #196]	@ (8003a90 <low_level_init+0x130>)
 80039ca:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80039ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80039d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a90 <low_level_init+0x130>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80039d6:	482f      	ldr	r0, [pc, #188]	@ (8003a94 <low_level_init+0x134>)
 80039d8:	f000 ff60 	bl	800489c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2206      	movs	r2, #6
 80039e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80039e4:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <low_level_init+0x120>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80039f0:	4b23      	ldr	r3, [pc, #140]	@ (8003a80 <low_level_init+0x120>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	785a      	ldrb	r2, [r3, #1]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80039fc:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <low_level_init+0x120>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	789a      	ldrb	r2, [r3, #2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003a08:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <low_level_init+0x120>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	78da      	ldrb	r2, [r3, #3]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a14:	4b1a      	ldr	r3, [pc, #104]	@ (8003a80 <low_level_init+0x120>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	791a      	ldrb	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a20:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <low_level_init+0x120>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	795a      	ldrb	r2, [r3, #5]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003a32:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003a3a:	f043 030a 	orr.w	r3, r3, #10
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003a46:	4914      	ldr	r1, [pc, #80]	@ (8003a98 <low_level_init+0x138>)
 8003a48:	4814      	ldr	r0, [pc, #80]	@ (8003a9c <low_level_init+0x13c>)
 8003a4a:	f7fd f930 	bl	8000cae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003a4e:	4813      	ldr	r0, [pc, #76]	@ (8003a9c <low_level_init+0x13c>)
 8003a50:	f7fd f95f 	bl	8000d12 <LAN8742_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f001 faee 	bl	800503c <netif_set_link_down>
    netif_set_down(netif);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f001 fa85 	bl	8004f70 <netif_set_down>
 8003a66:	e008      	b.n	8003a7a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa36 	bl	8003ee0 <ethernet_link_check_state>
 8003a74:	e001      	b.n	8003a7a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8003a76:	f7fc ff6f 	bl	8000958 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20004c10 	.word	0x20004c10
 8003a84:	40028000 	.word	0x40028000
 8003a88:	20004b70 	.word	0x20004b70
 8003a8c:	20004ad0 	.word	0x20004ad0
 8003a90:	20004cc0 	.word	0x20004cc0
 8003a94:	08012360 	.word	0x08012360
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	20004cf8 	.word	0x20004cf8

08003aa0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b092      	sub	sp, #72	@ 0x48
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003ab8:	f107 030c 	add.w	r3, r7, #12
 8003abc:	2230      	movs	r2, #48	@ 0x30
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00b f836 	bl	800eb32 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	2230      	movs	r2, #48	@ 0x30
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00b f82f 	bl	800eb32 <memset>

  for(q = p; q != NULL; q = q->next)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad8:	e045      	b.n	8003b66 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d902      	bls.n	8003ae6 <low_level_output+0x46>
      return ERR_IF;
 8003ae0:	f06f 030b 	mvn.w	r3, #11
 8003ae4:	e055      	b.n	8003b92 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aec:	4613      	mov	r3, r2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	3348      	adds	r3, #72	@ 0x48
 8003af6:	443b      	add	r3, r7
 8003af8:	3b3c      	subs	r3, #60	@ 0x3c
 8003afa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afe:	895b      	ldrh	r3, [r3, #10]
 8003b00:	4619      	mov	r1, r3
 8003b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	3348      	adds	r3, #72	@ 0x48
 8003b0e:	443b      	add	r3, r7
 8003b10:	3b38      	subs	r3, #56	@ 0x38
 8003b12:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d011      	beq.n	8003b3e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	f107 000c 	add.w	r0, r7, #12
 8003b22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b24:	460b      	mov	r3, r1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	440b      	add	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	18c1      	adds	r1, r0, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3348      	adds	r3, #72	@ 0x48
 8003b38:	443b      	add	r3, r7
 8003b3a:	3b34      	subs	r3, #52	@ 0x34
 8003b3c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	3348      	adds	r3, #72	@ 0x48
 8003b52:	443b      	add	r3, r7
 8003b54:	3b34      	subs	r3, #52	@ 0x34
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1b6      	bne.n	8003ada <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	891b      	ldrh	r3, [r3, #8]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <low_level_output+0xfc>)
 8003b74:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <low_level_output+0xfc>)
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003b7e:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <low_level_output+0xfc>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003b84:	2214      	movs	r2, #20
 8003b86:	4905      	ldr	r1, [pc, #20]	@ (8003b9c <low_level_output+0xfc>)
 8003b88:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <low_level_output+0x100>)
 8003b8a:	f7fd fc67 	bl	800145c <HAL_ETH_Transmit>

  return errval;
 8003b8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3748      	adds	r7, #72	@ 0x48
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20004cc0 	.word	0x20004cc0
 8003ba0:	20004c10 	.word	0x20004c10

08003ba4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003bb0:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <low_level_input+0x2c>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4805      	ldr	r0, [pc, #20]	@ (8003bd4 <low_level_input+0x30>)
 8003bc0:	f7fd fce0 	bl	8001584 <HAL_ETH_ReadData>
  }

  return p;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20004acc 	.word	0x20004acc
 8003bd4:	20004c10 	.word	0x20004c10

08003bd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ffdd 	bl	8003ba4 <low_level_input>
 8003bea:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	4798      	blx	r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f001 fdca 	bl	800579c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1ea      	bne.n	8003be4 <ethernetif_input+0xc>
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <ethernetif_init+0x1c>
 8003c26:	4b0e      	ldr	r3, [pc, #56]	@ (8003c60 <ethernetif_init+0x48>)
 8003c28:	f240 126f 	movw	r2, #367	@ 0x16f
 8003c2c:	490d      	ldr	r1, [pc, #52]	@ (8003c64 <ethernetif_init+0x4c>)
 8003c2e:	480e      	ldr	r0, [pc, #56]	@ (8003c68 <ethernetif_init+0x50>)
 8003c30:	f00a ff1a 	bl	800ea68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2273      	movs	r2, #115	@ 0x73
 8003c38:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2274      	movs	r2, #116	@ 0x74
 8003c40:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <ethernetif_init+0x54>)
 8003c48:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a08      	ldr	r2, [pc, #32]	@ (8003c70 <ethernetif_init+0x58>)
 8003c4e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fe85 	bl	8003960 <low_level_init>

  return ERR_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	0800f89c 	.word	0x0800f89c
 8003c64:	0800f8b8 	.word	0x0800f8b8
 8003c68:	0800f8c8 	.word	0x0800f8c8
 8003c6c:	0800cb5d 	.word	0x0800cb5d
 8003c70:	08003aa1 	.word	0x08003aa1

08003c74 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <pbuf_free_custom+0x2c>)
 8003c84:	f000 feec 	bl	8004a60 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <pbuf_free_custom+0x30>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003c90:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <pbuf_free_custom+0x30>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
  }
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08012360 	.word	0x08012360
 8003ca4:	20004acc 	.word	0x20004acc

08003ca8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003cac:	f7fd f96c 	bl	8000f88 <HAL_GetTick>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	@ 0x38
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a55      	ldr	r2, [pc, #340]	@ (8003e2c <HAL_ETH_MspInit+0x174>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	f040 80a4 	bne.w	8003e24 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003cdc:	2300      	movs	r3, #0
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	4a52      	ldr	r2, [pc, #328]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cec:	4b50      	ldr	r3, [pc, #320]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d08:	4b49      	ldr	r3, [pc, #292]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	4a44      	ldr	r2, [pc, #272]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d24:	4b42      	ldr	r3, [pc, #264]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	4b3e      	ldr	r3, [pc, #248]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	4a3d      	ldr	r2, [pc, #244]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d40:	4b3b      	ldr	r3, [pc, #236]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	4b37      	ldr	r3, [pc, #220]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	4a36      	ldr	r2, [pc, #216]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5c:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	4b30      	ldr	r3, [pc, #192]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	4a2f      	ldr	r2, [pc, #188]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d72:	f043 0302 	orr.w	r3, r3, #2
 8003d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d78:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d94:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <HAL_ETH_MspInit+0x178>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003da0:	2332      	movs	r3, #50	@ 0x32
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	2302      	movs	r3, #2
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dac:	2303      	movs	r3, #3
 8003dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003db0:	230b      	movs	r3, #11
 8003db2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003db8:	4619      	mov	r1, r3
 8003dba:	481e      	ldr	r0, [pc, #120]	@ (8003e34 <HAL_ETH_MspInit+0x17c>)
 8003dbc:	f7fe fb2e 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003dc0:	2386      	movs	r3, #134	@ 0x86
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003dd0:	230b      	movs	r3, #11
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4817      	ldr	r0, [pc, #92]	@ (8003e38 <HAL_ETH_MspInit+0x180>)
 8003ddc:	f7fe fb1e 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de6:	2302      	movs	r3, #2
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dee:	2303      	movs	r3, #3
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003df2:	230b      	movs	r3, #11
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	480f      	ldr	r0, [pc, #60]	@ (8003e3c <HAL_ETH_MspInit+0x184>)
 8003dfe:	f7fe fb0d 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003e02:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e10:	2303      	movs	r3, #3
 8003e12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e14:	230b      	movs	r3, #11
 8003e16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4808      	ldr	r0, [pc, #32]	@ (8003e40 <HAL_ETH_MspInit+0x188>)
 8003e20:	f7fe fafc 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003e24:	bf00      	nop
 8003e26:	3738      	adds	r7, #56	@ 0x38
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40028000 	.word	0x40028000
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40020800 	.word	0x40020800
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	40020400 	.word	0x40020400
 8003e40:	40021800 	.word	0x40021800

08003e44 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003e48:	4802      	ldr	r0, [pc, #8]	@ (8003e54 <ETH_PHY_IO_Init+0x10>)
 8003e4a:	f7fd fe83 	bl	8001b54 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20004c10 	.word	0x20004c10

08003e58 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return 0;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	68f9      	ldr	r1, [r7, #12]
 8003e7a:	4807      	ldr	r0, [pc, #28]	@ (8003e98 <ETH_PHY_IO_ReadReg+0x30>)
 8003e7c:	f7fd fcc5 	bl	800180a <HAL_ETH_ReadPHYRegister>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8a:	e000      	b.n	8003e8e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20004c10 	.word	0x20004c10

08003e9c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4807      	ldr	r0, [pc, #28]	@ (8003ecc <ETH_PHY_IO_WriteReg+0x30>)
 8003eb0:	f7fd fcf6 	bl	80018a0 <HAL_ETH_WritePHYRegister>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e000      	b.n	8003ec2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20004c10 	.word	0x20004c10

08003ed0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003ed4:	f7fd f858 	bl	8000f88 <HAL_GetTick>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b0a0      	sub	sp, #128	@ 0x80
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	2264      	movs	r2, #100	@ 0x64
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00a fe1e 	bl	800eb32 <memset>
  int32_t PHYLinkState = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003efe:	2300      	movs	r3, #0
 8003f00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f02:	2300      	movs	r3, #0
 8003f04:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003f06:	483a      	ldr	r0, [pc, #232]	@ (8003ff0 <ethernet_link_check_state+0x110>)
 8003f08:	f7fc ff50 	bl	8000dac <LAN8742_GetLinkState>
 8003f0c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00c      	beq.n	8003f3a <ethernet_link_check_state+0x5a>
 8003f20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	dc09      	bgt.n	8003f3a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003f26:	4833      	ldr	r0, [pc, #204]	@ (8003ff4 <ethernet_link_check_state+0x114>)
 8003f28:	f7fd fa3f 	bl	80013aa <HAL_ETH_Stop>
    netif_set_down(netif);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f001 f81f 	bl	8004f70 <netif_set_down>
    netif_set_link_down(netif);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f001 f882 	bl	800503c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003f38:	e055      	b.n	8003fe6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d14e      	bne.n	8003fe6 <ethernet_link_check_state+0x106>
 8003f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	dd4b      	ble.n	8003fe6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f50:	3b02      	subs	r3, #2
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d82a      	bhi.n	8003fac <ethernet_link_check_state+0xcc>
 8003f56:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <ethernet_link_check_state+0x7c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f7f 	.word	0x08003f7f
 8003f64:	08003f8f 	.word	0x08003f8f
 8003f68:	08003f9f 	.word	0x08003f9f
      duplex = ETH_FULLDUPLEX_MODE;
 8003f6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f70:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003f72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f76:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003f7c:	e017      	b.n	8003fae <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003f82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f86:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003f8c:	e00f      	b.n	8003fae <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003f8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f92:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003f94:	2300      	movs	r3, #0
 8003f96:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003f9c:	e007      	b.n	8003fae <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003faa:	e000      	b.n	8003fae <ethernet_link_check_state+0xce>
      break;
 8003fac:	bf00      	nop
    if(linkchanged)
 8003fae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d018      	beq.n	8003fe6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480e      	ldr	r0, [pc, #56]	@ (8003ff4 <ethernet_link_check_state+0x114>)
 8003fbc:	f7fd fcb9 	bl	8001932 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fc6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003fc8:	f107 030c 	add.w	r3, r7, #12
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4809      	ldr	r0, [pc, #36]	@ (8003ff4 <ethernet_link_check_state+0x114>)
 8003fd0:	f7fd fda6 	bl	8001b20 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003fd4:	4807      	ldr	r0, [pc, #28]	@ (8003ff4 <ethernet_link_check_state+0x114>)
 8003fd6:	f7fd f989 	bl	80012ec <HAL_ETH_Start>
      netif_set_up(netif);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 ff5c 	bl	8004e98 <netif_set_up>
      netif_set_link_up(netif);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fff7 	bl	8004fd4 <netif_set_link_up>
}
 8003fe6:	bf00      	nop
 8003fe8:	3780      	adds	r7, #128	@ 0x80
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20004cf8 	.word	0x20004cf8
 8003ff4:	20004c10 	.word	0x20004c10

08003ff8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004000:	4812      	ldr	r0, [pc, #72]	@ (800404c <HAL_ETH_RxAllocateCallback+0x54>)
 8004002:	f000 fcbf 	bl	8004984 <memp_malloc_pool>
 8004006:	60f8      	str	r0, [r7, #12]
  if (p)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d014      	beq.n	8004038 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f103 0220 	add.w	r2, r3, #32
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a0d      	ldr	r2, [pc, #52]	@ (8004050 <HAL_ETH_RxAllocateCallback+0x58>)
 800401c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2241      	movs	r2, #65	@ 0x41
 800402e:	2100      	movs	r1, #0
 8004030:	2000      	movs	r0, #0
 8004032:	f001 f9f9 	bl	8005428 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004036:	e005      	b.n	8004044 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004038:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_ETH_RxAllocateCallback+0x5c>)
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	08012360 	.word	0x08012360
 8004050:	08003c75 	.word	0x08003c75
 8004054:	20004acc 	.word	0x20004acc

08004058 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3b20      	subs	r3, #32
 8004076:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2200      	movs	r2, #0
 8004082:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e003      	b.n	80040a2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e009      	b.n	80040c4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	891a      	ldrh	r2, [r3, #8]
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	4413      	add	r3, r2
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f2      	bne.n	80040b0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	3724      	adds	r7, #36	@ 0x24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80040e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	b21a      	sxth	r2, r3
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	b21b      	sxth	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	b29b      	uxth	r3, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	061a      	lsls	r2, r3, #24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0e1b      	lsrs	r3, r3, #24
 8004128:	4313      	orrs	r3, r2
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004140:	f000 f8d4 	bl	80042ec <mem_init>
  memp_init();
 8004144:	f000 fbda 	bl	80048fc <memp_init>
  pbuf_init();
  netif_init();
 8004148:	f000 fcd8 	bl	8004afc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800414c:	f007 ff00 	bl	800bf50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004150:	f001 fe9e 	bl	8005e90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004154:	f007 fe72 	bl	800be3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800416a:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <ptr_to_mem+0x20>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	4413      	add	r3, r2
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20005384 	.word	0x20005384

08004184 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <mem_to_ptr+0x20>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	b29b      	uxth	r3, r3
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20005384 	.word	0x20005384

080041a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80041b0:	4b45      	ldr	r3, [pc, #276]	@ (80042c8 <plug_holes+0x120>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d206      	bcs.n	80041c8 <plug_holes+0x20>
 80041ba:	4b44      	ldr	r3, [pc, #272]	@ (80042cc <plug_holes+0x124>)
 80041bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80041c0:	4943      	ldr	r1, [pc, #268]	@ (80042d0 <plug_holes+0x128>)
 80041c2:	4844      	ldr	r0, [pc, #272]	@ (80042d4 <plug_holes+0x12c>)
 80041c4:	f00a fc50 	bl	800ea68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80041c8:	4b43      	ldr	r3, [pc, #268]	@ (80042d8 <plug_holes+0x130>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d306      	bcc.n	80041e0 <plug_holes+0x38>
 80041d2:	4b3e      	ldr	r3, [pc, #248]	@ (80042cc <plug_holes+0x124>)
 80041d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80041d8:	4940      	ldr	r1, [pc, #256]	@ (80042dc <plug_holes+0x134>)
 80041da:	483e      	ldr	r0, [pc, #248]	@ (80042d4 <plug_holes+0x12c>)
 80041dc:	f00a fc44 	bl	800ea68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <plug_holes+0x4e>
 80041e8:	4b38      	ldr	r3, [pc, #224]	@ (80042cc <plug_holes+0x124>)
 80041ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80041ee:	493c      	ldr	r1, [pc, #240]	@ (80042e0 <plug_holes+0x138>)
 80041f0:	4838      	ldr	r0, [pc, #224]	@ (80042d4 <plug_holes+0x12c>)
 80041f2:	f00a fc39 	bl	800ea68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041fe:	d906      	bls.n	800420e <plug_holes+0x66>
 8004200:	4b32      	ldr	r3, [pc, #200]	@ (80042cc <plug_holes+0x124>)
 8004202:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004206:	4937      	ldr	r1, [pc, #220]	@ (80042e4 <plug_holes+0x13c>)
 8004208:	4832      	ldr	r0, [pc, #200]	@ (80042d4 <plug_holes+0x12c>)
 800420a:	f00a fc2d 	bl	800ea68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ffa4 	bl	8004160 <ptr_to_mem>
 8004218:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	429a      	cmp	r2, r3
 8004220:	d024      	beq.n	800426c <plug_holes+0xc4>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	791b      	ldrb	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d120      	bne.n	800426c <plug_holes+0xc4>
 800422a:	4b2b      	ldr	r3, [pc, #172]	@ (80042d8 <plug_holes+0x130>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	429a      	cmp	r2, r3
 8004232:	d01b      	beq.n	800426c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004234:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <plug_holes+0x140>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	d102      	bne.n	8004244 <plug_holes+0x9c>
      lfree = mem;
 800423e:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <plug_holes+0x140>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004254:	d00a      	beq.n	800426c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff80 	bl	8004160 <ptr_to_mem>
 8004260:	4604      	mov	r4, r0
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ff8e 	bl	8004184 <mem_to_ptr>
 8004268:	4603      	mov	r3, r0
 800426a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	885b      	ldrh	r3, [r3, #2]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff75 	bl	8004160 <ptr_to_mem>
 8004276:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d01f      	beq.n	80042c0 <plug_holes+0x118>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11b      	bne.n	80042c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004288:	4b17      	ldr	r3, [pc, #92]	@ (80042e8 <plug_holes+0x140>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	d102      	bne.n	8004298 <plug_holes+0xf0>
      lfree = pmem;
 8004292:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <plug_holes+0x140>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	881a      	ldrh	r2, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80042a8:	d00a      	beq.n	80042c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff56 	bl	8004160 <ptr_to_mem>
 80042b4:	4604      	mov	r4, r0
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f7ff ff64 	bl	8004184 <mem_to_ptr>
 80042bc:	4603      	mov	r3, r0
 80042be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd90      	pop	{r4, r7, pc}
 80042c8:	20005384 	.word	0x20005384
 80042cc:	0800f8f0 	.word	0x0800f8f0
 80042d0:	0800f920 	.word	0x0800f920
 80042d4:	0800f938 	.word	0x0800f938
 80042d8:	20005388 	.word	0x20005388
 80042dc:	0800f960 	.word	0x0800f960
 80042e0:	0800f97c 	.word	0x0800f97c
 80042e4:	0800f998 	.word	0x0800f998
 80042e8:	2000538c 	.word	0x2000538c

080042ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80042f2:	4b18      	ldr	r3, [pc, #96]	@ (8004354 <mem_init+0x68>)
 80042f4:	3303      	adds	r3, #3
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <mem_init+0x6c>)
 80042fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004300:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <mem_init+0x6c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800430c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800431a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800431e:	f7ff ff1f 	bl	8004160 <ptr_to_mem>
 8004322:	4603      	mov	r3, r0
 8004324:	4a0d      	ldr	r2, [pc, #52]	@ (800435c <mem_init+0x70>)
 8004326:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <mem_init+0x70>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004330:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <mem_init+0x70>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004338:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <mem_init+0x70>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004342:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <mem_init+0x6c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a05      	ldr	r2, [pc, #20]	@ (8004360 <mem_init+0x74>)
 800434a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20004d30 	.word	0x20004d30
 8004358:	20005384 	.word	0x20005384
 800435c:	20005388 	.word	0x20005388
 8004360:	2000538c 	.word	0x2000538c

08004364 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff09 	bl	8004184 <mem_to_ptr>
 8004372:	4603      	mov	r3, r0
 8004374:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fef0 	bl	8004160 <ptr_to_mem>
 8004380:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	885b      	ldrh	r3, [r3, #2]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff feea 	bl	8004160 <ptr_to_mem>
 800438c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004396:	d818      	bhi.n	80043ca <mem_link_valid+0x66>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	885b      	ldrh	r3, [r3, #2]
 800439c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80043a0:	d813      	bhi.n	80043ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043a6:	8afa      	ldrh	r2, [r7, #22]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d004      	beq.n	80043b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	8afa      	ldrh	r2, [r7, #22]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d109      	bne.n	80043ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043b6:	4b08      	ldr	r3, [pc, #32]	@ (80043d8 <mem_link_valid+0x74>)
 80043b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d006      	beq.n	80043ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	885b      	ldrh	r3, [r3, #2]
 80043c4:	8afa      	ldrh	r2, [r7, #22]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <mem_link_valid+0x6a>
    return 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <mem_link_valid+0x6c>
  }
  return 1;
 80043ce:	2301      	movs	r3, #1
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20005388 	.word	0x20005388

080043dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04c      	beq.n	8004484 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80043f4:	4b25      	ldr	r3, [pc, #148]	@ (800448c <mem_free+0xb0>)
 80043f6:	f240 2273 	movw	r2, #627	@ 0x273
 80043fa:	4925      	ldr	r1, [pc, #148]	@ (8004490 <mem_free+0xb4>)
 80043fc:	4825      	ldr	r0, [pc, #148]	@ (8004494 <mem_free+0xb8>)
 80043fe:	f00a fb33 	bl	800ea68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004402:	e040      	b.n	8004486 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3b08      	subs	r3, #8
 8004408:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800440a:	4b23      	ldr	r3, [pc, #140]	@ (8004498 <mem_free+0xbc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	429a      	cmp	r2, r3
 8004412:	d306      	bcc.n	8004422 <mem_free+0x46>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f103 020c 	add.w	r2, r3, #12
 800441a:	4b20      	ldr	r3, [pc, #128]	@ (800449c <mem_free+0xc0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d907      	bls.n	8004432 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004422:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <mem_free+0xb0>)
 8004424:	f240 227f 	movw	r2, #639	@ 0x27f
 8004428:	491d      	ldr	r1, [pc, #116]	@ (80044a0 <mem_free+0xc4>)
 800442a:	481a      	ldr	r0, [pc, #104]	@ (8004494 <mem_free+0xb8>)
 800442c:	f00a fb1c 	bl	800ea68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004430:	e029      	b.n	8004486 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	791b      	ldrb	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800443a:	4b14      	ldr	r3, [pc, #80]	@ (800448c <mem_free+0xb0>)
 800443c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004440:	4918      	ldr	r1, [pc, #96]	@ (80044a4 <mem_free+0xc8>)
 8004442:	4814      	ldr	r0, [pc, #80]	@ (8004494 <mem_free+0xb8>)
 8004444:	f00a fb10 	bl	800ea68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004448:	e01d      	b.n	8004486 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff ff8a 	bl	8004364 <mem_link_valid>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d107      	bne.n	8004466 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <mem_free+0xb0>)
 8004458:	f240 2295 	movw	r2, #661	@ 0x295
 800445c:	4912      	ldr	r1, [pc, #72]	@ (80044a8 <mem_free+0xcc>)
 800445e:	480d      	ldr	r0, [pc, #52]	@ (8004494 <mem_free+0xb8>)
 8004460:	f00a fb02 	bl	800ea68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004464:	e00f      	b.n	8004486 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800446c:	4b0f      	ldr	r3, [pc, #60]	@ (80044ac <mem_free+0xd0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	429a      	cmp	r2, r3
 8004474:	d202      	bcs.n	800447c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004476:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <mem_free+0xd0>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff fe93 	bl	80041a8 <plug_holes>
 8004482:	e000      	b.n	8004486 <mem_free+0xaa>
    return;
 8004484:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	0800f8f0 	.word	0x0800f8f0
 8004490:	0800f9c4 	.word	0x0800f9c4
 8004494:	0800f938 	.word	0x0800f938
 8004498:	20005384 	.word	0x20005384
 800449c:	20005388 	.word	0x20005388
 80044a0:	0800f9e8 	.word	0x0800f9e8
 80044a4:	0800fa04 	.word	0x0800fa04
 80044a8:	0800fa2c 	.word	0x0800fa2c
 80044ac:	2000538c 	.word	0x2000538c

080044b0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	3303      	adds	r3, #3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80044c8:	8bfb      	ldrh	r3, [r7, #30]
 80044ca:	2b0b      	cmp	r3, #11
 80044cc:	d801      	bhi.n	80044d2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80044ce:	230c      	movs	r3, #12
 80044d0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80044d2:	8bfb      	ldrh	r3, [r7, #30]
 80044d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80044d8:	d803      	bhi.n	80044e2 <mem_trim+0x32>
 80044da:	8bfa      	ldrh	r2, [r7, #30]
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d201      	bcs.n	80044e6 <mem_trim+0x36>
    return NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e0cc      	b.n	8004680 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80044e6:	4b68      	ldr	r3, [pc, #416]	@ (8004688 <mem_trim+0x1d8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d304      	bcc.n	80044fa <mem_trim+0x4a>
 80044f0:	4b66      	ldr	r3, [pc, #408]	@ (800468c <mem_trim+0x1dc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d306      	bcc.n	8004508 <mem_trim+0x58>
 80044fa:	4b65      	ldr	r3, [pc, #404]	@ (8004690 <mem_trim+0x1e0>)
 80044fc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004500:	4964      	ldr	r1, [pc, #400]	@ (8004694 <mem_trim+0x1e4>)
 8004502:	4865      	ldr	r0, [pc, #404]	@ (8004698 <mem_trim+0x1e8>)
 8004504:	f00a fab0 	bl	800ea68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004508:	4b5f      	ldr	r3, [pc, #380]	@ (8004688 <mem_trim+0x1d8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d304      	bcc.n	800451c <mem_trim+0x6c>
 8004512:	4b5e      	ldr	r3, [pc, #376]	@ (800468c <mem_trim+0x1dc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	d301      	bcc.n	8004520 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	e0af      	b.n	8004680 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b08      	subs	r3, #8
 8004524:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004526:	69b8      	ldr	r0, [r7, #24]
 8004528:	f7ff fe2c 	bl	8004184 <mem_to_ptr>
 800452c:	4603      	mov	r3, r0
 800452e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	881a      	ldrh	r2, [r3, #0]
 8004534:	8afb      	ldrh	r3, [r7, #22]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b08      	subs	r3, #8
 800453c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800453e:	8bfa      	ldrh	r2, [r7, #30]
 8004540:	8abb      	ldrh	r3, [r7, #20]
 8004542:	429a      	cmp	r2, r3
 8004544:	d906      	bls.n	8004554 <mem_trim+0xa4>
 8004546:	4b52      	ldr	r3, [pc, #328]	@ (8004690 <mem_trim+0x1e0>)
 8004548:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800454c:	4953      	ldr	r1, [pc, #332]	@ (800469c <mem_trim+0x1ec>)
 800454e:	4852      	ldr	r0, [pc, #328]	@ (8004698 <mem_trim+0x1e8>)
 8004550:	f00a fa8a 	bl	800ea68 <iprintf>
  if (newsize > size) {
 8004554:	8bfa      	ldrh	r2, [r7, #30]
 8004556:	8abb      	ldrh	r3, [r7, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	d901      	bls.n	8004560 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	e08f      	b.n	8004680 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004560:	8bfa      	ldrh	r2, [r7, #30]
 8004562:	8abb      	ldrh	r3, [r7, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	d101      	bne.n	800456c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	e089      	b.n	8004680 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fdf5 	bl	8004160 <ptr_to_mem>
 8004576:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	791b      	ldrb	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d13f      	bne.n	8004600 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004588:	d106      	bne.n	8004598 <mem_trim+0xe8>
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <mem_trim+0x1e0>)
 800458c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004590:	4943      	ldr	r1, [pc, #268]	@ (80046a0 <mem_trim+0x1f0>)
 8004592:	4841      	ldr	r0, [pc, #260]	@ (8004698 <mem_trim+0x1e8>)
 8004594:	f00a fa68 	bl	800ea68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800459e:	8afa      	ldrh	r2, [r7, #22]
 80045a0:	8bfb      	ldrh	r3, [r7, #30]
 80045a2:	4413      	add	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3308      	adds	r3, #8
 80045a8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80045aa:	4b3e      	ldr	r3, [pc, #248]	@ (80046a4 <mem_trim+0x1f4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d106      	bne.n	80045c2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fdd2 	bl	8004160 <ptr_to_mem>
 80045bc:	4603      	mov	r3, r0
 80045be:	4a39      	ldr	r2, [pc, #228]	@ (80046a4 <mem_trim+0x1f4>)
 80045c0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80045c2:	89fb      	ldrh	r3, [r7, #14]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fdcb 	bl	8004160 <ptr_to_mem>
 80045ca:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2200      	movs	r2, #0
 80045d0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	89ba      	ldrh	r2, [r7, #12]
 80045d6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	8afa      	ldrh	r2, [r7, #22]
 80045dc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	89fa      	ldrh	r2, [r7, #14]
 80045e2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80045ec:	d047      	beq.n	800467e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fdb4 	bl	8004160 <ptr_to_mem>
 80045f8:	4602      	mov	r2, r0
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	8053      	strh	r3, [r2, #2]
 80045fe:	e03e      	b.n	800467e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004600:	8bfb      	ldrh	r3, [r7, #30]
 8004602:	f103 0214 	add.w	r2, r3, #20
 8004606:	8abb      	ldrh	r3, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	d838      	bhi.n	800467e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800460c:	8afa      	ldrh	r2, [r7, #22]
 800460e:	8bfb      	ldrh	r3, [r7, #30]
 8004610:	4413      	add	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	3308      	adds	r3, #8
 8004616:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004620:	d106      	bne.n	8004630 <mem_trim+0x180>
 8004622:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <mem_trim+0x1e0>)
 8004624:	f240 3216 	movw	r2, #790	@ 0x316
 8004628:	491d      	ldr	r1, [pc, #116]	@ (80046a0 <mem_trim+0x1f0>)
 800462a:	481b      	ldr	r0, [pc, #108]	@ (8004698 <mem_trim+0x1e8>)
 800462c:	f00a fa1c 	bl	800ea68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fd94 	bl	8004160 <ptr_to_mem>
 8004638:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800463a:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <mem_trim+0x1f4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d202      	bcs.n	800464a <mem_trim+0x19a>
      lfree = mem2;
 8004644:	4a17      	ldr	r2, [pc, #92]	@ (80046a4 <mem_trim+0x1f4>)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2200      	movs	r2, #0
 800464e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	8afa      	ldrh	r2, [r7, #22]
 800465c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	89fa      	ldrh	r2, [r7, #14]
 8004662:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800466c:	d007      	beq.n	800467e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fd74 	bl	8004160 <ptr_to_mem>
 8004678:	4602      	mov	r2, r0
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800467e:	687b      	ldr	r3, [r7, #4]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20005384 	.word	0x20005384
 800468c:	20005388 	.word	0x20005388
 8004690:	0800f8f0 	.word	0x0800f8f0
 8004694:	0800fa60 	.word	0x0800fa60
 8004698:	0800f938 	.word	0x0800f938
 800469c:	0800fa78 	.word	0x0800fa78
 80046a0:	0800fa98 	.word	0x0800fa98
 80046a4:	2000538c 	.word	0x2000538c

080046a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <mem_malloc+0x14>
    return NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e0d9      	b.n	8004870 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	3303      	adds	r3, #3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80046c8:	8bbb      	ldrh	r3, [r7, #28]
 80046ca:	2b0b      	cmp	r3, #11
 80046cc:	d801      	bhi.n	80046d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80046ce:	230c      	movs	r3, #12
 80046d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80046d2:	8bbb      	ldrh	r3, [r7, #28]
 80046d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046d8:	d803      	bhi.n	80046e2 <mem_malloc+0x3a>
 80046da:	8bba      	ldrh	r2, [r7, #28]
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d201      	bcs.n	80046e6 <mem_malloc+0x3e>
    return NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e0c4      	b.n	8004870 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80046e6:	4b64      	ldr	r3, [pc, #400]	@ (8004878 <mem_malloc+0x1d0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fd4a 	bl	8004184 <mem_to_ptr>
 80046f0:	4603      	mov	r3, r0
 80046f2:	83fb      	strh	r3, [r7, #30]
 80046f4:	e0b4      	b.n	8004860 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80046f6:	8bfb      	ldrh	r3, [r7, #30]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fd31 	bl	8004160 <ptr_to_mem>
 80046fe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	791b      	ldrb	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 80a4 	bne.w	8004852 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f1a3 0208 	sub.w	r2, r3, #8
 8004718:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800471a:	429a      	cmp	r2, r3
 800471c:	f0c0 8099 	bcc.w	8004852 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	8bfb      	ldrh	r3, [r7, #30]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f1a3 0208 	sub.w	r2, r3, #8
 800472e:	8bbb      	ldrh	r3, [r7, #28]
 8004730:	3314      	adds	r3, #20
 8004732:	429a      	cmp	r2, r3
 8004734:	d333      	bcc.n	800479e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004736:	8bfa      	ldrh	r2, [r7, #30]
 8004738:	8bbb      	ldrh	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	b29b      	uxth	r3, r3
 800473e:	3308      	adds	r3, #8
 8004740:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004742:	8a7b      	ldrh	r3, [r7, #18]
 8004744:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004748:	d106      	bne.n	8004758 <mem_malloc+0xb0>
 800474a:	4b4c      	ldr	r3, [pc, #304]	@ (800487c <mem_malloc+0x1d4>)
 800474c:	f240 3287 	movw	r2, #903	@ 0x387
 8004750:	494b      	ldr	r1, [pc, #300]	@ (8004880 <mem_malloc+0x1d8>)
 8004752:	484c      	ldr	r0, [pc, #304]	@ (8004884 <mem_malloc+0x1dc>)
 8004754:	f00a f988 	bl	800ea68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004758:	8a7b      	ldrh	r3, [r7, #18]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fd00 	bl	8004160 <ptr_to_mem>
 8004760:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	881a      	ldrh	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8bfa      	ldrh	r2, [r7, #30]
 8004774:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	8a7a      	ldrh	r2, [r7, #18]
 800477a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2201      	movs	r2, #1
 8004780:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800478a:	d00b      	beq.n	80047a4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fce5 	bl	8004160 <ptr_to_mem>
 8004796:	4602      	mov	r2, r0
 8004798:	8a7b      	ldrh	r3, [r7, #18]
 800479a:	8053      	strh	r3, [r2, #2]
 800479c:	e002      	b.n	80047a4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2201      	movs	r2, #1
 80047a2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80047a4:	4b34      	ldr	r3, [pc, #208]	@ (8004878 <mem_malloc+0x1d0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d127      	bne.n	80047fe <mem_malloc+0x156>
          struct mem *cur = lfree;
 80047ae:	4b32      	ldr	r3, [pc, #200]	@ (8004878 <mem_malloc+0x1d0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80047b4:	e005      	b.n	80047c2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fcd0 	bl	8004160 <ptr_to_mem>
 80047c0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	791b      	ldrb	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <mem_malloc+0x12c>
 80047ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <mem_malloc+0x1e0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1f0      	bne.n	80047b6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80047d4:	4a28      	ldr	r2, [pc, #160]	@ (8004878 <mem_malloc+0x1d0>)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80047da:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <mem_malloc+0x1d0>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <mem_malloc+0x1e0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d00b      	beq.n	80047fe <mem_malloc+0x156>
 80047e6:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <mem_malloc+0x1d0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <mem_malloc+0x156>
 80047f0:	4b22      	ldr	r3, [pc, #136]	@ (800487c <mem_malloc+0x1d4>)
 80047f2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80047f6:	4925      	ldr	r1, [pc, #148]	@ (800488c <mem_malloc+0x1e4>)
 80047f8:	4822      	ldr	r0, [pc, #136]	@ (8004884 <mem_malloc+0x1dc>)
 80047fa:	f00a f935 	bl	800ea68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80047fe:	8bba      	ldrh	r2, [r7, #28]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	3308      	adds	r3, #8
 8004806:	4a20      	ldr	r2, [pc, #128]	@ (8004888 <mem_malloc+0x1e0>)
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	4293      	cmp	r3, r2
 800480c:	d906      	bls.n	800481c <mem_malloc+0x174>
 800480e:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <mem_malloc+0x1d4>)
 8004810:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004814:	491e      	ldr	r1, [pc, #120]	@ (8004890 <mem_malloc+0x1e8>)
 8004816:	481b      	ldr	r0, [pc, #108]	@ (8004884 <mem_malloc+0x1dc>)
 8004818:	f00a f926 	bl	800ea68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <mem_malloc+0x18c>
 8004826:	4b15      	ldr	r3, [pc, #84]	@ (800487c <mem_malloc+0x1d4>)
 8004828:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800482c:	4919      	ldr	r1, [pc, #100]	@ (8004894 <mem_malloc+0x1ec>)
 800482e:	4815      	ldr	r0, [pc, #84]	@ (8004884 <mem_malloc+0x1dc>)
 8004830:	f00a f91a 	bl	800ea68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <mem_malloc+0x1a4>
 800483e:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <mem_malloc+0x1d4>)
 8004840:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004844:	4914      	ldr	r1, [pc, #80]	@ (8004898 <mem_malloc+0x1f0>)
 8004846:	480f      	ldr	r0, [pc, #60]	@ (8004884 <mem_malloc+0x1dc>)
 8004848:	f00a f90e 	bl	800ea68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3308      	adds	r3, #8
 8004850:	e00e      	b.n	8004870 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004852:	8bfb      	ldrh	r3, [r7, #30]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fc83 	bl	8004160 <ptr_to_mem>
 800485a:	4603      	mov	r3, r0
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004860:	8bfa      	ldrh	r2, [r7, #30]
 8004862:	8bbb      	ldrh	r3, [r7, #28]
 8004864:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004868:	429a      	cmp	r2, r3
 800486a:	f4ff af44 	bcc.w	80046f6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	2000538c 	.word	0x2000538c
 800487c:	0800f8f0 	.word	0x0800f8f0
 8004880:	0800fa98 	.word	0x0800fa98
 8004884:	0800f938 	.word	0x0800f938
 8004888:	20005388 	.word	0x20005388
 800488c:	0800faac 	.word	0x0800faac
 8004890:	0800fac8 	.word	0x0800fac8
 8004894:	0800faf8 	.word	0x0800faf8
 8004898:	0800fb28 	.word	0x0800fb28

0800489c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	3303      	adds	r3, #3
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e011      	b.n	80048e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	885b      	ldrh	r3, [r3, #2]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	dbe7      	blt.n	80048be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004902:	2300      	movs	r3, #0
 8004904:	80fb      	strh	r3, [r7, #6]
 8004906:	e009      	b.n	800491c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	4a08      	ldr	r2, [pc, #32]	@ (800492c <memp_init+0x30>)
 800490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ffc3 	bl	800489c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	3301      	adds	r3, #1
 800491a:	80fb      	strh	r3, [r7, #6]
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b09      	cmp	r3, #9
 8004920:	d9f2      	bls.n	8004908 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	080123e4 	.word	0x080123e4

08004930 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <do_memp_malloc_pool+0x38>
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <do_memp_malloc_pool+0x48>)
 800495c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004960:	4906      	ldr	r1, [pc, #24]	@ (800497c <do_memp_malloc_pool+0x4c>)
 8004962:	4807      	ldr	r0, [pc, #28]	@ (8004980 <do_memp_malloc_pool+0x50>)
 8004964:	f00a f880 	bl	800ea68 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e000      	b.n	800496e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	0800fb4c 	.word	0x0800fb4c
 800497c:	0800fb7c 	.word	0x0800fb7c
 8004980:	0800fba0 	.word	0x0800fba0

08004984 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <memp_malloc_pool+0x1c>
 8004992:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <memp_malloc_pool+0x38>)
 8004994:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004998:	4909      	ldr	r1, [pc, #36]	@ (80049c0 <memp_malloc_pool+0x3c>)
 800499a:	480a      	ldr	r0, [pc, #40]	@ (80049c4 <memp_malloc_pool+0x40>)
 800499c:	f00a f864 	bl	800ea68 <iprintf>
  if (desc == NULL) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <memp_malloc_pool+0x26>
    return NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e003      	b.n	80049b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffc0 	bl	8004930 <do_memp_malloc_pool>
 80049b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	0800fb4c 	.word	0x0800fb4c
 80049c0:	0800fbc8 	.word	0x0800fbc8
 80049c4:	0800fba0 	.word	0x0800fba0

080049c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	d908      	bls.n	80049ea <memp_malloc+0x22>
 80049d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <memp_malloc+0x3c>)
 80049da:	f240 1257 	movw	r2, #343	@ 0x157
 80049de:	490a      	ldr	r1, [pc, #40]	@ (8004a08 <memp_malloc+0x40>)
 80049e0:	480a      	ldr	r0, [pc, #40]	@ (8004a0c <memp_malloc+0x44>)
 80049e2:	f00a f841 	bl	800ea68 <iprintf>
 80049e6:	2300      	movs	r3, #0
 80049e8:	e008      	b.n	80049fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	4a08      	ldr	r2, [pc, #32]	@ (8004a10 <memp_malloc+0x48>)
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ff9c 	bl	8004930 <do_memp_malloc_pool>
 80049f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	0800fb4c 	.word	0x0800fb4c
 8004a08:	0800fbdc 	.word	0x0800fbdc
 8004a0c:	0800fba0 	.word	0x0800fba0
 8004a10:	080123e4 	.word	0x080123e4

08004a14 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <do_memp_free_pool+0x22>
 8004a28:	4b0a      	ldr	r3, [pc, #40]	@ (8004a54 <do_memp_free_pool+0x40>)
 8004a2a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <do_memp_free_pool+0x44>)
 8004a30:	480a      	ldr	r0, [pc, #40]	@ (8004a5c <do_memp_free_pool+0x48>)
 8004a32:	f00a f819 	bl	800ea68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	0800fb4c 	.word	0x0800fb4c
 8004a58:	0800fbfc 	.word	0x0800fbfc
 8004a5c:	0800fba0 	.word	0x0800fba0

08004a60 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <memp_free_pool+0x1e>
 8004a70:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <memp_free_pool+0x3c>)
 8004a72:	f240 1295 	movw	r2, #405	@ 0x195
 8004a76:	490a      	ldr	r1, [pc, #40]	@ (8004aa0 <memp_free_pool+0x40>)
 8004a78:	480a      	ldr	r0, [pc, #40]	@ (8004aa4 <memp_free_pool+0x44>)
 8004a7a:	f009 fff5 	bl	800ea68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <memp_free_pool+0x34>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ffc1 	bl	8004a14 <do_memp_free_pool>
 8004a92:	e000      	b.n	8004a96 <memp_free_pool+0x36>
    return;
 8004a94:	bf00      	nop
}
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	0800fb4c 	.word	0x0800fb4c
 8004aa0:	0800fbc8 	.word	0x0800fbc8
 8004aa4:	0800fba0 	.word	0x0800fba0

08004aa8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6039      	str	r1, [r7, #0]
 8004ab2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d907      	bls.n	8004aca <memp_free+0x22>
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <memp_free+0x44>)
 8004abc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8004ac0:	490b      	ldr	r1, [pc, #44]	@ (8004af0 <memp_free+0x48>)
 8004ac2:	480c      	ldr	r0, [pc, #48]	@ (8004af4 <memp_free+0x4c>)
 8004ac4:	f009 ffd0 	bl	800ea68 <iprintf>
 8004ac8:	e00c      	b.n	8004ae4 <memp_free+0x3c>

  if (mem == NULL) {
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	4a09      	ldr	r2, [pc, #36]	@ (8004af8 <memp_free+0x50>)
 8004ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ff9a 	bl	8004a14 <do_memp_free_pool>
 8004ae0:	e000      	b.n	8004ae4 <memp_free+0x3c>
    return;
 8004ae2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	0800fb4c 	.word	0x0800fb4c
 8004af0:	0800fc1c 	.word	0x0800fc1c
 8004af4:	0800fba0 	.word	0x0800fba0
 8004af8:	080123e4 	.word	0x080123e4

08004afc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d108      	bne.n	8004b32 <netif_add+0x26>
 8004b20:	4b57      	ldr	r3, [pc, #348]	@ (8004c80 <netif_add+0x174>)
 8004b22:	f240 1227 	movw	r2, #295	@ 0x127
 8004b26:	4957      	ldr	r1, [pc, #348]	@ (8004c84 <netif_add+0x178>)
 8004b28:	4857      	ldr	r0, [pc, #348]	@ (8004c88 <netif_add+0x17c>)
 8004b2a:	f009 ff9d 	bl	800ea68 <iprintf>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e0a2      	b.n	8004c78 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <netif_add+0x3e>
 8004b38:	4b51      	ldr	r3, [pc, #324]	@ (8004c80 <netif_add+0x174>)
 8004b3a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004b3e:	4953      	ldr	r1, [pc, #332]	@ (8004c8c <netif_add+0x180>)
 8004b40:	4851      	ldr	r0, [pc, #324]	@ (8004c88 <netif_add+0x17c>)
 8004b42:	f009 ff91 	bl	800ea68 <iprintf>
 8004b46:	2300      	movs	r3, #0
 8004b48:	e096      	b.n	8004c78 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004b50:	4b4f      	ldr	r3, [pc, #316]	@ (8004c90 <netif_add+0x184>)
 8004b52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c90 <netif_add+0x184>)
 8004b5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004b64:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <netif_add+0x184>)
 8004b66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4a45      	ldr	r2, [pc, #276]	@ (8004c94 <netif_add+0x188>)
 8004b7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c98 <netif_add+0x18c>)
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ba8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f917 	bl	8004de4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	4798      	blx	r3
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <netif_add+0xba>
    return NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e058      	b.n	8004c78 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bcc:	2bff      	cmp	r3, #255	@ 0xff
 8004bce:	d103      	bne.n	8004bd8 <netif_add+0xcc>
        netif->num = 0;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c9c <netif_add+0x190>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e02b      	b.n	8004c3c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d106      	bne.n	8004bfa <netif_add+0xee>
 8004bec:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <netif_add+0x174>)
 8004bee:	f240 128b 	movw	r2, #395	@ 0x18b
 8004bf2:	492b      	ldr	r1, [pc, #172]	@ (8004ca0 <netif_add+0x194>)
 8004bf4:	4824      	ldr	r0, [pc, #144]	@ (8004c88 <netif_add+0x17c>)
 8004bf6:	f009 ff37 	bl	800ea68 <iprintf>
        num_netifs++;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2bff      	cmp	r3, #255	@ 0xff
 8004c04:	dd06      	ble.n	8004c14 <netif_add+0x108>
 8004c06:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <netif_add+0x174>)
 8004c08:	f240 128d 	movw	r2, #397	@ 0x18d
 8004c0c:	4925      	ldr	r1, [pc, #148]	@ (8004ca4 <netif_add+0x198>)
 8004c0e:	481e      	ldr	r0, [pc, #120]	@ (8004c88 <netif_add+0x17c>)
 8004c10:	f009 ff2a 	bl	800ea68 <iprintf>
        if (netif2->num == netif->num) {
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d108      	bne.n	8004c36 <netif_add+0x12a>
          netif->num++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8004c34:	e005      	b.n	8004c42 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1d0      	bne.n	8004be4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1be      	bne.n	8004bc6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004c50:	d103      	bne.n	8004c5a <netif_add+0x14e>
    netif_num = 0;
 8004c52:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <netif_add+0x18c>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e006      	b.n	8004c68 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c60:	3301      	adds	r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <netif_add+0x18c>)
 8004c66:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <netif_add+0x190>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004c70:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <netif_add+0x190>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	0800fc38 	.word	0x0800fc38
 8004c84:	0800fccc 	.word	0x0800fccc
 8004c88:	0800fc88 	.word	0x0800fc88
 8004c8c:	0800fce8 	.word	0x0800fce8
 8004c90:	0801244c 	.word	0x0801244c
 8004c94:	080050bf 	.word	0x080050bf
 8004c98:	200082fc 	.word	0x200082fc
 8004c9c:	200082f4 	.word	0x200082f4
 8004ca0:	0800fd0c 	.word	0x0800fd0c
 8004ca4:	0800fd20 	.word	0x0800fd20

08004ca8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f002 fd9b 	bl	80077f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f007 fad1 	bl	800c264 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 f8b3 	bl	8005e30 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <netif_do_set_ipaddr+0x20>
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d5c <netif_do_set_ipaddr+0x88>)
 8004ce8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8004cec:	491c      	ldr	r1, [pc, #112]	@ (8004d60 <netif_do_set_ipaddr+0x8c>)
 8004cee:	481d      	ldr	r0, [pc, #116]	@ (8004d64 <netif_do_set_ipaddr+0x90>)
 8004cf0:	f009 feba 	bl	800ea68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <netif_do_set_ipaddr+0x34>
 8004cfa:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <netif_do_set_ipaddr+0x88>)
 8004cfc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004d00:	4917      	ldr	r1, [pc, #92]	@ (8004d60 <netif_do_set_ipaddr+0x8c>)
 8004d02:	4818      	ldr	r0, [pc, #96]	@ (8004d64 <netif_do_set_ipaddr+0x90>)
 8004d04:	f009 feb0 	bl	800ea68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d01c      	beq.n	8004d50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ffbb 	bl	8004ca8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <netif_do_set_ipaddr+0x6a>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	e000      	b.n	8004d40 <netif_do_set_ipaddr+0x6c>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004d44:	2101      	movs	r1, #1
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8d2 	bl	8004ef0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	0800fc38 	.word	0x0800fc38
 8004d60:	0800fd50 	.word	0x0800fd50
 8004d64:	0800fc88 	.word	0x0800fc88

08004d68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d00a      	beq.n	8004d98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <netif_do_set_netmask+0x26>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	e000      	b.n	8004d90 <netif_do_set_netmask+0x28>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	330c      	adds	r3, #12
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d00a      	beq.n	8004dd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <netif_do_set_gw+0x26>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	e000      	b.n	8004dce <netif_do_set_gw+0x28>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004e00:	4b1c      	ldr	r3, [pc, #112]	@ (8004e74 <netif_set_addr+0x90>)
 8004e02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <netif_set_addr+0x90>)
 8004e0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004e14:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <netif_set_addr+0x90>)
 8004e16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <netif_set_addr+0x42>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <netif_set_addr+0x46>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <netif_set_addr+0x48>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d006      	beq.n	8004e42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff ff49 	bl	8004cd4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ff8e 	bl	8004d68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff ffa8 	bl	8004da6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	461a      	mov	r2, r3
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff ff35 	bl	8004cd4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004e6a:	bf00      	nop
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	0801244c 	.word	0x0801244c

08004e78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004e80:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <netif_set_default+0x1c>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200082f8 	.word	0x200082f8

08004e98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <netif_set_up+0x1e>
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <netif_set_up+0x4c>)
 8004ea8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004eac:	490e      	ldr	r1, [pc, #56]	@ (8004ee8 <netif_set_up+0x50>)
 8004eae:	480f      	ldr	r0, [pc, #60]	@ (8004eec <netif_set_up+0x54>)
 8004eb0:	f009 fdda 	bl	800ea68 <iprintf>
 8004eb4:	e013      	b.n	8004ede <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004ed6:	2103      	movs	r1, #3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f809 	bl	8004ef0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	0800fc38 	.word	0x0800fc38
 8004ee8:	0800fdc0 	.word	0x0800fdc0
 8004eec:	0800fc88 	.word	0x0800fc88

08004ef0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <netif_issue_reports+0x20>
 8004f02:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <netif_issue_reports+0x74>)
 8004f04:	f240 326d 	movw	r2, #877	@ 0x36d
 8004f08:	4917      	ldr	r1, [pc, #92]	@ (8004f68 <netif_issue_reports+0x78>)
 8004f0a:	4818      	ldr	r0, [pc, #96]	@ (8004f6c <netif_issue_reports+0x7c>)
 8004f0c:	f009 fdac 	bl	800ea68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01e      	beq.n	8004f5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f008 f8ef 	bl	800d138 <etharp_request>
 8004f5a:	e000      	b.n	8004f5e <netif_issue_reports+0x6e>
    return;
 8004f5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	0800fc38 	.word	0x0800fc38
 8004f68:	0800fddc 	.word	0x0800fddc
 8004f6c:	0800fc88 	.word	0x0800fc88

08004f70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <netif_set_down+0x1e>
 8004f7e:	4b12      	ldr	r3, [pc, #72]	@ (8004fc8 <netif_set_down+0x58>)
 8004f80:	f240 329b 	movw	r2, #923	@ 0x39b
 8004f84:	4911      	ldr	r1, [pc, #68]	@ (8004fcc <netif_set_down+0x5c>)
 8004f86:	4812      	ldr	r0, [pc, #72]	@ (8004fd0 <netif_set_down+0x60>)
 8004f88:	f009 fd6e 	bl	800ea68 <iprintf>
 8004f8c:	e019      	b.n	8004fc2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d012      	beq.n	8004fc2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f007 fc79 	bl	800c8b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	0800fc38 	.word	0x0800fc38
 8004fcc:	0800fe00 	.word	0x0800fe00
 8004fd0:	0800fc88 	.word	0x0800fc88

08004fd4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <netif_set_link_up+0x1e>
 8004fe2:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <netif_set_link_up+0x5c>)
 8004fe4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8004fe8:	4912      	ldr	r1, [pc, #72]	@ (8005034 <netif_set_link_up+0x60>)
 8004fea:	4813      	ldr	r0, [pc, #76]	@ (8005038 <netif_set_link_up+0x64>)
 8004fec:	f009 fd3c 	bl	800ea68 <iprintf>
 8004ff0:	e01b      	b.n	800502a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d114      	bne.n	800502a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005006:	f043 0304 	orr.w	r3, r3, #4
 800500a:	b2da      	uxtb	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005012:	2103      	movs	r1, #3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff6b 	bl	8004ef0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <netif_set_link_up+0x56>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	0800fc38 	.word	0x0800fc38
 8005034:	0800fe20 	.word	0x0800fe20
 8005038:	0800fc88 	.word	0x0800fc88

0800503c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <netif_set_link_down+0x1e>
 800504a:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <netif_set_link_down+0x54>)
 800504c:	f240 4206 	movw	r2, #1030	@ 0x406
 8005050:	4910      	ldr	r1, [pc, #64]	@ (8005094 <netif_set_link_down+0x58>)
 8005052:	4811      	ldr	r0, [pc, #68]	@ (8005098 <netif_set_link_down+0x5c>)
 8005054:	f009 fd08 	bl	800ea68 <iprintf>
 8005058:	e017      	b.n	800508a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800506e:	f023 0304 	bic.w	r3, r3, #4
 8005072:	b2da      	uxtb	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <netif_set_link_down+0x4e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	0800fc38 	.word	0x0800fc38
 8005094:	0800fe44 	.word	0x0800fe44
 8005098:	0800fc88 	.word	0x0800fc88

0800509c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	61da      	str	r2, [r3, #28]
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80050ca:	f06f 030b 	mvn.w	r3, #11
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d013      	beq.n	8005114 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80050ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <netif_get_by_index+0x48>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e00c      	b.n	800510e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	79fa      	ldrb	r2, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d101      	bne.n	8005108 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	e006      	b.n	8005116 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ef      	bne.n	80050f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	200082f4 	.word	0x200082f4

08005128 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800512e:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <pbuf_free_ooseq+0x38>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005134:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <pbuf_free_ooseq+0x3c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	e00a      	b.n	8005152 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f002 fb91 	bl	800786c <tcp_free_ooseq>
      return;
 800514a:	e005      	b.n	8005158 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f1      	bne.n	800513c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	200082fd 	.word	0x200082fd
 8005164:	20008310 	.word	0x20008310

08005168 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <pbuf_pool_is_empty+0x14>)
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	200082fd 	.word	0x200082fd

08005180 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4611      	mov	r1, r2
 800518c:	461a      	mov	r2, r3
 800518e:	460b      	mov	r3, r1
 8005190:	80fb      	strh	r3, [r7, #6]
 8005192:	4613      	mov	r3, r2
 8005194:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88ba      	ldrh	r2, [r7, #4]
 80051ac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80051ae:	8b3b      	ldrh	r3, [r7, #24]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	7f3a      	ldrb	r2, [r7, #28]
 80051ba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	73da      	strb	r2, [r3, #15]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08c      	sub	sp, #48	@ 0x30
 80051d8:	af02      	add	r7, sp, #8
 80051da:	4603      	mov	r3, r0
 80051dc:	71fb      	strb	r3, [r7, #7]
 80051de:	460b      	mov	r3, r1
 80051e0:	80bb      	strh	r3, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80051f0:	d07f      	beq.n	80052f2 <pbuf_alloc+0x11e>
 80051f2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80051f6:	f300 80c8 	bgt.w	800538a <pbuf_alloc+0x1b6>
 80051fa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80051fe:	d010      	beq.n	8005222 <pbuf_alloc+0x4e>
 8005200:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005204:	f300 80c1 	bgt.w	800538a <pbuf_alloc+0x1b6>
 8005208:	2b01      	cmp	r3, #1
 800520a:	d002      	beq.n	8005212 <pbuf_alloc+0x3e>
 800520c:	2b41      	cmp	r3, #65	@ 0x41
 800520e:	f040 80bc 	bne.w	800538a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005212:	887a      	ldrh	r2, [r7, #2]
 8005214:	88bb      	ldrh	r3, [r7, #4]
 8005216:	4619      	mov	r1, r3
 8005218:	2000      	movs	r0, #0
 800521a:	f000 f8d1 	bl	80053c0 <pbuf_alloc_reference>
 800521e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005220:	e0bd      	b.n	800539e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800522a:	88bb      	ldrh	r3, [r7, #4]
 800522c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800522e:	2009      	movs	r0, #9
 8005230:	f7ff fbca 	bl	80049c8 <memp_malloc>
 8005234:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800523c:	f7ff ff94 	bl	8005168 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005246:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005248:	f000 faa8 	bl	800579c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	e0a7      	b.n	80053a0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005250:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005252:	3303      	adds	r3, #3
 8005254:	b29b      	uxth	r3, r3
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	b29b      	uxth	r3, r3
 800525c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005260:	b29b      	uxth	r3, r3
 8005262:	8b7a      	ldrh	r2, [r7, #26]
 8005264:	4293      	cmp	r3, r2
 8005266:	bf28      	it	cs
 8005268:	4613      	movcs	r3, r2
 800526a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800526c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800526e:	3310      	adds	r3, #16
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	3303      	adds	r3, #3
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	4618      	mov	r0, r3
 800527c:	89f9      	ldrh	r1, [r7, #14]
 800527e:	8b7a      	ldrh	r2, [r7, #26]
 8005280:	2300      	movs	r3, #0
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	460b      	mov	r3, r1
 800528a:	4601      	mov	r1, r0
 800528c:	6938      	ldr	r0, [r7, #16]
 800528e:	f7ff ff77 	bl	8005180 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <pbuf_alloc+0xd8>
 800529e:	4b42      	ldr	r3, [pc, #264]	@ (80053a8 <pbuf_alloc+0x1d4>)
 80052a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052a4:	4941      	ldr	r1, [pc, #260]	@ (80053ac <pbuf_alloc+0x1d8>)
 80052a6:	4842      	ldr	r0, [pc, #264]	@ (80053b0 <pbuf_alloc+0x1dc>)
 80052a8:	f009 fbde 	bl	800ea68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80052ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052ae:	3303      	adds	r3, #3
 80052b0:	f023 0303 	bic.w	r3, r3, #3
 80052b4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80052b8:	d106      	bne.n	80052c8 <pbuf_alloc+0xf4>
 80052ba:	4b3b      	ldr	r3, [pc, #236]	@ (80053a8 <pbuf_alloc+0x1d4>)
 80052bc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80052c0:	493c      	ldr	r1, [pc, #240]	@ (80053b4 <pbuf_alloc+0x1e0>)
 80052c2:	483b      	ldr	r0, [pc, #236]	@ (80053b0 <pbuf_alloc+0x1dc>)
 80052c4:	f009 fbd0 	bl	800ea68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d2:	e002      	b.n	80052da <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80052de:	8b7a      	ldrh	r2, [r7, #26]
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80052ea:	8b7b      	ldrh	r3, [r7, #26]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d19e      	bne.n	800522e <pbuf_alloc+0x5a>
      break;
 80052f0:	e055      	b.n	800539e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80052f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052f4:	3303      	adds	r3, #3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f023 0303 	bic.w	r3, r3, #3
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	88bb      	ldrh	r3, [r7, #4]
 8005300:	3303      	adds	r3, #3
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	b29b      	uxth	r3, r3
 800530a:	4413      	add	r3, r2
 800530c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800530e:	8b3b      	ldrh	r3, [r7, #24]
 8005310:	3310      	adds	r3, #16
 8005312:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005314:	8b3a      	ldrh	r2, [r7, #24]
 8005316:	88bb      	ldrh	r3, [r7, #4]
 8005318:	3303      	adds	r3, #3
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	429a      	cmp	r2, r3
 8005320:	d306      	bcc.n	8005330 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005322:	8afa      	ldrh	r2, [r7, #22]
 8005324:	88bb      	ldrh	r3, [r7, #4]
 8005326:	3303      	adds	r3, #3
 8005328:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d201      	bcs.n	8005334 <pbuf_alloc+0x160>
        return NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	e035      	b.n	80053a0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005334:	8afb      	ldrh	r3, [r7, #22]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff f9b6 	bl	80046a8 <mem_malloc>
 800533c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <pbuf_alloc+0x174>
        return NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	e02b      	b.n	80053a0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005348:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800534a:	3310      	adds	r3, #16
 800534c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534e:	4413      	add	r3, r2
 8005350:	3303      	adds	r3, #3
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	4618      	mov	r0, r3
 8005358:	88b9      	ldrh	r1, [r7, #4]
 800535a:	88ba      	ldrh	r2, [r7, #4]
 800535c:	2300      	movs	r3, #0
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	460b      	mov	r3, r1
 8005366:	4601      	mov	r1, r0
 8005368:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800536a:	f7ff ff09 	bl	8005180 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <pbuf_alloc+0x1c8>
 800537a:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <pbuf_alloc+0x1d4>)
 800537c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005380:	490d      	ldr	r1, [pc, #52]	@ (80053b8 <pbuf_alloc+0x1e4>)
 8005382:	480b      	ldr	r0, [pc, #44]	@ (80053b0 <pbuf_alloc+0x1dc>)
 8005384:	f009 fb70 	bl	800ea68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005388:	e008      	b.n	800539c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800538a:	4b07      	ldr	r3, [pc, #28]	@ (80053a8 <pbuf_alloc+0x1d4>)
 800538c:	f240 1227 	movw	r2, #295	@ 0x127
 8005390:	490a      	ldr	r1, [pc, #40]	@ (80053bc <pbuf_alloc+0x1e8>)
 8005392:	4807      	ldr	r0, [pc, #28]	@ (80053b0 <pbuf_alloc+0x1dc>)
 8005394:	f009 fb68 	bl	800ea68 <iprintf>
      return NULL;
 8005398:	2300      	movs	r3, #0
 800539a:	e001      	b.n	80053a0 <pbuf_alloc+0x1cc>
      break;
 800539c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	@ 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	0800fe68 	.word	0x0800fe68
 80053ac:	0800fe98 	.word	0x0800fe98
 80053b0:	0800fec8 	.word	0x0800fec8
 80053b4:	0800fef0 	.word	0x0800fef0
 80053b8:	0800ff24 	.word	0x0800ff24
 80053bc:	0800ff50 	.word	0x0800ff50

080053c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80053d0:	883b      	ldrh	r3, [r7, #0]
 80053d2:	2b41      	cmp	r3, #65	@ 0x41
 80053d4:	d009      	beq.n	80053ea <pbuf_alloc_reference+0x2a>
 80053d6:	883b      	ldrh	r3, [r7, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d006      	beq.n	80053ea <pbuf_alloc_reference+0x2a>
 80053dc:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <pbuf_alloc_reference+0x5c>)
 80053de:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80053e2:	490f      	ldr	r1, [pc, #60]	@ (8005420 <pbuf_alloc_reference+0x60>)
 80053e4:	480f      	ldr	r0, [pc, #60]	@ (8005424 <pbuf_alloc_reference+0x64>)
 80053e6:	f009 fb3f 	bl	800ea68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80053ea:	2008      	movs	r0, #8
 80053ec:	f7ff faec 	bl	80049c8 <memp_malloc>
 80053f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e00b      	b.n	8005414 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80053fc:	8879      	ldrh	r1, [r7, #2]
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	2300      	movs	r3, #0
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	883b      	ldrh	r3, [r7, #0]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	460b      	mov	r3, r1
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff feb7 	bl	8005180 <pbuf_init_alloced_pbuf>
  return p;
 8005412:	68fb      	ldr	r3, [r7, #12]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	0800fe68 	.word	0x0800fe68
 8005420:	0800ff6c 	.word	0x0800ff6c
 8005424:	0800fec8 	.word	0x0800fec8

08005428 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	460b      	mov	r3, r1
 8005436:	81bb      	strh	r3, [r7, #12]
 8005438:	4613      	mov	r3, r2
 800543a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005440:	8a7b      	ldrh	r3, [r7, #18]
 8005442:	3303      	adds	r3, #3
 8005444:	f023 0203 	bic.w	r2, r3, #3
 8005448:	89bb      	ldrh	r3, [r7, #12]
 800544a:	441a      	add	r2, r3
 800544c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800544e:	429a      	cmp	r2, r3
 8005450:	d901      	bls.n	8005456 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	e018      	b.n	8005488 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800545c:	8a7b      	ldrh	r3, [r7, #18]
 800545e:	3303      	adds	r3, #3
 8005460:	f023 0303 	bic.w	r3, r3, #3
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	4413      	add	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e001      	b.n	8005470 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	89b9      	ldrh	r1, [r7, #12]
 8005474:	89ba      	ldrh	r2, [r7, #12]
 8005476:	2302      	movs	r3, #2
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	460b      	mov	r3, r1
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	f7ff fe7d 	bl	8005180 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005486:	687b      	ldr	r3, [r7, #4]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <pbuf_realloc+0x20>
 80054a2:	4b3a      	ldr	r3, [pc, #232]	@ (800558c <pbuf_realloc+0xfc>)
 80054a4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80054a8:	4939      	ldr	r1, [pc, #228]	@ (8005590 <pbuf_realloc+0x100>)
 80054aa:	483a      	ldr	r0, [pc, #232]	@ (8005594 <pbuf_realloc+0x104>)
 80054ac:	f009 fadc 	bl	800ea68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	891b      	ldrh	r3, [r3, #8]
 80054b4:	887a      	ldrh	r2, [r7, #2]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d263      	bcs.n	8005582 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	891a      	ldrh	r2, [r3, #8]
 80054be:	887b      	ldrh	r3, [r7, #2]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	817b      	strh	r3, [r7, #10]
  q = p;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80054cc:	e018      	b.n	8005500 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	895b      	ldrh	r3, [r3, #10]
 80054d2:	897a      	ldrh	r2, [r7, #10]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	891a      	ldrh	r2, [r3, #8]
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <pbuf_realloc+0x70>
 80054f2:	4b26      	ldr	r3, [pc, #152]	@ (800558c <pbuf_realloc+0xfc>)
 80054f4:	f240 12af 	movw	r2, #431	@ 0x1af
 80054f8:	4927      	ldr	r1, [pc, #156]	@ (8005598 <pbuf_realloc+0x108>)
 80054fa:	4826      	ldr	r0, [pc, #152]	@ (8005594 <pbuf_realloc+0x104>)
 80054fc:	f009 fab4 	bl	800ea68 <iprintf>
  while (rem_len > q->len) {
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	895b      	ldrh	r3, [r3, #10]
 8005504:	897a      	ldrh	r2, [r7, #10]
 8005506:	429a      	cmp	r2, r3
 8005508:	d8e1      	bhi.n	80054ce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	7b1b      	ldrb	r3, [r3, #12]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	2b00      	cmp	r3, #0
 8005514:	d121      	bne.n	800555a <pbuf_realloc+0xca>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	895b      	ldrh	r3, [r3, #10]
 800551a:	897a      	ldrh	r2, [r7, #10]
 800551c:	429a      	cmp	r2, r3
 800551e:	d01c      	beq.n	800555a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	7b5b      	ldrb	r3, [r3, #13]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	b29a      	uxth	r2, r3
 8005536:	897b      	ldrh	r3, [r7, #10]
 8005538:	4413      	add	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	4619      	mov	r1, r3
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7fe ffb6 	bl	80044b0 <mem_trim>
 8005544:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <pbuf_realloc+0xca>
 800554c:	4b0f      	ldr	r3, [pc, #60]	@ (800558c <pbuf_realloc+0xfc>)
 800554e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005552:	4912      	ldr	r1, [pc, #72]	@ (800559c <pbuf_realloc+0x10c>)
 8005554:	480f      	ldr	r0, [pc, #60]	@ (8005594 <pbuf_realloc+0x104>)
 8005556:	f009 fa87 	bl	800ea68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	897a      	ldrh	r2, [r7, #10]
 800555e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	895a      	ldrh	r2, [r3, #10]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f911 	bl	800579c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e000      	b.n	8005584 <pbuf_realloc+0xf4>
    return;
 8005582:	bf00      	nop

}
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	0800fe68 	.word	0x0800fe68
 8005590:	0800ff80 	.word	0x0800ff80
 8005594:	0800fec8 	.word	0x0800fec8
 8005598:	0800ff98 	.word	0x0800ff98
 800559c:	0800ffb0 	.word	0x0800ffb0

080055a0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <pbuf_add_header_impl+0x22>
 80055b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005664 <pbuf_add_header_impl+0xc4>)
 80055b6:	f240 12df 	movw	r2, #479	@ 0x1df
 80055ba:	492b      	ldr	r1, [pc, #172]	@ (8005668 <pbuf_add_header_impl+0xc8>)
 80055bc:	482b      	ldr	r0, [pc, #172]	@ (800566c <pbuf_add_header_impl+0xcc>)
 80055be:	f009 fa53 	bl	800ea68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <pbuf_add_header_impl+0x30>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ce:	d301      	bcc.n	80055d4 <pbuf_add_header_impl+0x34>
    return 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e043      	b.n	800565c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <pbuf_add_header_impl+0x3e>
    return 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	e03e      	b.n	800565c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	891a      	ldrh	r2, [r3, #8]
 80055e6:	8a7b      	ldrh	r3, [r7, #18]
 80055e8:	4413      	add	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	8a7a      	ldrh	r2, [r7, #18]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d901      	bls.n	80055f6 <pbuf_add_header_impl+0x56>
    return 1;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e032      	b.n	800565c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	7b1b      	ldrb	r3, [r3, #12]
 80055fa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80055fc:	8a3b      	ldrh	r3, [r7, #16]
 80055fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	425b      	negs	r3, r3
 800560e:	4413      	add	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3310      	adds	r3, #16
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	429a      	cmp	r2, r3
 800561a:	d20d      	bcs.n	8005638 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800561c:	2301      	movs	r3, #1
 800561e:	e01d      	b.n	800565c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d006      	beq.n	8005634 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	425b      	negs	r3, r3
 800562e:	4413      	add	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e001      	b.n	8005638 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005634:	2301      	movs	r3, #1
 8005636:	e011      	b.n	800565c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	895a      	ldrh	r2, [r3, #10]
 8005642:	8a7b      	ldrh	r3, [r7, #18]
 8005644:	4413      	add	r3, r2
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	891a      	ldrh	r2, [r3, #8]
 8005650:	8a7b      	ldrh	r3, [r7, #18]
 8005652:	4413      	add	r3, r2
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	811a      	strh	r2, [r3, #8]


  return 0;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	0800fe68 	.word	0x0800fe68
 8005668:	0800ffcc 	.word	0x0800ffcc
 800566c:	0800fec8 	.word	0x0800fec8

08005670 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800567a:	2200      	movs	r2, #0
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff8e 	bl	80055a0 <pbuf_add_header_impl>
 8005684:	4603      	mov	r3, r0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <pbuf_remove_header+0x1e>
 80056a0:	4b20      	ldr	r3, [pc, #128]	@ (8005724 <pbuf_remove_header+0x94>)
 80056a2:	f240 224b 	movw	r2, #587	@ 0x24b
 80056a6:	4920      	ldr	r1, [pc, #128]	@ (8005728 <pbuf_remove_header+0x98>)
 80056a8:	4820      	ldr	r0, [pc, #128]	@ (800572c <pbuf_remove_header+0x9c>)
 80056aa:	f009 f9dd 	bl	800ea68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <pbuf_remove_header+0x2c>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ba:	d301      	bcc.n	80056c0 <pbuf_remove_header+0x30>
    return 1;
 80056bc:	2301      	movs	r3, #1
 80056be:	e02c      	b.n	800571a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <pbuf_remove_header+0x3a>
    return 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e027      	b.n	800571a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	895b      	ldrh	r3, [r3, #10]
 80056d2:	89fa      	ldrh	r2, [r7, #14]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d908      	bls.n	80056ea <pbuf_remove_header+0x5a>
 80056d8:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <pbuf_remove_header+0x94>)
 80056da:	f240 2255 	movw	r2, #597	@ 0x255
 80056de:	4914      	ldr	r1, [pc, #80]	@ (8005730 <pbuf_remove_header+0xa0>)
 80056e0:	4812      	ldr	r0, [pc, #72]	@ (800572c <pbuf_remove_header+0x9c>)
 80056e2:	f009 f9c1 	bl	800ea68 <iprintf>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e017      	b.n	800571a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	441a      	add	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	895a      	ldrh	r2, [r3, #10]
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	891a      	ldrh	r2, [r3, #8]
 800570e:	89fb      	ldrh	r3, [r7, #14]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	b29a      	uxth	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	0800fe68 	.word	0x0800fe68
 8005728:	0800ffcc 	.word	0x0800ffcc
 800572c:	0800fec8 	.word	0x0800fec8
 8005730:	0800ffd8 	.word	0x0800ffd8

08005734 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
 8005740:	4613      	mov	r3, r2
 8005742:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005744:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005748:	2b00      	cmp	r3, #0
 800574a:	da08      	bge.n	800575e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800574c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005750:	425b      	negs	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ff9b 	bl	8005690 <pbuf_remove_header>
 800575a:	4603      	mov	r3, r0
 800575c:	e007      	b.n	800576e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800575e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005762:	787a      	ldrb	r2, [r7, #1]
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ff1a 	bl	80055a0 <pbuf_add_header_impl>
 800576c:	4603      	mov	r3, r0
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005782:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005786:	2201      	movs	r2, #1
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ffd2 	bl	8005734 <pbuf_header_impl>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <pbuf_free+0x22>
 80057b0:	4b38      	ldr	r3, [pc, #224]	@ (8005894 <pbuf_free+0xf8>)
 80057b2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80057b6:	4938      	ldr	r1, [pc, #224]	@ (8005898 <pbuf_free+0xfc>)
 80057b8:	4838      	ldr	r0, [pc, #224]	@ (800589c <pbuf_free+0x100>)
 80057ba:	f009 f955 	bl	800ea68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	e063      	b.n	800588a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80057c6:	e05c      	b.n	8005882 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7b9b      	ldrb	r3, [r3, #14]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <pbuf_free+0x42>
 80057d0:	4b30      	ldr	r3, [pc, #192]	@ (8005894 <pbuf_free+0xf8>)
 80057d2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80057d6:	4932      	ldr	r1, [pc, #200]	@ (80058a0 <pbuf_free+0x104>)
 80057d8:	4830      	ldr	r0, [pc, #192]	@ (800589c <pbuf_free+0x100>)
 80057da:	f009 f945 	bl	800ea68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7b9b      	ldrb	r3, [r3, #14]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	739a      	strb	r2, [r3, #14]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7b9b      	ldrb	r3, [r3, #14]
 80057ee:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80057f0:	7dbb      	ldrb	r3, [r7, #22]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d143      	bne.n	800587e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7b1b      	ldrb	r3, [r3, #12]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7b5b      	ldrb	r3, [r3, #13]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d011      	beq.n	8005836 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <pbuf_free+0x90>
 800581e:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <pbuf_free+0xf8>)
 8005820:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005824:	491f      	ldr	r1, [pc, #124]	@ (80058a4 <pbuf_free+0x108>)
 8005826:	481d      	ldr	r0, [pc, #116]	@ (800589c <pbuf_free+0x100>)
 8005828:	f009 f91e 	bl	800ea68 <iprintf>
        pc->custom_free_function(p);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	4798      	blx	r3
 8005834:	e01d      	b.n	8005872 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d104      	bne.n	8005846 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	2009      	movs	r0, #9
 8005840:	f7ff f932 	bl	8004aa8 <memp_free>
 8005844:	e015      	b.n	8005872 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d104      	bne.n	8005856 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	2008      	movs	r0, #8
 8005850:	f7ff f92a 	bl	8004aa8 <memp_free>
 8005854:	e00d      	b.n	8005872 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <pbuf_free+0xc8>
          mem_free(p);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fe fdbd 	bl	80043dc <mem_free>
 8005862:	e006      	b.n	8005872 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005864:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <pbuf_free+0xf8>)
 8005866:	f240 320f 	movw	r2, #783	@ 0x30f
 800586a:	490f      	ldr	r1, [pc, #60]	@ (80058a8 <pbuf_free+0x10c>)
 800586c:	480b      	ldr	r0, [pc, #44]	@ (800589c <pbuf_free+0x100>)
 800586e:	f009 f8fb 	bl	800ea68 <iprintf>
        }
      }
      count++;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	3301      	adds	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	e001      	b.n	8005882 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d19f      	bne.n	80057c8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	0800fe68 	.word	0x0800fe68
 8005898:	0800ffcc 	.word	0x0800ffcc
 800589c:	0800fec8 	.word	0x0800fec8
 80058a0:	0800fff8 	.word	0x0800fff8
 80058a4:	08010010 	.word	0x08010010
 80058a8:	08010034 	.word	0x08010034

080058ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80058b8:	e005      	b.n	80058c6 <pbuf_clen+0x1a>
    ++len;
 80058ba:	89fb      	ldrh	r3, [r7, #14]
 80058bc:	3301      	adds	r3, #1
 80058be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f6      	bne.n	80058ba <pbuf_clen+0xe>
  }
  return len;
 80058cc:	89fb      	ldrh	r3, [r7, #14]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d010      	beq.n	800590c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7b9b      	ldrb	r3, [r3, #14]
 80058ee:	3301      	adds	r3, #1
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7b9b      	ldrb	r3, [r3, #14]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <pbuf_ref+0x30>
 80058fe:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <pbuf_ref+0x38>)
 8005900:	f240 3242 	movw	r2, #834	@ 0x342
 8005904:	4904      	ldr	r1, [pc, #16]	@ (8005918 <pbuf_ref+0x3c>)
 8005906:	4805      	ldr	r0, [pc, #20]	@ (800591c <pbuf_ref+0x40>)
 8005908:	f009 f8ae 	bl	800ea68 <iprintf>
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	0800fe68 	.word	0x0800fe68
 8005918:	08010048 	.word	0x08010048
 800591c:	0800fec8 	.word	0x0800fec8

08005920 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <pbuf_cat+0x16>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <pbuf_cat+0x26>
 8005936:	4b20      	ldr	r3, [pc, #128]	@ (80059b8 <pbuf_cat+0x98>)
 8005938:	f240 3259 	movw	r2, #857	@ 0x359
 800593c:	491f      	ldr	r1, [pc, #124]	@ (80059bc <pbuf_cat+0x9c>)
 800593e:	4820      	ldr	r0, [pc, #128]	@ (80059c0 <pbuf_cat+0xa0>)
 8005940:	f009 f892 	bl	800ea68 <iprintf>
 8005944:	e034      	b.n	80059b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e00a      	b.n	8005962 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	891a      	ldrh	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	891b      	ldrh	r3, [r3, #8]
 8005954:	4413      	add	r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	891a      	ldrh	r2, [r3, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	895b      	ldrh	r3, [r3, #10]
 8005972:	429a      	cmp	r2, r3
 8005974:	d006      	beq.n	8005984 <pbuf_cat+0x64>
 8005976:	4b10      	ldr	r3, [pc, #64]	@ (80059b8 <pbuf_cat+0x98>)
 8005978:	f240 3262 	movw	r2, #866	@ 0x362
 800597c:	4911      	ldr	r1, [pc, #68]	@ (80059c4 <pbuf_cat+0xa4>)
 800597e:	4810      	ldr	r0, [pc, #64]	@ (80059c0 <pbuf_cat+0xa0>)
 8005980:	f009 f872 	bl	800ea68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <pbuf_cat+0x7a>
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <pbuf_cat+0x98>)
 800598e:	f240 3263 	movw	r2, #867	@ 0x363
 8005992:	490d      	ldr	r1, [pc, #52]	@ (80059c8 <pbuf_cat+0xa8>)
 8005994:	480a      	ldr	r0, [pc, #40]	@ (80059c0 <pbuf_cat+0xa0>)
 8005996:	f009 f867 	bl	800ea68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	891a      	ldrh	r2, [r3, #8]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	891b      	ldrh	r3, [r3, #8]
 80059a2:	4413      	add	r3, r2
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	0800fe68 	.word	0x0800fe68
 80059bc:	0801005c 	.word	0x0801005c
 80059c0:	0800fec8 	.word	0x0800fec8
 80059c4:	08010094 	.word	0x08010094
 80059c8:	080100c4 	.word	0x080100c4

080059cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <pbuf_copy+0x2a>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <pbuf_copy+0x2a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	891a      	ldrh	r2, [r3, #8]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	891b      	ldrh	r3, [r3, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d209      	bcs.n	8005a0a <pbuf_copy+0x3e>
 80059f6:	4b57      	ldr	r3, [pc, #348]	@ (8005b54 <pbuf_copy+0x188>)
 80059f8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80059fc:	4956      	ldr	r1, [pc, #344]	@ (8005b58 <pbuf_copy+0x18c>)
 80059fe:	4857      	ldr	r0, [pc, #348]	@ (8005b5c <pbuf_copy+0x190>)
 8005a00:	f009 f832 	bl	800ea68 <iprintf>
 8005a04:	f06f 030f 	mvn.w	r3, #15
 8005a08:	e09f      	b.n	8005b4a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	895b      	ldrh	r3, [r3, #10]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad2      	subs	r2, r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	895b      	ldrh	r3, [r3, #10]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1acb      	subs	r3, r1, r3
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d306      	bcc.n	8005a30 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	895b      	ldrh	r3, [r3, #10]
 8005a26:	461a      	mov	r2, r3
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e005      	b.n	8005a3c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	895b      	ldrh	r3, [r3, #10]
 8005a34:	461a      	mov	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	18d0      	adds	r0, r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f009 f8e5 	bl	800ec1e <memcpy>
    offset_to += len;
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	895b      	ldrh	r3, [r3, #10]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d906      	bls.n	8005a7e <pbuf_copy+0xb2>
 8005a70:	4b38      	ldr	r3, [pc, #224]	@ (8005b54 <pbuf_copy+0x188>)
 8005a72:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005a76:	493a      	ldr	r1, [pc, #232]	@ (8005b60 <pbuf_copy+0x194>)
 8005a78:	4838      	ldr	r0, [pc, #224]	@ (8005b5c <pbuf_copy+0x190>)
 8005a7a:	f008 fff5 	bl	800ea68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	895b      	ldrh	r3, [r3, #10]
 8005a82:	461a      	mov	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d906      	bls.n	8005a98 <pbuf_copy+0xcc>
 8005a8a:	4b32      	ldr	r3, [pc, #200]	@ (8005b54 <pbuf_copy+0x188>)
 8005a8c:	f240 32da 	movw	r2, #986	@ 0x3da
 8005a90:	4934      	ldr	r1, [pc, #208]	@ (8005b64 <pbuf_copy+0x198>)
 8005a92:	4832      	ldr	r0, [pc, #200]	@ (8005b5c <pbuf_copy+0x190>)
 8005a94:	f008 ffe8 	bl	800ea68 <iprintf>
    if (offset_from >= p_from->len) {
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	895b      	ldrh	r3, [r3, #10]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d304      	bcc.n	8005aae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	895b      	ldrh	r3, [r3, #10]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d114      	bne.n	8005ae4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <pbuf_copy+0x118>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <pbuf_copy+0x118>
 8005ad0:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <pbuf_copy+0x188>)
 8005ad2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8005ad6:	4924      	ldr	r1, [pc, #144]	@ (8005b68 <pbuf_copy+0x19c>)
 8005ad8:	4820      	ldr	r0, [pc, #128]	@ (8005b5c <pbuf_copy+0x190>)
 8005ada:	f008 ffc5 	bl	800ea68 <iprintf>
 8005ade:	f06f 030f 	mvn.w	r3, #15
 8005ae2:	e032      	b.n	8005b4a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <pbuf_copy+0x146>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	895a      	ldrh	r2, [r3, #10]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	891b      	ldrh	r3, [r3, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d10d      	bne.n	8005b12 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <pbuf_copy+0x146>
 8005afe:	4b15      	ldr	r3, [pc, #84]	@ (8005b54 <pbuf_copy+0x188>)
 8005b00:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005b04:	4919      	ldr	r1, [pc, #100]	@ (8005b6c <pbuf_copy+0x1a0>)
 8005b06:	4815      	ldr	r0, [pc, #84]	@ (8005b5c <pbuf_copy+0x190>)
 8005b08:	f008 ffae 	bl	800ea68 <iprintf>
 8005b0c:	f06f 0305 	mvn.w	r3, #5
 8005b10:	e01b      	b.n	8005b4a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <pbuf_copy+0x174>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	895a      	ldrh	r2, [r3, #10]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	891b      	ldrh	r3, [r3, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d10d      	bne.n	8005b40 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <pbuf_copy+0x174>
 8005b2c:	4b09      	ldr	r3, [pc, #36]	@ (8005b54 <pbuf_copy+0x188>)
 8005b2e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005b32:	490e      	ldr	r1, [pc, #56]	@ (8005b6c <pbuf_copy+0x1a0>)
 8005b34:	4809      	ldr	r0, [pc, #36]	@ (8005b5c <pbuf_copy+0x190>)
 8005b36:	f008 ff97 	bl	800ea68 <iprintf>
 8005b3a:	f06f 0305 	mvn.w	r3, #5
 8005b3e:	e004      	b.n	8005b4a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f47f af61 	bne.w	8005a0a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	0800fe68 	.word	0x0800fe68
 8005b58:	08010110 	.word	0x08010110
 8005b5c:	0800fec8 	.word	0x0800fec8
 8005b60:	08010140 	.word	0x08010140
 8005b64:	08010158 	.word	0x08010158
 8005b68:	08010174 	.word	0x08010174
 8005b6c:	08010184 	.word	0x08010184

08005b70 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	460b      	mov	r3, r1
 8005b80:	80fb      	strh	r3, [r7, #6]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d108      	bne.n	8005ba6 <pbuf_copy_partial+0x36>
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <pbuf_copy_partial+0xd4>)
 8005b96:	f240 420a 	movw	r2, #1034	@ 0x40a
 8005b9a:	492b      	ldr	r1, [pc, #172]	@ (8005c48 <pbuf_copy_partial+0xd8>)
 8005b9c:	482b      	ldr	r0, [pc, #172]	@ (8005c4c <pbuf_copy_partial+0xdc>)
 8005b9e:	f008 ff63 	bl	800ea68 <iprintf>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e04a      	b.n	8005c3c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d108      	bne.n	8005bbe <pbuf_copy_partial+0x4e>
 8005bac:	4b25      	ldr	r3, [pc, #148]	@ (8005c44 <pbuf_copy_partial+0xd4>)
 8005bae:	f240 420b 	movw	r2, #1035	@ 0x40b
 8005bb2:	4927      	ldr	r1, [pc, #156]	@ (8005c50 <pbuf_copy_partial+0xe0>)
 8005bb4:	4825      	ldr	r0, [pc, #148]	@ (8005c4c <pbuf_copy_partial+0xdc>)
 8005bb6:	f008 ff57 	bl	800ea68 <iprintf>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e03e      	b.n	8005c3c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e034      	b.n	8005c2e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005bc4:	88bb      	ldrh	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <pbuf_copy_partial+0x70>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	895b      	ldrh	r3, [r3, #10]
 8005bce:	88ba      	ldrh	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d305      	bcc.n	8005be0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	895b      	ldrh	r3, [r3, #10]
 8005bd8:	88ba      	ldrh	r2, [r7, #4]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	80bb      	strh	r3, [r7, #4]
 8005bde:	e023      	b.n	8005c28 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	895a      	ldrh	r2, [r3, #10]
 8005be4:	88bb      	ldrh	r3, [r7, #4]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005bea:	8b3a      	ldrh	r2, [r7, #24]
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d901      	bls.n	8005bf6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005bf6:	8b7b      	ldrh	r3, [r7, #26]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	18d0      	adds	r0, r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	88bb      	ldrh	r3, [r7, #4]
 8005c02:	4413      	add	r3, r2
 8005c04:	8b3a      	ldrh	r2, [r7, #24]
 8005c06:	4619      	mov	r1, r3
 8005c08:	f009 f809 	bl	800ec1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005c0c:	8afa      	ldrh	r2, [r7, #22]
 8005c0e:	8b3b      	ldrh	r3, [r7, #24]
 8005c10:	4413      	add	r3, r2
 8005c12:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005c14:	8b7a      	ldrh	r2, [r7, #26]
 8005c16:	8b3b      	ldrh	r3, [r7, #24]
 8005c18:	4413      	add	r3, r2
 8005c1a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	8b3b      	ldrh	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <pbuf_copy_partial+0xca>
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1c4      	bne.n	8005bc4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005c3a:	8afb      	ldrh	r3, [r7, #22]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	0800fe68 	.word	0x0800fe68
 8005c48:	080101b0 	.word	0x080101b0
 8005c4c:	0800fec8 	.word	0x0800fec8
 8005c50:	080101d0 	.word	0x080101d0

08005c54 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	603a      	str	r2, [r7, #0]
 8005c5e:	71fb      	strb	r3, [r7, #7]
 8005c60:	460b      	mov	r3, r1
 8005c62:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	8919      	ldrh	r1, [r3, #8]
 8005c68:	88ba      	ldrh	r2, [r7, #4]
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fab1 	bl	80051d4 <pbuf_alloc>
 8005c72:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <pbuf_clone+0x2a>
    return NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e011      	b.n	8005ca2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff fea3 	bl	80059cc <pbuf_copy>
 8005c86:	4603      	mov	r3, r0
 8005c88:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005c8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <pbuf_clone+0x4c>
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <pbuf_clone+0x58>)
 8005c94:	f240 5224 	movw	r2, #1316	@ 0x524
 8005c98:	4905      	ldr	r1, [pc, #20]	@ (8005cb0 <pbuf_clone+0x5c>)
 8005c9a:	4806      	ldr	r0, [pc, #24]	@ (8005cb4 <pbuf_clone+0x60>)
 8005c9c:	f008 fee4 	bl	800ea68 <iprintf>
  return q;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	0800fe68 	.word	0x0800fe68
 8005cb0:	080102dc 	.word	0x080102dc
 8005cb4:	0800fec8 	.word	0x0800fec8

08005cb8 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	7a1b      	ldrb	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7a1a      	ldrb	r2, [r3, #8]
 8005cd0:	4b15      	ldr	r3, [pc, #84]	@ (8005d28 <raw_input_local_match+0x70>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d001      	beq.n	8005ce4 <raw_input_local_match+0x2c>
    return 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e01b      	b.n	8005d1c <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <raw_input_local_match+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d110      	bne.n	8005d1a <raw_input_local_match+0x62>
          return 1;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e00f      	b.n	8005d1c <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <raw_input_local_match+0x5e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <raw_input_local_match+0x70>)
 8005d10:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d101      	bne.n	8005d1a <raw_input_local_match+0x62>
        return 1;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <raw_input_local_match+0x64>
      }
  }

  return 0;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20004d18 	.word	0x20004d18

08005d2c <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b089      	sub	sp, #36	@ 0x24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8005d3a:	4b37      	ldr	r3, [pc, #220]	@ (8005e18 <raw_input+0xec>)
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4a36      	ldr	r2, [pc, #216]	@ (8005e18 <raw_input+0xec>)
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	4611      	mov	r1, r2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f007 fe39 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	7a5b      	ldrb	r3, [r3, #9]
 8005d54:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8005d5a:	4b30      	ldr	r3, [pc, #192]	@ (8005e1c <raw_input+0xf0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8005d60:	e052      	b.n	8005e08 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	7c1b      	ldrb	r3, [r3, #16]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d146      	bne.n	8005dfe <raw_input+0xd2>
 8005d70:	7dbb      	ldrb	r3, [r7, #22]
 8005d72:	4619      	mov	r1, r3
 8005d74:	69f8      	ldr	r0, [r7, #28]
 8005d76:	f7ff ff9f 	bl	8005cb8 <raw_input_local_match>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d03e      	beq.n	8005dfe <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	7c5b      	ldrb	r3, [r3, #17]
 8005d84:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b21      	ldr	r3, [pc, #132]	@ (8005e18 <raw_input+0xec>)
 8005d92:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d132      	bne.n	8005dfe <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02e      	beq.n	8005dfe <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8005da6:	2302      	movs	r3, #2
 8005da8:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	695c      	ldr	r4, [r3, #20]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	6998      	ldr	r0, [r3, #24]
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <raw_input+0xf4>)
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	69f9      	ldr	r1, [r7, #28]
 8005db8:	47a0      	blx	r4
 8005dba:	4603      	mov	r3, r0
 8005dbc:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d011      	beq.n	8005de8 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8005dd6:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <raw_input+0xf0>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 8005dde:	4a0f      	ldr	r2, [pc, #60]	@ (8005e1c <raw_input+0xf0>)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e013      	b.n	8005e10 <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d005      	beq.n	8005dfe <raw_input+0xd2>
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <raw_input+0xf8>)
 8005df4:	22c0      	movs	r2, #192	@ 0xc0
 8005df6:	490c      	ldr	r1, [pc, #48]	@ (8005e28 <raw_input+0xfc>)
 8005df8:	480c      	ldr	r0, [pc, #48]	@ (8005e2c <raw_input+0x100>)
 8005dfa:	f008 fe35 	bl	800ea68 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1a9      	bne.n	8005d62 <raw_input+0x36>
  }
  return ret;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3724      	adds	r7, #36	@ 0x24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}
 8005e18:	20004d18 	.word	0x20004d18
 8005e1c:	20008300 	.word	0x20008300
 8005e20:	20004d28 	.word	0x20004d28
 8005e24:	080102f0 	.word	0x080102f0
 8005e28:	08010320 	.word	0x08010320
 8005e2c:	0801036c 	.word	0x0801036c

08005e30 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <raw_netif_ip_addr_changed+0x4e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01a      	beq.n	8005e7e <raw_netif_ip_addr_changed+0x4e>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d017      	beq.n	8005e7e <raw_netif_ip_addr_changed+0x4e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d013      	beq.n	8005e7e <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8005e56:	4b0d      	ldr	r3, [pc, #52]	@ (8005e8c <raw_netif_ip_addr_changed+0x5c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e00c      	b.n	8005e78 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d103      	bne.n	8005e72 <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1ef      	bne.n	8005e5e <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20008300 	.word	0x20008300

08005e90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005e94:	f008 fce8 	bl	800e868 <rand>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b01      	ldr	r3, [pc, #4]	@ (8005eb0 <tcp_init+0x20>)
 8005eaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005eac:	bf00      	nop
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000020 	.word	0x20000020

08005eb4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	7d1b      	ldrb	r3, [r3, #20]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d105      	bne.n	8005ed0 <tcp_free+0x1c>
 8005ec4:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <tcp_free+0x2c>)
 8005ec6:	22d4      	movs	r2, #212	@ 0xd4
 8005ec8:	4906      	ldr	r1, [pc, #24]	@ (8005ee4 <tcp_free+0x30>)
 8005eca:	4807      	ldr	r0, [pc, #28]	@ (8005ee8 <tcp_free+0x34>)
 8005ecc:	f008 fdcc 	bl	800ea68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	2002      	movs	r0, #2
 8005ed4:	f7fe fde8 	bl	8004aa8 <memp_free>
}
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	08010434 	.word	0x08010434
 8005ee4:	08010464 	.word	0x08010464
 8005ee8:	08010478 	.word	0x08010478

08005eec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	7d1b      	ldrb	r3, [r3, #20]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d105      	bne.n	8005f08 <tcp_free_listen+0x1c>
 8005efc:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <tcp_free_listen+0x2c>)
 8005efe:	22df      	movs	r2, #223	@ 0xdf
 8005f00:	4906      	ldr	r1, [pc, #24]	@ (8005f1c <tcp_free_listen+0x30>)
 8005f02:	4807      	ldr	r0, [pc, #28]	@ (8005f20 <tcp_free_listen+0x34>)
 8005f04:	f008 fdb0 	bl	800ea68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	2003      	movs	r0, #3
 8005f0c:	f7fe fdcc 	bl	8004aa8 <memp_free>
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	08010434 	.word	0x08010434
 8005f1c:	080104a0 	.word	0x080104a0
 8005f20:	08010478 	.word	0x08010478

08005f24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005f28:	f001 f802 	bl	8006f30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <tcp_tmr+0x28>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	4b05      	ldr	r3, [pc, #20]	@ (8005f4c <tcp_tmr+0x28>)
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	4b04      	ldr	r3, [pc, #16]	@ (8005f4c <tcp_tmr+0x28>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005f44:	f000 fcb2 	bl	80068ac <tcp_slowtmr>
  }
}
 8005f48:	bf00      	nop
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20008319 	.word	0x20008319

08005f50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <tcp_remove_listener+0x1c>
 8005f60:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <tcp_remove_listener+0x48>)
 8005f62:	22ff      	movs	r2, #255	@ 0xff
 8005f64:	490d      	ldr	r1, [pc, #52]	@ (8005f9c <tcp_remove_listener+0x4c>)
 8005f66:	480e      	ldr	r0, [pc, #56]	@ (8005fa0 <tcp_remove_listener+0x50>)
 8005f68:	f008 fd7e 	bl	800ea68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e00a      	b.n	8005f88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d102      	bne.n	8005f82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f1      	bne.n	8005f72 <tcp_remove_listener+0x22>
    }
  }
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08010434 	.word	0x08010434
 8005f9c:	080104bc 	.word	0x080104bc
 8005fa0:	08010478 	.word	0x08010478

08005fa4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <tcp_listen_closed+0x1c>
 8005fb2:	4b14      	ldr	r3, [pc, #80]	@ (8006004 <tcp_listen_closed+0x60>)
 8005fb4:	f240 1211 	movw	r2, #273	@ 0x111
 8005fb8:	4913      	ldr	r1, [pc, #76]	@ (8006008 <tcp_listen_closed+0x64>)
 8005fba:	4814      	ldr	r0, [pc, #80]	@ (800600c <tcp_listen_closed+0x68>)
 8005fbc:	f008 fd54 	bl	800ea68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7d1b      	ldrb	r3, [r3, #20]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d006      	beq.n	8005fd6 <tcp_listen_closed+0x32>
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006004 <tcp_listen_closed+0x60>)
 8005fca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8005fce:	4910      	ldr	r1, [pc, #64]	@ (8006010 <tcp_listen_closed+0x6c>)
 8005fd0:	480e      	ldr	r0, [pc, #56]	@ (800600c <tcp_listen_closed+0x68>)
 8005fd2:	f008 fd49 	bl	800ea68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e00b      	b.n	8005ff4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006014 <tcp_listen_closed+0x70>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff ffb1 	bl	8005f50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d9f0      	bls.n	8005fdc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	08010434 	.word	0x08010434
 8006008:	080104e4 	.word	0x080104e4
 800600c:	08010478 	.word	0x08010478
 8006010:	080104f0 	.word	0x080104f0
 8006014:	08012424 	.word	0x08012424

08006018 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af04      	add	r7, sp, #16
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <tcp_close_shutdown+0x20>
 800602a:	4b63      	ldr	r3, [pc, #396]	@ (80061b8 <tcp_close_shutdown+0x1a0>)
 800602c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006030:	4962      	ldr	r1, [pc, #392]	@ (80061bc <tcp_close_shutdown+0x1a4>)
 8006032:	4863      	ldr	r0, [pc, #396]	@ (80061c0 <tcp_close_shutdown+0x1a8>)
 8006034:	f008 fd18 	bl	800ea68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d066      	beq.n	800610c <tcp_close_shutdown+0xf4>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7d1b      	ldrb	r3, [r3, #20]
 8006042:	2b04      	cmp	r3, #4
 8006044:	d003      	beq.n	800604e <tcp_close_shutdown+0x36>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	7d1b      	ldrb	r3, [r3, #20]
 800604a:	2b07      	cmp	r3, #7
 800604c:	d15e      	bne.n	800610c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <tcp_close_shutdown+0x48>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800605e:	d055      	beq.n	800610c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8b5b      	ldrh	r3, [r3, #26]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <tcp_close_shutdown+0x62>
 800606c:	4b52      	ldr	r3, [pc, #328]	@ (80061b8 <tcp_close_shutdown+0x1a0>)
 800606e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006072:	4954      	ldr	r1, [pc, #336]	@ (80061c4 <tcp_close_shutdown+0x1ac>)
 8006074:	4852      	ldr	r0, [pc, #328]	@ (80061c0 <tcp_close_shutdown+0x1a8>)
 8006076:	f008 fcf7 	bl	800ea68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006082:	687d      	ldr	r5, [r7, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	8ad2      	ldrh	r2, [r2, #22]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	8b09      	ldrh	r1, [r1, #24]
 8006090:	9102      	str	r1, [sp, #8]
 8006092:	9201      	str	r2, [sp, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	462b      	mov	r3, r5
 8006098:	4622      	mov	r2, r4
 800609a:	4601      	mov	r1, r0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f005 fc4b 	bl	800b938 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fa2e 	bl	8007504 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80060a8:	4b47      	ldr	r3, [pc, #284]	@ (80061c8 <tcp_close_shutdown+0x1b0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d105      	bne.n	80060be <tcp_close_shutdown+0xa6>
 80060b2:	4b45      	ldr	r3, [pc, #276]	@ (80061c8 <tcp_close_shutdown+0x1b0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a43      	ldr	r2, [pc, #268]	@ (80061c8 <tcp_close_shutdown+0x1b0>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e013      	b.n	80060e6 <tcp_close_shutdown+0xce>
 80060be:	4b42      	ldr	r3, [pc, #264]	@ (80061c8 <tcp_close_shutdown+0x1b0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e00c      	b.n	80060e0 <tcp_close_shutdown+0xc8>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d104      	bne.n	80060da <tcp_close_shutdown+0xc2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	60da      	str	r2, [r3, #12]
 80060d8:	e005      	b.n	80060e6 <tcp_close_shutdown+0xce>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ef      	bne.n	80060c6 <tcp_close_shutdown+0xae>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	4b37      	ldr	r3, [pc, #220]	@ (80061cc <tcp_close_shutdown+0x1b4>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80060f2:	4b37      	ldr	r3, [pc, #220]	@ (80061d0 <tcp_close_shutdown+0x1b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d102      	bne.n	8006102 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80060fc:	f003 fec2 	bl	8009e84 <tcp_trigger_input_pcb_close>
 8006100:	e002      	b.n	8006108 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fed6 	bl	8005eb4 <tcp_free>
      }
      return ERR_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e050      	b.n	80061ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7d1b      	ldrb	r3, [r3, #20]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d03b      	beq.n	800618c <tcp_close_shutdown+0x174>
 8006114:	2b02      	cmp	r3, #2
 8006116:	dc44      	bgt.n	80061a2 <tcp_close_shutdown+0x18a>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <tcp_close_shutdown+0x10a>
 800611c:	2b01      	cmp	r3, #1
 800611e:	d02a      	beq.n	8006176 <tcp_close_shutdown+0x15e>
 8006120:	e03f      	b.n	80061a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8adb      	ldrh	r3, [r3, #22]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d021      	beq.n	800616e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800612a:	4b2a      	ldr	r3, [pc, #168]	@ (80061d4 <tcp_close_shutdown+0x1bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d105      	bne.n	8006140 <tcp_close_shutdown+0x128>
 8006134:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <tcp_close_shutdown+0x1bc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	4a26      	ldr	r2, [pc, #152]	@ (80061d4 <tcp_close_shutdown+0x1bc>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	e013      	b.n	8006168 <tcp_close_shutdown+0x150>
 8006140:	4b24      	ldr	r3, [pc, #144]	@ (80061d4 <tcp_close_shutdown+0x1bc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	e00c      	b.n	8006162 <tcp_close_shutdown+0x14a>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d104      	bne.n	800615c <tcp_close_shutdown+0x144>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	e005      	b.n	8006168 <tcp_close_shutdown+0x150>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ef      	bne.n	8006148 <tcp_close_shutdown+0x130>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fea0 	bl	8005eb4 <tcp_free>
      break;
 8006174:	e01a      	b.n	80061ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ff14 	bl	8005fa4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4816      	ldr	r0, [pc, #88]	@ (80061d8 <tcp_close_shutdown+0x1c0>)
 8006180:	f001 fa10 	bl	80075a4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff feb1 	bl	8005eec <tcp_free_listen>
      break;
 800618a:	e00f      	b.n	80061ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	480e      	ldr	r0, [pc, #56]	@ (80061c8 <tcp_close_shutdown+0x1b0>)
 8006190:	f001 fa08 	bl	80075a4 <tcp_pcb_remove>
 8006194:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <tcp_close_shutdown+0x1b4>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fe8a 	bl	8005eb4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80061a0:	e004      	b.n	80061ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f81a 	bl	80061dc <tcp_close_shutdown_fin>
 80061a8:	4603      	mov	r3, r0
 80061aa:	e000      	b.n	80061ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bdb0      	pop	{r4, r5, r7, pc}
 80061b6:	bf00      	nop
 80061b8:	08010434 	.word	0x08010434
 80061bc:	08010508 	.word	0x08010508
 80061c0:	08010478 	.word	0x08010478
 80061c4:	08010528 	.word	0x08010528
 80061c8:	20008310 	.word	0x20008310
 80061cc:	20008318 	.word	0x20008318
 80061d0:	20008350 	.word	0x20008350
 80061d4:	20008308 	.word	0x20008308
 80061d8:	2000830c 	.word	0x2000830c

080061dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <tcp_close_shutdown_fin+0x1c>
 80061ea:	4b2e      	ldr	r3, [pc, #184]	@ (80062a4 <tcp_close_shutdown_fin+0xc8>)
 80061ec:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80061f0:	492d      	ldr	r1, [pc, #180]	@ (80062a8 <tcp_close_shutdown_fin+0xcc>)
 80061f2:	482e      	ldr	r0, [pc, #184]	@ (80062ac <tcp_close_shutdown_fin+0xd0>)
 80061f4:	f008 fc38 	bl	800ea68 <iprintf>

  switch (pcb->state) {
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7d1b      	ldrb	r3, [r3, #20]
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	d020      	beq.n	8006242 <tcp_close_shutdown_fin+0x66>
 8006200:	2b07      	cmp	r3, #7
 8006202:	dc2b      	bgt.n	800625c <tcp_close_shutdown_fin+0x80>
 8006204:	2b03      	cmp	r3, #3
 8006206:	d002      	beq.n	800620e <tcp_close_shutdown_fin+0x32>
 8006208:	2b04      	cmp	r3, #4
 800620a:	d00d      	beq.n	8006228 <tcp_close_shutdown_fin+0x4c>
 800620c:	e026      	b.n	800625c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f004 fca0 	bl	800ab54 <tcp_send_fin>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11f      	bne.n	8006260 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2205      	movs	r2, #5
 8006224:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006226:	e01b      	b.n	8006260 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f004 fc93 	bl	800ab54 <tcp_send_fin>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d114      	bne.n	8006264 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2205      	movs	r2, #5
 800623e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006240:	e010      	b.n	8006264 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f004 fc86 	bl	800ab54 <tcp_send_fin>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800624c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2209      	movs	r2, #9
 8006258:	751a      	strb	r2, [r3, #20]
      }
      break;
 800625a:	e005      	b.n	8006268 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e01c      	b.n	800629a <tcp_close_shutdown_fin+0xbe>
      break;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <tcp_close_shutdown_fin+0x8e>
      break;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <tcp_close_shutdown_fin+0x8e>
      break;
 8006268:	bf00      	nop
  }

  if (err == ERR_OK) {
 800626a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f004 fdac 	bl	800add0 <tcp_output>
 8006278:	e00d      	b.n	8006296 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800627a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d108      	bne.n	8006296 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8b5b      	ldrh	r3, [r3, #26]
 8006288:	f043 0308 	orr.w	r3, r3, #8
 800628c:	b29a      	uxth	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e001      	b.n	800629a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	08010434 	.word	0x08010434
 80062a8:	080104e4 	.word	0x080104e4
 80062ac:	08010478 	.word	0x08010478

080062b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <tcp_close+0x22>
 80062be:	4b0f      	ldr	r3, [pc, #60]	@ (80062fc <tcp_close+0x4c>)
 80062c0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80062c4:	490e      	ldr	r1, [pc, #56]	@ (8006300 <tcp_close+0x50>)
 80062c6:	480f      	ldr	r0, [pc, #60]	@ (8006304 <tcp_close+0x54>)
 80062c8:	f008 fbce 	bl	800ea68 <iprintf>
 80062cc:	f06f 030f 	mvn.w	r3, #15
 80062d0:	e00f      	b.n	80062f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7d1b      	ldrb	r3, [r3, #20]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d006      	beq.n	80062e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	8b5b      	ldrh	r3, [r3, #26]
 80062de:	f043 0310 	orr.w	r3, r3, #16
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80062e8:	2101      	movs	r1, #1
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fe94 	bl	8006018 <tcp_close_shutdown>
 80062f0:	4603      	mov	r3, r0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	08010434 	.word	0x08010434
 8006300:	08010544 	.word	0x08010544
 8006304:	08010478 	.word	0x08010478

08006308 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08e      	sub	sp, #56	@ 0x38
 800630c:	af04      	add	r7, sp, #16
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <tcp_abandon+0x20>
 8006318:	4b52      	ldr	r3, [pc, #328]	@ (8006464 <tcp_abandon+0x15c>)
 800631a:	f240 223d 	movw	r2, #573	@ 0x23d
 800631e:	4952      	ldr	r1, [pc, #328]	@ (8006468 <tcp_abandon+0x160>)
 8006320:	4852      	ldr	r0, [pc, #328]	@ (800646c <tcp_abandon+0x164>)
 8006322:	f008 fba1 	bl	800ea68 <iprintf>
 8006326:	e099      	b.n	800645c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	7d1b      	ldrb	r3, [r3, #20]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d106      	bne.n	800633e <tcp_abandon+0x36>
 8006330:	4b4c      	ldr	r3, [pc, #304]	@ (8006464 <tcp_abandon+0x15c>)
 8006332:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006336:	494e      	ldr	r1, [pc, #312]	@ (8006470 <tcp_abandon+0x168>)
 8006338:	484c      	ldr	r0, [pc, #304]	@ (800646c <tcp_abandon+0x164>)
 800633a:	f008 fb95 	bl	800ea68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7d1b      	ldrb	r3, [r3, #20]
 8006342:	2b0a      	cmp	r3, #10
 8006344:	d107      	bne.n	8006356 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	484a      	ldr	r0, [pc, #296]	@ (8006474 <tcp_abandon+0x16c>)
 800634a:	f001 f92b 	bl	80075a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fdb0 	bl	8005eb4 <tcp_free>
 8006354:	e082      	b.n	800645c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006362:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006370:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	7d1b      	ldrb	r3, [r3, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d126      	bne.n	80063ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8adb      	ldrh	r3, [r3, #22]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d02e      	beq.n	80063e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006388:	4b3b      	ldr	r3, [pc, #236]	@ (8006478 <tcp_abandon+0x170>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d105      	bne.n	800639e <tcp_abandon+0x96>
 8006392:	4b39      	ldr	r3, [pc, #228]	@ (8006478 <tcp_abandon+0x170>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4a37      	ldr	r2, [pc, #220]	@ (8006478 <tcp_abandon+0x170>)
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e013      	b.n	80063c6 <tcp_abandon+0xbe>
 800639e:	4b36      	ldr	r3, [pc, #216]	@ (8006478 <tcp_abandon+0x170>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e00c      	b.n	80063c0 <tcp_abandon+0xb8>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d104      	bne.n	80063ba <tcp_abandon+0xb2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	60da      	str	r2, [r3, #12]
 80063b8:	e005      	b.n	80063c6 <tcp_abandon+0xbe>
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1ef      	bne.n	80063a6 <tcp_abandon+0x9e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	e00b      	b.n	80063e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8adb      	ldrh	r3, [r3, #22]
 80063d6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4828      	ldr	r0, [pc, #160]	@ (800647c <tcp_abandon+0x174>)
 80063dc:	f001 f8e2 	bl	80075a4 <tcp_pcb_remove>
 80063e0:	4b27      	ldr	r3, [pc, #156]	@ (8006480 <tcp_abandon+0x178>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fe7c 	bl	80070f0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fe73 	bl	80070f0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fe6a 	bl	80070f0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	8b12      	ldrh	r2, [r2, #24]
 800642c:	9202      	str	r2, [sp, #8]
 800642e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006430:	9201      	str	r2, [sp, #4]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	460b      	mov	r3, r1
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	69b9      	ldr	r1, [r7, #24]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f005 fa7c 	bl	800b938 <tcp_rst>
    }
    last_state = pcb->state;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7d1b      	ldrb	r3, [r3, #20]
 8006444:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fd34 	bl	8005eb4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <tcp_abandon+0x154>
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f06f 010c 	mvn.w	r1, #12
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	4798      	blx	r3
  }
}
 800645c:	3728      	adds	r7, #40	@ 0x28
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	08010434 	.word	0x08010434
 8006468:	08010578 	.word	0x08010578
 800646c:	08010478 	.word	0x08010478
 8006470:	08010594 	.word	0x08010594
 8006474:	20008314 	.word	0x20008314
 8006478:	20008308 	.word	0x20008308
 800647c:	20008310 	.word	0x20008310
 8006480:	20008318 	.word	0x20008318

08006484 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800648c:	2101      	movs	r1, #1
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff ff3a 	bl	8006308 <tcp_abandon>
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <tcp_update_rcv_ann_wnd+0x1c>
 80064aa:	4b25      	ldr	r3, [pc, #148]	@ (8006540 <tcp_update_rcv_ann_wnd+0xa4>)
 80064ac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80064b0:	4924      	ldr	r1, [pc, #144]	@ (8006544 <tcp_update_rcv_ann_wnd+0xa8>)
 80064b2:	4825      	ldr	r0, [pc, #148]	@ (8006548 <tcp_update_rcv_ann_wnd+0xac>)
 80064b4:	f008 fad8 	bl	800ea68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80064c0:	4413      	add	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80064cc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80064d0:	bf28      	it	cs
 80064d2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80064d6:	b292      	uxth	r2, r2
 80064d8:	4413      	add	r3, r2
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	db08      	blt.n	80064f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	e020      	b.n	8006536 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	dd03      	ble.n	800650a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006508:	e014      	b.n	8006534 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d306      	bcc.n	800652c <tcp_update_rcv_ann_wnd+0x90>
 800651e:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <tcp_update_rcv_ann_wnd+0xa4>)
 8006520:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006524:	4909      	ldr	r1, [pc, #36]	@ (800654c <tcp_update_rcv_ann_wnd+0xb0>)
 8006526:	4808      	ldr	r0, [pc, #32]	@ (8006548 <tcp_update_rcv_ann_wnd+0xac>)
 8006528:	f008 fa9e 	bl	800ea68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006534:	2300      	movs	r3, #0
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	08010434 	.word	0x08010434
 8006544:	08010690 	.word	0x08010690
 8006548:	08010478 	.word	0x08010478
 800654c:	080106b4 	.word	0x080106b4

08006550 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d107      	bne.n	8006572 <tcp_recved+0x22>
 8006562:	4b1f      	ldr	r3, [pc, #124]	@ (80065e0 <tcp_recved+0x90>)
 8006564:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006568:	491e      	ldr	r1, [pc, #120]	@ (80065e4 <tcp_recved+0x94>)
 800656a:	481f      	ldr	r0, [pc, #124]	@ (80065e8 <tcp_recved+0x98>)
 800656c:	f008 fa7c 	bl	800ea68 <iprintf>
 8006570:	e032      	b.n	80065d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	7d1b      	ldrb	r3, [r3, #20]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d106      	bne.n	8006588 <tcp_recved+0x38>
 800657a:	4b19      	ldr	r3, [pc, #100]	@ (80065e0 <tcp_recved+0x90>)
 800657c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006580:	491a      	ldr	r1, [pc, #104]	@ (80065ec <tcp_recved+0x9c>)
 8006582:	4819      	ldr	r0, [pc, #100]	@ (80065e8 <tcp_recved+0x98>)
 8006584:	f008 fa70 	bl	800ea68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800658c:	887b      	ldrh	r3, [r7, #2]
 800658e:	4413      	add	r3, r2
 8006590:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006592:	89fb      	ldrh	r3, [r7, #14]
 8006594:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006598:	d804      	bhi.n	80065a4 <tcp_recved+0x54>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800659e:	89fa      	ldrh	r2, [r7, #14]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d204      	bcs.n	80065ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80065aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065ac:	e002      	b.n	80065b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	89fa      	ldrh	r2, [r7, #14]
 80065b2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff71 	bl	800649c <tcp_update_rcv_ann_wnd>
 80065ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80065c2:	d309      	bcc.n	80065d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8b5b      	ldrh	r3, [r3, #26]
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f004 fbfc 	bl	800add0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	08010434 	.word	0x08010434
 80065e4:	080106d0 	.word	0x080106d0
 80065e8:	08010478 	.word	0x08010478
 80065ec:	080106e8 	.word	0x080106e8

080065f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80065fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006674 <tcp_new_port+0x84>)
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	4b1c      	ldr	r3, [pc, #112]	@ (8006674 <tcp_new_port+0x84>)
 8006604:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006606:	4b1b      	ldr	r3, [pc, #108]	@ (8006674 <tcp_new_port+0x84>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800660e:	4293      	cmp	r3, r2
 8006610:	d103      	bne.n	800661a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006612:	4b18      	ldr	r3, [pc, #96]	@ (8006674 <tcp_new_port+0x84>)
 8006614:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8006618:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800661a:	2300      	movs	r3, #0
 800661c:	71fb      	strb	r3, [r7, #7]
 800661e:	e01e      	b.n	800665e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <tcp_new_port+0x88>)
 8006624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	e011      	b.n	8006652 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	8ada      	ldrh	r2, [r3, #22]
 8006632:	4b10      	ldr	r3, [pc, #64]	@ (8006674 <tcp_new_port+0x84>)
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d108      	bne.n	800664c <tcp_new_port+0x5c>
        n++;
 800663a:	88bb      	ldrh	r3, [r7, #4]
 800663c:	3301      	adds	r3, #1
 800663e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006640:	88bb      	ldrh	r3, [r7, #4]
 8006642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006646:	d3d8      	bcc.n	80065fa <tcp_new_port+0xa>
          return 0;
 8006648:	2300      	movs	r3, #0
 800664a:	e00d      	b.n	8006668 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ea      	bne.n	800662e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	3301      	adds	r3, #1
 800665c:	71fb      	strb	r3, [r7, #7]
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d9dd      	bls.n	8006620 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006664:	4b03      	ldr	r3, [pc, #12]	@ (8006674 <tcp_new_port+0x84>)
 8006666:	881b      	ldrh	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	20000020 	.word	0x20000020
 8006678:	08012424 	.word	0x08012424

0800667c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	@ 0x28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <tcp_connect+0x2e>
 8006696:	4b7d      	ldr	r3, [pc, #500]	@ (800688c <tcp_connect+0x210>)
 8006698:	f240 4235 	movw	r2, #1077	@ 0x435
 800669c:	497c      	ldr	r1, [pc, #496]	@ (8006890 <tcp_connect+0x214>)
 800669e:	487d      	ldr	r0, [pc, #500]	@ (8006894 <tcp_connect+0x218>)
 80066a0:	f008 f9e2 	bl	800ea68 <iprintf>
 80066a4:	f06f 030f 	mvn.w	r3, #15
 80066a8:	e0ec      	b.n	8006884 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <tcp_connect+0x48>
 80066b0:	4b76      	ldr	r3, [pc, #472]	@ (800688c <tcp_connect+0x210>)
 80066b2:	f240 4236 	movw	r2, #1078	@ 0x436
 80066b6:	4978      	ldr	r1, [pc, #480]	@ (8006898 <tcp_connect+0x21c>)
 80066b8:	4876      	ldr	r0, [pc, #472]	@ (8006894 <tcp_connect+0x218>)
 80066ba:	f008 f9d5 	bl	800ea68 <iprintf>
 80066be:	f06f 030f 	mvn.w	r3, #15
 80066c2:	e0df      	b.n	8006884 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	7d1b      	ldrb	r3, [r3, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <tcp_connect+0x64>
 80066cc:	4b6f      	ldr	r3, [pc, #444]	@ (800688c <tcp_connect+0x210>)
 80066ce:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80066d2:	4972      	ldr	r1, [pc, #456]	@ (800689c <tcp_connect+0x220>)
 80066d4:	486f      	ldr	r0, [pc, #444]	@ (8006894 <tcp_connect+0x218>)
 80066d6:	f008 f9c7 	bl	800ea68 <iprintf>
 80066da:	f06f 0309 	mvn.w	r3, #9
 80066de:	e0d1      	b.n	8006884 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <tcp_connect+0x70>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	e000      	b.n	80066ee <tcp_connect+0x72>
 80066ec:	2300      	movs	r3, #0
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	7a1b      	ldrb	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	7a1b      	ldrb	r3, [r3, #8]
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe fce9 	bl	80050dc <netif_get_by_index>
 800670a:	6278      	str	r0, [r7, #36]	@ 0x24
 800670c:	e005      	b.n	800671a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4618      	mov	r0, r3
 8006714:	f006 feb0 	bl	800d478 <ip4_route>
 8006718:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006720:	f06f 0303 	mvn.w	r3, #3
 8006724:	e0ae      	b.n	8006884 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <tcp_connect+0xb8>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d111      	bne.n	8006758 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <tcp_connect+0xc4>
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	3304      	adds	r3, #4
 800673e:	e000      	b.n	8006742 <tcp_connect+0xc6>
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <tcp_connect+0xd4>
      return ERR_RTE;
 800674a:	f06f 0303 	mvn.w	r3, #3
 800674e:	e099      	b.n	8006884 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8adb      	ldrh	r3, [r3, #22]
 800675c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8adb      	ldrh	r3, [r3, #22]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10c      	bne.n	8006780 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8006766:	f7ff ff43 	bl	80065f0 <tcp_new_port>
 800676a:	4603      	mov	r3, r0
 800676c:	461a      	mov	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8adb      	ldrh	r3, [r3, #22]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <tcp_connect+0x104>
      return ERR_BUF;
 800677a:	f06f 0301 	mvn.w	r3, #1
 800677e:	e081      	b.n	8006884 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 ffa3 	bl	80076cc <tcp_next_iss>
 8006786:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1e5a      	subs	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80067b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80067ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80067d4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3304      	adds	r3, #4
 80067de:	461a      	mov	r2, r3
 80067e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067e2:	f000 ff99 	bl	8007718 <tcp_eff_send_mss_netif>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80067fe:	2102      	movs	r1, #2
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f004 f9f7 	bl	800abf4 <tcp_enqueue_flags>
 8006806:	4603      	mov	r3, r0
 8006808:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800680a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d136      	bne.n	8006880 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2202      	movs	r2, #2
 8006816:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8006818:	8b7b      	ldrh	r3, [r7, #26]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d021      	beq.n	8006862 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800681e:	4b20      	ldr	r3, [pc, #128]	@ (80068a0 <tcp_connect+0x224>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d105      	bne.n	8006834 <tcp_connect+0x1b8>
 8006828:	4b1d      	ldr	r3, [pc, #116]	@ (80068a0 <tcp_connect+0x224>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	4a1c      	ldr	r2, [pc, #112]	@ (80068a0 <tcp_connect+0x224>)
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e013      	b.n	800685c <tcp_connect+0x1e0>
 8006834:	4b1a      	ldr	r3, [pc, #104]	@ (80068a0 <tcp_connect+0x224>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	e00c      	b.n	8006856 <tcp_connect+0x1da>
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	429a      	cmp	r2, r3
 8006844:	d104      	bne.n	8006850 <tcp_connect+0x1d4>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	e005      	b.n	800685c <tcp_connect+0x1e0>
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1ef      	bne.n	800683c <tcp_connect+0x1c0>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8006862:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <tcp_connect+0x228>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	4a0e      	ldr	r2, [pc, #56]	@ (80068a4 <tcp_connect+0x228>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	f005 fa24 	bl	800bcbc <tcp_timer_needed>
 8006874:	4b0c      	ldr	r3, [pc, #48]	@ (80068a8 <tcp_connect+0x22c>)
 8006876:	2201      	movs	r2, #1
 8006878:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f004 faa8 	bl	800add0 <tcp_output>
  }
  return ret;
 8006880:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3728      	adds	r7, #40	@ 0x28
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	08010434 	.word	0x08010434
 8006890:	08010710 	.word	0x08010710
 8006894:	08010478 	.word	0x08010478
 8006898:	0801072c 	.word	0x0801072c
 800689c:	08010748 	.word	0x08010748
 80068a0:	20008308 	.word	0x20008308
 80068a4:	20008310 	.word	0x20008310
 80068a8:	20008318 	.word	0x20008318

080068ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80068ac:	b5b0      	push	{r4, r5, r7, lr}
 80068ae:	b090      	sub	sp, #64	@ 0x40
 80068b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80068b8:	4b95      	ldr	r3, [pc, #596]	@ (8006b10 <tcp_slowtmr+0x264>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a94      	ldr	r2, [pc, #592]	@ (8006b10 <tcp_slowtmr+0x264>)
 80068c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80068c2:	4b94      	ldr	r3, [pc, #592]	@ (8006b14 <tcp_slowtmr+0x268>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	4b92      	ldr	r3, [pc, #584]	@ (8006b14 <tcp_slowtmr+0x268>)
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e000      	b.n	80068d2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80068d0:	bf00      	nop
  prev = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80068d6:	4b90      	ldr	r3, [pc, #576]	@ (8006b18 <tcp_slowtmr+0x26c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80068dc:	e29f      	b.n	8006e1e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	7d1b      	ldrb	r3, [r3, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <tcp_slowtmr+0x48>
 80068e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006b1c <tcp_slowtmr+0x270>)
 80068e8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80068ec:	498c      	ldr	r1, [pc, #560]	@ (8006b20 <tcp_slowtmr+0x274>)
 80068ee:	488d      	ldr	r0, [pc, #564]	@ (8006b24 <tcp_slowtmr+0x278>)
 80068f0:	f008 f8ba 	bl	800ea68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	7d1b      	ldrb	r3, [r3, #20]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d106      	bne.n	800690a <tcp_slowtmr+0x5e>
 80068fc:	4b87      	ldr	r3, [pc, #540]	@ (8006b1c <tcp_slowtmr+0x270>)
 80068fe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006902:	4989      	ldr	r1, [pc, #548]	@ (8006b28 <tcp_slowtmr+0x27c>)
 8006904:	4887      	ldr	r0, [pc, #540]	@ (8006b24 <tcp_slowtmr+0x278>)
 8006906:	f008 f8af 	bl	800ea68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	7d1b      	ldrb	r3, [r3, #20]
 800690e:	2b0a      	cmp	r3, #10
 8006910:	d106      	bne.n	8006920 <tcp_slowtmr+0x74>
 8006912:	4b82      	ldr	r3, [pc, #520]	@ (8006b1c <tcp_slowtmr+0x270>)
 8006914:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006918:	4984      	ldr	r1, [pc, #528]	@ (8006b2c <tcp_slowtmr+0x280>)
 800691a:	4882      	ldr	r0, [pc, #520]	@ (8006b24 <tcp_slowtmr+0x278>)
 800691c:	f008 f8a4 	bl	800ea68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	7f9a      	ldrb	r2, [r3, #30]
 8006924:	4b7b      	ldr	r3, [pc, #492]	@ (8006b14 <tcp_slowtmr+0x268>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d105      	bne.n	8006938 <tcp_slowtmr+0x8c>
      prev = pcb;
 800692c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8006936:	e272      	b.n	8006e1e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8006938:	4b76      	ldr	r3, [pc, #472]	@ (8006b14 <tcp_slowtmr+0x268>)
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	7d1b      	ldrb	r3, [r3, #20]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d10a      	bne.n	800696a <tcp_slowtmr+0xbe>
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800695a:	2b05      	cmp	r3, #5
 800695c:	d905      	bls.n	800696a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800695e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006962:	3301      	adds	r3, #1
 8006964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006968:	e11e      	b.n	8006ba8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800696a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006970:	2b0b      	cmp	r3, #11
 8006972:	d905      	bls.n	8006980 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006978:	3301      	adds	r3, #1
 800697a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800697e:	e113      	b.n	8006ba8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006982:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006986:	2b00      	cmp	r3, #0
 8006988:	d075      	beq.n	8006a76 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <tcp_slowtmr+0xf4>
 8006992:	4b62      	ldr	r3, [pc, #392]	@ (8006b1c <tcp_slowtmr+0x270>)
 8006994:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006998:	4965      	ldr	r1, [pc, #404]	@ (8006b30 <tcp_slowtmr+0x284>)
 800699a:	4862      	ldr	r0, [pc, #392]	@ (8006b24 <tcp_slowtmr+0x278>)
 800699c:	f008 f864 	bl	800ea68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <tcp_slowtmr+0x10a>
 80069a8:	4b5c      	ldr	r3, [pc, #368]	@ (8006b1c <tcp_slowtmr+0x270>)
 80069aa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80069ae:	4961      	ldr	r1, [pc, #388]	@ (8006b34 <tcp_slowtmr+0x288>)
 80069b0:	485c      	ldr	r0, [pc, #368]	@ (8006b24 <tcp_slowtmr+0x278>)
 80069b2:	f008 f859 	bl	800ea68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80069bc:	2b0b      	cmp	r3, #11
 80069be:	d905      	bls.n	80069cc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80069c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069c4:	3301      	adds	r3, #1
 80069c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80069ca:	e0ed      	b.n	8006ba8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80069d2:	3b01      	subs	r3, #1
 80069d4:	4a58      	ldr	r2, [pc, #352]	@ (8006b38 <tcp_slowtmr+0x28c>)
 80069d6:	5cd3      	ldrb	r3, [r2, r3]
 80069d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80069da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80069e0:	7c7a      	ldrb	r2, [r7, #17]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d907      	bls.n	80069f6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80069ec:	3301      	adds	r3, #1
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80069f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80069fc:	7c7a      	ldrb	r2, [r7, #17]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	f200 80d2 	bhi.w	8006ba8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8006a04:	2301      	movs	r3, #1
 8006a06:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8006a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d108      	bne.n	8006a24 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006a12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a14:	f005 f884 	bl	800bb20 <tcp_zero_window_probe>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d014      	beq.n	8006a48 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8006a1e:	2300      	movs	r3, #0
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	e011      	b.n	8006a48 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a2e:	f003 ff49 	bl	800a8c4 <tcp_split_unsent_seg>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d107      	bne.n	8006a48 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8006a38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a3a:	f004 f9c9 	bl	800add0 <tcp_output>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80ac 	beq.w	8006ba8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	f200 80a2 	bhi.w	8006ba8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006a74:	e098      	b.n	8006ba8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	db0f      	blt.n	8006aa0 <tcp_slowtmr+0x1f4>
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006a86:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d008      	beq.n	8006aa0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3301      	adds	r3, #1
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	b21a      	sxth	r2, r3
 8006a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006aac:	429a      	cmp	r2, r3
 8006aae:	db7b      	blt.n	8006ba8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ab2:	f004 fc81 	bl	800b3b8 <tcp_rexmit_rto_prepare>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <tcp_slowtmr+0x220>
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d171      	bne.n	8006ba8 <tcp_slowtmr+0x2fc>
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d06d      	beq.n	8006ba8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ace:	7d1b      	ldrb	r3, [r3, #20]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d03a      	beq.n	8006b4a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ada:	2b0c      	cmp	r3, #12
 8006adc:	bf28      	it	cs
 8006ade:	230c      	movcs	r3, #12
 8006ae0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006ae8:	10db      	asrs	r3, r3, #3
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006af4:	4413      	add	r3, r2
 8006af6:	7efa      	ldrb	r2, [r7, #27]
 8006af8:	4910      	ldr	r1, [pc, #64]	@ (8006b3c <tcp_slowtmr+0x290>)
 8006afa:	5c8a      	ldrb	r2, [r1, r2]
 8006afc:	4093      	lsls	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8006b06:	4293      	cmp	r3, r2
 8006b08:	dc1a      	bgt.n	8006b40 <tcp_slowtmr+0x294>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	b21a      	sxth	r2, r3
 8006b0e:	e019      	b.n	8006b44 <tcp_slowtmr+0x298>
 8006b10:	20008304 	.word	0x20008304
 8006b14:	2000831a 	.word	0x2000831a
 8006b18:	20008310 	.word	0x20008310
 8006b1c:	08010434 	.word	0x08010434
 8006b20:	08010778 	.word	0x08010778
 8006b24:	08010478 	.word	0x08010478
 8006b28:	080107a4 	.word	0x080107a4
 8006b2c:	080107d0 	.word	0x080107d0
 8006b30:	08010800 	.word	0x08010800
 8006b34:	08010834 	.word	0x08010834
 8006b38:	0801241c 	.word	0x0801241c
 8006b3c:	0801240c 	.word	0x0801240c
 8006b40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	bf28      	it	cs
 8006b60:	4613      	movcs	r3, r2
 8006b62:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006b64:	8a7b      	ldrh	r3, [r7, #18]
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d206      	bcs.n	8006b90 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8006b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006ba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ba4:	f004 fc78 	bl	800b498 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006baa:	7d1b      	ldrb	r3, [r3, #20]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d111      	bne.n	8006bd4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb2:	8b5b      	ldrh	r3, [r3, #26]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8006e34 <tcp_slowtmr+0x588>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b28      	cmp	r3, #40	@ 0x28
 8006bc8:	d904      	bls.n	8006bd4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006bca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd6:	7a5b      	ldrb	r3, [r3, #9]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d04c      	beq.n	8006c7a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8006be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d003      	beq.n	8006bf0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006bec:	2b07      	cmp	r3, #7
 8006bee:	d144      	bne.n	8006c7a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006bf0:	4b90      	ldr	r3, [pc, #576]	@ (8006e34 <tcp_slowtmr+0x588>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c00:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8006c04:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006c08:	498b      	ldr	r1, [pc, #556]	@ (8006e38 <tcp_slowtmr+0x58c>)
 8006c0a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c0e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d90a      	bls.n	8006c2a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8006c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8006c1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c22:	3301      	adds	r3, #1
 8006c24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006c28:	e027      	b.n	8006c7a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c2a:	4b82      	ldr	r3, [pc, #520]	@ (8006e34 <tcp_slowtmr+0x588>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006c40:	4618      	mov	r0, r3
 8006c42:	4b7e      	ldr	r3, [pc, #504]	@ (8006e3c <tcp_slowtmr+0x590>)
 8006c44:	fb00 f303 	mul.w	r3, r0, r3
 8006c48:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006c4a:	497b      	ldr	r1, [pc, #492]	@ (8006e38 <tcp_slowtmr+0x58c>)
 8006c4c:	fba1 1303 	umull	r1, r3, r1, r3
 8006c50:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d911      	bls.n	8006c7a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8006c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c58:	f004 ff22 	bl	800baa0 <tcp_keepalive>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8006c62:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d107      	bne.n	8006c7a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8006c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006c70:	3301      	adds	r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c76:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d011      	beq.n	8006ca6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006c82:	4b6c      	ldr	r3, [pc, #432]	@ (8006e34 <tcp_slowtmr+0x588>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	1ad2      	subs	r2, r2, r3
 8006c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006c92:	4619      	mov	r1, r3
 8006c94:	460b      	mov	r3, r1
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	440b      	add	r3, r1
 8006c9a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8006ca0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ca2:	f000 fde3 	bl	800786c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca8:	7d1b      	ldrb	r3, [r3, #20]
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d10b      	bne.n	8006cc6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cae:	4b61      	ldr	r3, [pc, #388]	@ (8006e34 <tcp_slowtmr+0x588>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b28      	cmp	r3, #40	@ 0x28
 8006cba:	d904      	bls.n	8006cc6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8006cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	7d1b      	ldrb	r3, [r3, #20]
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d10b      	bne.n	8006ce6 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006cce:	4b59      	ldr	r3, [pc, #356]	@ (8006e34 <tcp_slowtmr+0x588>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2bf0      	cmp	r3, #240	@ 0xf0
 8006cda:	d904      	bls.n	8006ce6 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8006cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d060      	beq.n	8006db0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8006cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006cf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cf8:	f000 fc04 	bl	8007504 <tcp_pcb_purge>
      if (prev != NULL) {
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006d02:	4b4f      	ldr	r3, [pc, #316]	@ (8006e40 <tcp_slowtmr+0x594>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d106      	bne.n	8006d1a <tcp_slowtmr+0x46e>
 8006d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e44 <tcp_slowtmr+0x598>)
 8006d0e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8006d12:	494d      	ldr	r1, [pc, #308]	@ (8006e48 <tcp_slowtmr+0x59c>)
 8006d14:	484d      	ldr	r0, [pc, #308]	@ (8006e4c <tcp_slowtmr+0x5a0>)
 8006d16:	f007 fea7 	bl	800ea68 <iprintf>
        prev->next = pcb->next;
 8006d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	e00f      	b.n	8006d44 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006d24:	4b46      	ldr	r3, [pc, #280]	@ (8006e40 <tcp_slowtmr+0x594>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d006      	beq.n	8006d3c <tcp_slowtmr+0x490>
 8006d2e:	4b45      	ldr	r3, [pc, #276]	@ (8006e44 <tcp_slowtmr+0x598>)
 8006d30:	f240 5271 	movw	r2, #1393	@ 0x571
 8006d34:	4946      	ldr	r1, [pc, #280]	@ (8006e50 <tcp_slowtmr+0x5a4>)
 8006d36:	4845      	ldr	r0, [pc, #276]	@ (8006e4c <tcp_slowtmr+0x5a0>)
 8006d38:	f007 fe96 	bl	800ea68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4a3f      	ldr	r2, [pc, #252]	@ (8006e40 <tcp_slowtmr+0x594>)
 8006d42:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006d44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d013      	beq.n	8006d74 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d52:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006d54:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	3304      	adds	r3, #4
 8006d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d5c:	8ad2      	ldrh	r2, [r2, #22]
 8006d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d60:	8b09      	ldrh	r1, [r1, #24]
 8006d62:	9102      	str	r1, [sp, #8]
 8006d64:	9201      	str	r2, [sp, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	462b      	mov	r3, r5
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d70:	f004 fde2 	bl	800b938 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	7d1b      	ldrb	r3, [r3, #20]
 8006d7e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d82:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006d8a:	6838      	ldr	r0, [r7, #0]
 8006d8c:	f7ff f892 	bl	8005eb4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006d90:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <tcp_slowtmr+0x5a8>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <tcp_slowtmr+0x4fa>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f06f 010c 	mvn.w	r1, #12
 8006da2:	68b8      	ldr	r0, [r7, #8]
 8006da4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006da6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e54 <tcp_slowtmr+0x5a8>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d037      	beq.n	8006e1e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8006dae:	e590      	b.n	80068d2 <tcp_slowtmr+0x26>
      prev = pcb;
 8006db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	7f1b      	ldrb	r3, [r3, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	7f1a      	ldrb	r2, [r3, #28]
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	7f5b      	ldrb	r3, [r3, #29]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d325      	bcc.n	8006e1e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e54 <tcp_slowtmr+0x5a8>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <tcp_slowtmr+0x554>
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006df0:	6912      	ldr	r2, [r2, #16]
 8006df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006dfe:	e002      	b.n	8006e06 <tcp_slowtmr+0x55a>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <tcp_slowtmr+0x5a8>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f47f ad60 	bne.w	80068d0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006e10:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8006e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e1a:	f003 ffd9 	bl	800add0 <tcp_output>
  while (pcb != NULL) {
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f ad5c 	bne.w	80068de <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <tcp_slowtmr+0x5ac>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006e30:	e067      	b.n	8006f02 <tcp_slowtmr+0x656>
 8006e32:	bf00      	nop
 8006e34:	20008304 	.word	0x20008304
 8006e38:	10624dd3 	.word	0x10624dd3
 8006e3c:	000124f8 	.word	0x000124f8
 8006e40:	20008310 	.word	0x20008310
 8006e44:	08010434 	.word	0x08010434
 8006e48:	0801086c 	.word	0x0801086c
 8006e4c:	08010478 	.word	0x08010478
 8006e50:	08010898 	.word	0x08010898
 8006e54:	20008318 	.word	0x20008318
 8006e58:	20008314 	.word	0x20008314
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5e:	7d1b      	ldrb	r3, [r3, #20]
 8006e60:	2b0a      	cmp	r3, #10
 8006e62:	d006      	beq.n	8006e72 <tcp_slowtmr+0x5c6>
 8006e64:	4b2b      	ldr	r3, [pc, #172]	@ (8006f14 <tcp_slowtmr+0x668>)
 8006e66:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8006e6a:	492b      	ldr	r1, [pc, #172]	@ (8006f18 <tcp_slowtmr+0x66c>)
 8006e6c:	482b      	ldr	r0, [pc, #172]	@ (8006f1c <tcp_slowtmr+0x670>)
 8006e6e:	f007 fdfb 	bl	800ea68 <iprintf>
    pcb_remove = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e78:	4b29      	ldr	r3, [pc, #164]	@ (8006f20 <tcp_slowtmr+0x674>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2bf0      	cmp	r3, #240	@ 0xf0
 8006e84:	d904      	bls.n	8006e90 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d02f      	beq.n	8006ef8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006e98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e9a:	f000 fb33 	bl	8007504 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d010      	beq.n	8006ec6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f24 <tcp_slowtmr+0x678>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d106      	bne.n	8006ebc <tcp_slowtmr+0x610>
 8006eae:	4b19      	ldr	r3, [pc, #100]	@ (8006f14 <tcp_slowtmr+0x668>)
 8006eb0:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006eb4:	491c      	ldr	r1, [pc, #112]	@ (8006f28 <tcp_slowtmr+0x67c>)
 8006eb6:	4819      	ldr	r0, [pc, #100]	@ (8006f1c <tcp_slowtmr+0x670>)
 8006eb8:	f007 fdd6 	bl	800ea68 <iprintf>
        prev->next = pcb->next;
 8006ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	60da      	str	r2, [r3, #12]
 8006ec4:	e00f      	b.n	8006ee6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006ec6:	4b17      	ldr	r3, [pc, #92]	@ (8006f24 <tcp_slowtmr+0x678>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d006      	beq.n	8006ede <tcp_slowtmr+0x632>
 8006ed0:	4b10      	ldr	r3, [pc, #64]	@ (8006f14 <tcp_slowtmr+0x668>)
 8006ed2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8006ed6:	4915      	ldr	r1, [pc, #84]	@ (8006f2c <tcp_slowtmr+0x680>)
 8006ed8:	4810      	ldr	r0, [pc, #64]	@ (8006f1c <tcp_slowtmr+0x670>)
 8006eda:	f007 fdc5 	bl	800ea68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	4a10      	ldr	r2, [pc, #64]	@ (8006f24 <tcp_slowtmr+0x678>)
 8006ee4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006ef0:	69f8      	ldr	r0, [r7, #28]
 8006ef2:	f7fe ffdf 	bl	8005eb4 <tcp_free>
 8006ef6:	e004      	b.n	8006f02 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1a9      	bne.n	8006e5c <tcp_slowtmr+0x5b0>
    }
  }
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	3730      	adds	r7, #48	@ 0x30
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bdb0      	pop	{r4, r5, r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08010434 	.word	0x08010434
 8006f18:	080108c4 	.word	0x080108c4
 8006f1c:	08010478 	.word	0x08010478
 8006f20:	20008304 	.word	0x20008304
 8006f24:	20008314 	.word	0x20008314
 8006f28:	080108f4 	.word	0x080108f4
 8006f2c:	0801091c 	.word	0x0801091c

08006f30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006f36:	4b2d      	ldr	r3, [pc, #180]	@ (8006fec <tcp_fasttmr+0xbc>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fec <tcp_fasttmr+0xbc>)
 8006f40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006f42:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff0 <tcp_fasttmr+0xc0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006f48:	e048      	b.n	8006fdc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7f9a      	ldrb	r2, [r3, #30]
 8006f4e:	4b27      	ldr	r3, [pc, #156]	@ (8006fec <tcp_fasttmr+0xbc>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d03f      	beq.n	8006fd6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006f56:	4b25      	ldr	r3, [pc, #148]	@ (8006fec <tcp_fasttmr+0xbc>)
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8b5b      	ldrh	r3, [r3, #26]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8b5b      	ldrh	r3, [r3, #26]
 8006f6e:	f043 0302 	orr.w	r3, r3, #2
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f003 ff29 	bl	800add0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8b5b      	ldrh	r3, [r3, #26]
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8b5b      	ldrh	r3, [r3, #26]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8b5b      	ldrh	r3, [r3, #26]
 8006f9c:	f023 0308 	bic.w	r3, r3, #8
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff f918 	bl	80061dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006fba:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff4 <tcp_fasttmr+0xc4>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f819 	bl	8006ff8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <tcp_fasttmr+0xc4>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d000      	beq.n	8006fd0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006fce:	e7b8      	b.n	8006f42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	e002      	b.n	8006fdc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1b3      	bne.n	8006f4a <tcp_fasttmr+0x1a>
    }
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	2000831a 	.word	0x2000831a
 8006ff0:	20008310 	.word	0x20008310
 8006ff4:	20008318 	.word	0x20008318

08006ff8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <tcp_process_refused_data+0x22>
 8007006:	4b37      	ldr	r3, [pc, #220]	@ (80070e4 <tcp_process_refused_data+0xec>)
 8007008:	f240 6209 	movw	r2, #1545	@ 0x609
 800700c:	4936      	ldr	r1, [pc, #216]	@ (80070e8 <tcp_process_refused_data+0xf0>)
 800700e:	4837      	ldr	r0, [pc, #220]	@ (80070ec <tcp_process_refused_data+0xf4>)
 8007010:	f007 fd2a 	bl	800ea68 <iprintf>
 8007014:	f06f 030f 	mvn.w	r3, #15
 8007018:	e060      	b.n	80070dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800701e:	7b5b      	ldrb	r3, [r3, #13]
 8007020:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007026:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00b      	beq.n	8007050 <tcp_process_refused_data+0x58>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6918      	ldr	r0, [r3, #16]
 8007042:	2300      	movs	r3, #0
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	47a0      	blx	r4
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
 800704e:	e007      	b.n	8007060 <tcp_process_refused_data+0x68>
 8007050:	2300      	movs	r3, #0
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	2000      	movs	r0, #0
 8007058:	f000 f8a4 	bl	80071a4 <tcp_recv_null>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d12a      	bne.n	80070be <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d033      	beq.n	80070da <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007076:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800707a:	d005      	beq.n	8007088 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007080:	3301      	adds	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <tcp_process_refused_data+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6918      	ldr	r0, [r3, #16]
 800709c:	2300      	movs	r3, #0
 800709e:	2200      	movs	r2, #0
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	47a0      	blx	r4
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
 80070a8:	e001      	b.n	80070ae <tcp_process_refused_data+0xb6>
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80070ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b2:	f113 0f0d 	cmn.w	r3, #13
 80070b6:	d110      	bne.n	80070da <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80070b8:	f06f 030c 	mvn.w	r3, #12
 80070bc:	e00e      	b.n	80070dc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80070be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c2:	f113 0f0d 	cmn.w	r3, #13
 80070c6:	d102      	bne.n	80070ce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80070c8:	f06f 030c 	mvn.w	r3, #12
 80070cc:	e006      	b.n	80070dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80070d4:	f06f 0304 	mvn.w	r3, #4
 80070d8:	e000      	b.n	80070dc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd90      	pop	{r4, r7, pc}
 80070e4:	08010434 	.word	0x08010434
 80070e8:	08010944 	.word	0x08010944
 80070ec:	08010478 	.word	0x08010478

080070f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80070f8:	e007      	b.n	800710a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f80a 	bl	800711a <tcp_seg_free>
    seg = next;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f4      	bne.n	80070fa <tcp_segs_free+0xa>
  }
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00c      	beq.n	8007142 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fb31 	bl	800579c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	2004      	movs	r0, #4
 800713e:	f7fd fcb3 	bl	8004aa8 <memp_free>
  }
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <tcp_seg_copy+0x1c>
 800715a:	4b0f      	ldr	r3, [pc, #60]	@ (8007198 <tcp_seg_copy+0x4c>)
 800715c:	f240 6282 	movw	r2, #1666	@ 0x682
 8007160:	490e      	ldr	r1, [pc, #56]	@ (800719c <tcp_seg_copy+0x50>)
 8007162:	480f      	ldr	r0, [pc, #60]	@ (80071a0 <tcp_seg_copy+0x54>)
 8007164:	f007 fc80 	bl	800ea68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007168:	2004      	movs	r0, #4
 800716a:	f7fd fc2d 	bl	80049c8 <memp_malloc>
 800716e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <tcp_seg_copy+0x2e>
    return NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	e00a      	b.n	8007190 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800717a:	2210      	movs	r2, #16
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f007 fd4d 	bl	800ec1e <memcpy>
  pbuf_ref(cseg->p);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fba7 	bl	80058dc <pbuf_ref>
  return cseg;
 800718e:	68fb      	ldr	r3, [r7, #12]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	08010434 	.word	0x08010434
 800719c:	08010988 	.word	0x08010988
 80071a0:	08010478 	.word	0x08010478

080071a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <tcp_recv_null+0x28>
 80071b8:	4b12      	ldr	r3, [pc, #72]	@ (8007204 <tcp_recv_null+0x60>)
 80071ba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80071be:	4912      	ldr	r1, [pc, #72]	@ (8007208 <tcp_recv_null+0x64>)
 80071c0:	4812      	ldr	r0, [pc, #72]	@ (800720c <tcp_recv_null+0x68>)
 80071c2:	f007 fc51 	bl	800ea68 <iprintf>
 80071c6:	f06f 030f 	mvn.w	r3, #15
 80071ca:	e016      	b.n	80071fa <tcp_recv_null+0x56>

  if (p != NULL) {
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	891b      	ldrh	r3, [r3, #8]
 80071d6:	4619      	mov	r1, r3
 80071d8:	68b8      	ldr	r0, [r7, #8]
 80071da:	f7ff f9b9 	bl	8006550 <tcp_recved>
    pbuf_free(p);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fe fadc 	bl	800579c <pbuf_free>
 80071e4:	e008      	b.n	80071f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80071e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80071ee:	68b8      	ldr	r0, [r7, #8]
 80071f0:	f7ff f85e 	bl	80062b0 <tcp_close>
 80071f4:	4603      	mov	r3, r0
 80071f6:	e000      	b.n	80071fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	08010434 	.word	0x08010434
 8007208:	080109a4 	.word	0x080109a4
 800720c:	08010478 	.word	0x08010478

08007210 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800721a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721e:	2b00      	cmp	r3, #0
 8007220:	db01      	blt.n	8007226 <tcp_kill_prio+0x16>
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	e000      	b.n	8007228 <tcp_kill_prio+0x18>
 8007226:	237f      	movs	r3, #127	@ 0x7f
 8007228:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d034      	beq.n	800729a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007230:	7afb      	ldrb	r3, [r7, #11]
 8007232:	3b01      	subs	r3, #1
 8007234:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800723e:	4b19      	ldr	r3, [pc, #100]	@ (80072a4 <tcp_kill_prio+0x94>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e01f      	b.n	8007286 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	7d5b      	ldrb	r3, [r3, #21]
 800724a:	7afa      	ldrb	r2, [r7, #11]
 800724c:	429a      	cmp	r2, r3
 800724e:	d80c      	bhi.n	800726a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007254:	7afa      	ldrb	r2, [r7, #11]
 8007256:	429a      	cmp	r2, r3
 8007258:	d112      	bne.n	8007280 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800725a:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <tcp_kill_prio+0x98>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	429a      	cmp	r2, r3
 8007268:	d80a      	bhi.n	8007280 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800726a:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <tcp_kill_prio+0x98>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	7d5b      	ldrb	r3, [r3, #21]
 800727e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1dc      	bne.n	8007246 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007292:	6938      	ldr	r0, [r7, #16]
 8007294:	f7ff f8f6 	bl	8006484 <tcp_abort>
 8007298:	e000      	b.n	800729c <tcp_kill_prio+0x8c>
    return;
 800729a:	bf00      	nop
  }
}
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20008310 	.word	0x20008310
 80072a8:	20008304 	.word	0x20008304

080072ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d009      	beq.n	80072d0 <tcp_kill_state+0x24>
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d006      	beq.n	80072d0 <tcp_kill_state+0x24>
 80072c2:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <tcp_kill_state+0x80>)
 80072c4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80072c8:	4919      	ldr	r1, [pc, #100]	@ (8007330 <tcp_kill_state+0x84>)
 80072ca:	481a      	ldr	r0, [pc, #104]	@ (8007334 <tcp_kill_state+0x88>)
 80072cc:	f007 fbcc 	bl	800ea68 <iprintf>

  inactivity = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072d8:	4b17      	ldr	r3, [pc, #92]	@ (8007338 <tcp_kill_state+0x8c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e017      	b.n	8007310 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	7d1b      	ldrb	r3, [r3, #20]
 80072e4:	79fa      	ldrb	r2, [r7, #7]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d10f      	bne.n	800730a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072ea:	4b14      	ldr	r3, [pc, #80]	@ (800733c <tcp_kill_state+0x90>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d807      	bhi.n	800730a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80072fa:	4b10      	ldr	r3, [pc, #64]	@ (800733c <tcp_kill_state+0x90>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e4      	bne.n	80072e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800731c:	2100      	movs	r1, #0
 800731e:	6938      	ldr	r0, [r7, #16]
 8007320:	f7fe fff2 	bl	8006308 <tcp_abandon>
  }
}
 8007324:	bf00      	nop
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08010434 	.word	0x08010434
 8007330:	080109c0 	.word	0x080109c0
 8007334:	08010478 	.word	0x08010478
 8007338:	20008310 	.word	0x20008310
 800733c:	20008304 	.word	0x20008304

08007340 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800734e:	4b12      	ldr	r3, [pc, #72]	@ (8007398 <tcp_kill_timewait+0x58>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e012      	b.n	800737c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007356:	4b11      	ldr	r3, [pc, #68]	@ (800739c <tcp_kill_timewait+0x5c>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d807      	bhi.n	8007376 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <tcp_kill_timewait+0x5c>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e9      	bne.n	8007356 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007388:	68b8      	ldr	r0, [r7, #8]
 800738a:	f7ff f87b 	bl	8006484 <tcp_abort>
  }
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20008314 	.word	0x20008314
 800739c:	20008304 	.word	0x20008304

080073a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80073a6:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <tcp_handle_closepend+0x48>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80073ac:	e014      	b.n	80073d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8b5b      	ldrh	r3, [r3, #26]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8b5b      	ldrh	r3, [r3, #26]
 80073c4:	f023 0308 	bic.w	r3, r3, #8
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fe ff04 	bl	80061dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e7      	bne.n	80073ae <tcp_handle_closepend+0xe>
  }
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20008310 	.word	0x20008310

080073ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80073f6:	2002      	movs	r0, #2
 80073f8:	f7fd fae6 	bl	80049c8 <memp_malloc>
 80073fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d126      	bne.n	8007452 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007404:	f7ff ffcc 	bl	80073a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007408:	f7ff ff9a 	bl	8007340 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800740c:	2002      	movs	r0, #2
 800740e:	f7fd fadb 	bl	80049c8 <memp_malloc>
 8007412:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d11b      	bne.n	8007452 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800741a:	2009      	movs	r0, #9
 800741c:	f7ff ff46 	bl	80072ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007420:	2002      	movs	r0, #2
 8007422:	f7fd fad1 	bl	80049c8 <memp_malloc>
 8007426:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d111      	bne.n	8007452 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800742e:	2008      	movs	r0, #8
 8007430:	f7ff ff3c 	bl	80072ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007434:	2002      	movs	r0, #2
 8007436:	f7fd fac7 	bl	80049c8 <memp_malloc>
 800743a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d107      	bne.n	8007452 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fee3 	bl	8007210 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800744a:	2002      	movs	r0, #2
 800744c:	f7fd fabc 	bl	80049c8 <memp_malloc>
 8007450:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d03f      	beq.n	80074d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007458:	229c      	movs	r2, #156	@ 0x9c
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f007 fb68 	bl	800eb32 <memset>
    pcb->prio = prio;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800746e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	22ff      	movs	r2, #255	@ 0xff
 8007486:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800748e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2206      	movs	r2, #6
 8007494:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2206      	movs	r2, #6
 800749c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80074ae:	4b0d      	ldr	r3, [pc, #52]	@ (80074e4 <tcp_alloc+0xf8>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80074b6:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <tcp_alloc+0xfc>)
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80074c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <tcp_alloc+0x100>)
 80074cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a07      	ldr	r2, [pc, #28]	@ (80074f0 <tcp_alloc+0x104>)
 80074d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20008304 	.word	0x20008304
 80074e8:	2000831a 	.word	0x2000831a
 80074ec:	080071a5 	.word	0x080071a5
 80074f0:	006ddd00 	.word	0x006ddd00

080074f4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80074f8:	2040      	movs	r0, #64	@ 0x40
 80074fa:	f7ff ff77 	bl	80073ec <tcp_alloc>
 80074fe:	4603      	mov	r3, r0
}
 8007500:	4618      	mov	r0, r3
 8007502:	bd80      	pop	{r7, pc}

08007504 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <tcp_pcb_purge+0x1e>
 8007512:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <tcp_pcb_purge+0x94>)
 8007514:	f640 0251 	movw	r2, #2129	@ 0x851
 8007518:	4920      	ldr	r1, [pc, #128]	@ (800759c <tcp_pcb_purge+0x98>)
 800751a:	4821      	ldr	r0, [pc, #132]	@ (80075a0 <tcp_pcb_purge+0x9c>)
 800751c:	f007 faa4 	bl	800ea68 <iprintf>
 8007520:	e037      	b.n	8007592 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7d1b      	ldrb	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d033      	beq.n	8007592 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800752e:	2b0a      	cmp	r3, #10
 8007530:	d02f      	beq.n	8007592 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007536:	2b01      	cmp	r3, #1
 8007538:	d02b      	beq.n	8007592 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe f928 	bl	800579c <pbuf_free>
      pcb->refused_data = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f986 	bl	800786c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007566:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fdbf 	bl	80070f0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fdba 	bl	80070f0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	08010434 	.word	0x08010434
 800759c:	08010a80 	.word	0x08010a80
 80075a0:	08010478 	.word	0x08010478

080075a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <tcp_pcb_remove+0x1e>
 80075b4:	4b3e      	ldr	r3, [pc, #248]	@ (80076b0 <tcp_pcb_remove+0x10c>)
 80075b6:	f640 0283 	movw	r2, #2179	@ 0x883
 80075ba:	493e      	ldr	r1, [pc, #248]	@ (80076b4 <tcp_pcb_remove+0x110>)
 80075bc:	483e      	ldr	r0, [pc, #248]	@ (80076b8 <tcp_pcb_remove+0x114>)
 80075be:	f007 fa53 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <tcp_pcb_remove+0x32>
 80075c8:	4b39      	ldr	r3, [pc, #228]	@ (80076b0 <tcp_pcb_remove+0x10c>)
 80075ca:	f640 0284 	movw	r2, #2180	@ 0x884
 80075ce:	493b      	ldr	r1, [pc, #236]	@ (80076bc <tcp_pcb_remove+0x118>)
 80075d0:	4839      	ldr	r0, [pc, #228]	@ (80076b8 <tcp_pcb_remove+0x114>)
 80075d2:	f007 fa49 	bl	800ea68 <iprintf>

  TCP_RMV(pcblist, pcb);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d105      	bne.n	80075ec <tcp_pcb_remove+0x48>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e013      	b.n	8007614 <tcp_pcb_remove+0x70>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	e00c      	b.n	800760e <tcp_pcb_remove+0x6a>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d104      	bne.n	8007608 <tcp_pcb_remove+0x64>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e005      	b.n	8007614 <tcp_pcb_remove+0x70>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ef      	bne.n	80075f4 <tcp_pcb_remove+0x50>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800761a:	6838      	ldr	r0, [r7, #0]
 800761c:	f7ff ff72 	bl	8007504 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	7d1b      	ldrb	r3, [r3, #20]
 8007624:	2b0a      	cmp	r3, #10
 8007626:	d013      	beq.n	8007650 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800762c:	2b01      	cmp	r3, #1
 800762e:	d00f      	beq.n	8007650 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	8b5b      	ldrh	r3, [r3, #26]
 8007634:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007638:	2b00      	cmp	r3, #0
 800763a:	d009      	beq.n	8007650 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	8b5b      	ldrh	r3, [r3, #26]
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	b29a      	uxth	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800764a:	6838      	ldr	r0, [r7, #0]
 800764c:	f003 fbc0 	bl	800add0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	7d1b      	ldrb	r3, [r3, #20]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d020      	beq.n	800769a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <tcp_pcb_remove+0xca>
 8007660:	4b13      	ldr	r3, [pc, #76]	@ (80076b0 <tcp_pcb_remove+0x10c>)
 8007662:	f640 0293 	movw	r2, #2195	@ 0x893
 8007666:	4916      	ldr	r1, [pc, #88]	@ (80076c0 <tcp_pcb_remove+0x11c>)
 8007668:	4813      	ldr	r0, [pc, #76]	@ (80076b8 <tcp_pcb_remove+0x114>)
 800766a:	f007 f9fd 	bl	800ea68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <tcp_pcb_remove+0xe0>
 8007676:	4b0e      	ldr	r3, [pc, #56]	@ (80076b0 <tcp_pcb_remove+0x10c>)
 8007678:	f640 0294 	movw	r2, #2196	@ 0x894
 800767c:	4911      	ldr	r1, [pc, #68]	@ (80076c4 <tcp_pcb_remove+0x120>)
 800767e:	480e      	ldr	r0, [pc, #56]	@ (80076b8 <tcp_pcb_remove+0x114>)
 8007680:	f007 f9f2 	bl	800ea68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007688:	2b00      	cmp	r3, #0
 800768a:	d006      	beq.n	800769a <tcp_pcb_remove+0xf6>
 800768c:	4b08      	ldr	r3, [pc, #32]	@ (80076b0 <tcp_pcb_remove+0x10c>)
 800768e:	f640 0296 	movw	r2, #2198	@ 0x896
 8007692:	490d      	ldr	r1, [pc, #52]	@ (80076c8 <tcp_pcb_remove+0x124>)
 8007694:	4808      	ldr	r0, [pc, #32]	@ (80076b8 <tcp_pcb_remove+0x114>)
 8007696:	f007 f9e7 	bl	800ea68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	08010434 	.word	0x08010434
 80076b4:	08010a9c 	.word	0x08010a9c
 80076b8:	08010478 	.word	0x08010478
 80076bc:	08010ab8 	.word	0x08010ab8
 80076c0:	08010ad8 	.word	0x08010ad8
 80076c4:	08010af0 	.word	0x08010af0
 80076c8:	08010b0c 	.word	0x08010b0c

080076cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <tcp_next_iss+0x1c>
 80076da:	4b0a      	ldr	r3, [pc, #40]	@ (8007704 <tcp_next_iss+0x38>)
 80076dc:	f640 02af 	movw	r2, #2223	@ 0x8af
 80076e0:	4909      	ldr	r1, [pc, #36]	@ (8007708 <tcp_next_iss+0x3c>)
 80076e2:	480a      	ldr	r0, [pc, #40]	@ (800770c <tcp_next_iss+0x40>)
 80076e4:	f007 f9c0 	bl	800ea68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80076e8:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <tcp_next_iss+0x44>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <tcp_next_iss+0x48>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4413      	add	r3, r2
 80076f2:	4a07      	ldr	r2, [pc, #28]	@ (8007710 <tcp_next_iss+0x44>)
 80076f4:	6013      	str	r3, [r2, #0]
  return iss;
 80076f6:	4b06      	ldr	r3, [pc, #24]	@ (8007710 <tcp_next_iss+0x44>)
 80076f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	08010434 	.word	0x08010434
 8007708:	08010b24 	.word	0x08010b24
 800770c:	08010478 	.word	0x08010478
 8007710:	20000024 	.word	0x20000024
 8007714:	20008304 	.word	0x20008304

08007718 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <tcp_eff_send_mss_netif+0x22>
 800772c:	4b14      	ldr	r3, [pc, #80]	@ (8007780 <tcp_eff_send_mss_netif+0x68>)
 800772e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8007732:	4914      	ldr	r1, [pc, #80]	@ (8007784 <tcp_eff_send_mss_netif+0x6c>)
 8007734:	4814      	ldr	r0, [pc, #80]	@ (8007788 <tcp_eff_send_mss_netif+0x70>)
 8007736:	f007 f997 	bl	800ea68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007740:	89fb      	ldrh	r3, [r7, #14]
 8007742:	e019      	b.n	8007778 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007748:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800774a:	8afb      	ldrh	r3, [r7, #22]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007750:	2328      	movs	r3, #40	@ 0x28
 8007752:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007754:	8afa      	ldrh	r2, [r7, #22]
 8007756:	8abb      	ldrh	r3, [r7, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d904      	bls.n	8007766 <tcp_eff_send_mss_netif+0x4e>
 800775c:	8afa      	ldrh	r2, [r7, #22]
 800775e:	8abb      	ldrh	r3, [r7, #20]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	b29b      	uxth	r3, r3
 8007764:	e000      	b.n	8007768 <tcp_eff_send_mss_netif+0x50>
 8007766:	2300      	movs	r3, #0
 8007768:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800776a:	8a7a      	ldrh	r2, [r7, #18]
 800776c:	89fb      	ldrh	r3, [r7, #14]
 800776e:	4293      	cmp	r3, r2
 8007770:	bf28      	it	cs
 8007772:	4613      	movcs	r3, r2
 8007774:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007776:	89fb      	ldrh	r3, [r7, #14]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	08010434 	.word	0x08010434
 8007784:	08010b40 	.word	0x08010b40
 8007788:	08010478 	.word	0x08010478

0800778c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d119      	bne.n	80077d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80077a0:	4b10      	ldr	r3, [pc, #64]	@ (80077e4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80077a2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80077a6:	4910      	ldr	r1, [pc, #64]	@ (80077e8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80077a8:	4810      	ldr	r0, [pc, #64]	@ (80077ec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80077aa:	f007 f95d 	bl	800ea68 <iprintf>

  while (pcb != NULL) {
 80077ae:	e011      	b.n	80077d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d108      	bne.n	80077ce <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7fe fe5e 	bl	8006484 <tcp_abort>
      pcb = next;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e002      	b.n	80077d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1ea      	bne.n	80077b0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	08010434 	.word	0x08010434
 80077e8:	08010b68 	.word	0x08010b68
 80077ec:	08010478 	.word	0x08010478

080077f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d02a      	beq.n	8007856 <tcp_netif_ip_addr_changed+0x66>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d026      	beq.n	8007856 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007808:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <tcp_netif_ip_addr_changed+0x70>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ffbc 	bl	800778c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007814:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <tcp_netif_ip_addr_changed+0x74>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ffb6 	bl	800778c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d017      	beq.n	8007856 <tcp_netif_ip_addr_changed+0x66>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d013      	beq.n	8007856 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800782e:	4b0e      	ldr	r3, [pc, #56]	@ (8007868 <tcp_netif_ip_addr_changed+0x78>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e00c      	b.n	8007850 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d103      	bne.n	800784a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1ef      	bne.n	8007836 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20008310 	.word	0x20008310
 8007864:	20008308 	.word	0x20008308
 8007868:	2000830c 	.word	0x2000830c

0800786c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fc35 	bl	80070f0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b08d      	sub	sp, #52	@ 0x34
 8007898:	af04      	add	r7, sp, #16
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <tcp_input+0x1c>
 80078a4:	4b9b      	ldr	r3, [pc, #620]	@ (8007b14 <tcp_input+0x280>)
 80078a6:	2283      	movs	r2, #131	@ 0x83
 80078a8:	499b      	ldr	r1, [pc, #620]	@ (8007b18 <tcp_input+0x284>)
 80078aa:	489c      	ldr	r0, [pc, #624]	@ (8007b1c <tcp_input+0x288>)
 80078ac:	f007 f8dc 	bl	800ea68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	4a9a      	ldr	r2, [pc, #616]	@ (8007b20 <tcp_input+0x28c>)
 80078b6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	895b      	ldrh	r3, [r3, #10]
 80078bc:	2b13      	cmp	r3, #19
 80078be:	f240 83d1 	bls.w	8008064 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80078c2:	4b98      	ldr	r3, [pc, #608]	@ (8007b24 <tcp_input+0x290>)
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4a97      	ldr	r2, [pc, #604]	@ (8007b24 <tcp_input+0x290>)
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f006 f875 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 83c7 	bne.w	8008068 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80078da:	4b92      	ldr	r3, [pc, #584]	@ (8007b24 <tcp_input+0x290>)
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80078e2:	2be0      	cmp	r3, #224	@ 0xe0
 80078e4:	f000 83c0 	beq.w	8008068 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80078e8:	4b8d      	ldr	r3, [pc, #564]	@ (8007b20 <tcp_input+0x28c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	899b      	ldrh	r3, [r3, #12]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fc fbf1 	bl	80040d8 <lwip_htons>
 80078f6:	4603      	mov	r3, r0
 80078f8:	0b1b      	lsrs	r3, r3, #12
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007902:	7cbb      	ldrb	r3, [r7, #18]
 8007904:	2b13      	cmp	r3, #19
 8007906:	f240 83b1 	bls.w	800806c <tcp_input+0x7d8>
 800790a:	7cbb      	ldrb	r3, [r7, #18]
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	891b      	ldrh	r3, [r3, #8]
 8007912:	429a      	cmp	r2, r3
 8007914:	f200 83aa 	bhi.w	800806c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007918:	7cbb      	ldrb	r3, [r7, #18]
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b14      	subs	r3, #20
 800791e:	b29a      	uxth	r2, r3
 8007920:	4b81      	ldr	r3, [pc, #516]	@ (8007b28 <tcp_input+0x294>)
 8007922:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007924:	4b81      	ldr	r3, [pc, #516]	@ (8007b2c <tcp_input+0x298>)
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	895a      	ldrh	r2, [r3, #10]
 800792e:	7cbb      	ldrb	r3, [r7, #18]
 8007930:	b29b      	uxth	r3, r3
 8007932:	429a      	cmp	r2, r3
 8007934:	d309      	bcc.n	800794a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007936:	4b7c      	ldr	r3, [pc, #496]	@ (8007b28 <tcp_input+0x294>)
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	4b7d      	ldr	r3, [pc, #500]	@ (8007b30 <tcp_input+0x29c>)
 800793c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800793e:	7cbb      	ldrb	r3, [r7, #18]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fd fea4 	bl	8005690 <pbuf_remove_header>
 8007948:	e04e      	b.n	80079e8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <tcp_input+0xca>
 8007952:	4b70      	ldr	r3, [pc, #448]	@ (8007b14 <tcp_input+0x280>)
 8007954:	22c2      	movs	r2, #194	@ 0xc2
 8007956:	4977      	ldr	r1, [pc, #476]	@ (8007b34 <tcp_input+0x2a0>)
 8007958:	4870      	ldr	r0, [pc, #448]	@ (8007b1c <tcp_input+0x288>)
 800795a:	f007 f885 	bl	800ea68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800795e:	2114      	movs	r1, #20
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fd fe95 	bl	8005690 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	895a      	ldrh	r2, [r3, #10]
 800796a:	4b71      	ldr	r3, [pc, #452]	@ (8007b30 <tcp_input+0x29c>)
 800796c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800796e:	4b6e      	ldr	r3, [pc, #440]	@ (8007b28 <tcp_input+0x294>)
 8007970:	881a      	ldrh	r2, [r3, #0]
 8007972:	4b6f      	ldr	r3, [pc, #444]	@ (8007b30 <tcp_input+0x29c>)
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800797a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b30 <tcp_input+0x29c>)
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fd fe85 	bl	8005690 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	895b      	ldrh	r3, [r3, #10]
 800798c:	8a3a      	ldrh	r2, [r7, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	f200 836e 	bhi.w	8008070 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4a64      	ldr	r2, [pc, #400]	@ (8007b2c <tcp_input+0x298>)
 800799c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	8a3a      	ldrh	r2, [r7, #16]
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd fe72 	bl	8005690 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	891a      	ldrh	r2, [r3, #8]
 80079b0:	8a3b      	ldrh	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	895b      	ldrh	r3, [r3, #10]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <tcp_input+0x13a>
 80079c2:	4b54      	ldr	r3, [pc, #336]	@ (8007b14 <tcp_input+0x280>)
 80079c4:	22df      	movs	r2, #223	@ 0xdf
 80079c6:	495c      	ldr	r1, [pc, #368]	@ (8007b38 <tcp_input+0x2a4>)
 80079c8:	4854      	ldr	r0, [pc, #336]	@ (8007b1c <tcp_input+0x288>)
 80079ca:	f007 f84d 	bl	800ea68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	891a      	ldrh	r2, [r3, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	891b      	ldrh	r3, [r3, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d005      	beq.n	80079e8 <tcp_input+0x154>
 80079dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007b14 <tcp_input+0x280>)
 80079de:	22e0      	movs	r2, #224	@ 0xe0
 80079e0:	4956      	ldr	r1, [pc, #344]	@ (8007b3c <tcp_input+0x2a8>)
 80079e2:	484e      	ldr	r0, [pc, #312]	@ (8007b1c <tcp_input+0x288>)
 80079e4:	f007 f840 	bl	800ea68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80079e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b20 <tcp_input+0x28c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4a4b      	ldr	r2, [pc, #300]	@ (8007b20 <tcp_input+0x28c>)
 80079f2:	6814      	ldr	r4, [r2, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fc fb6f 	bl	80040d8 <lwip_htons>
 80079fa:	4603      	mov	r3, r0
 80079fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80079fe:	4b48      	ldr	r3, [pc, #288]	@ (8007b20 <tcp_input+0x28c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4a46      	ldr	r2, [pc, #280]	@ (8007b20 <tcp_input+0x28c>)
 8007a08:	6814      	ldr	r4, [r2, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fc fb64 	bl	80040d8 <lwip_htons>
 8007a10:	4603      	mov	r3, r0
 8007a12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a14:	4b42      	ldr	r3, [pc, #264]	@ (8007b20 <tcp_input+0x28c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	4a41      	ldr	r2, [pc, #260]	@ (8007b20 <tcp_input+0x28c>)
 8007a1c:	6814      	ldr	r4, [r2, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fc fb70 	bl	8004104 <lwip_htonl>
 8007a24:	4603      	mov	r3, r0
 8007a26:	6063      	str	r3, [r4, #4]
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	4a45      	ldr	r2, [pc, #276]	@ (8007b40 <tcp_input+0x2ac>)
 8007a2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b20 <tcp_input+0x28c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	4a3a      	ldr	r2, [pc, #232]	@ (8007b20 <tcp_input+0x28c>)
 8007a36:	6814      	ldr	r4, [r2, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fc fb63 	bl	8004104 <lwip_htonl>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	4a3f      	ldr	r2, [pc, #252]	@ (8007b44 <tcp_input+0x2b0>)
 8007a46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007a48:	4b35      	ldr	r3, [pc, #212]	@ (8007b20 <tcp_input+0x28c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	89db      	ldrh	r3, [r3, #14]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4a33      	ldr	r2, [pc, #204]	@ (8007b20 <tcp_input+0x28c>)
 8007a52:	6814      	ldr	r4, [r2, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fc fb3f 	bl	80040d8 <lwip_htons>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007a5e:	4b30      	ldr	r3, [pc, #192]	@ (8007b20 <tcp_input+0x28c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	899b      	ldrh	r3, [r3, #12]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fc fb36 	bl	80040d8 <lwip_htons>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	4b34      	ldr	r3, [pc, #208]	@ (8007b48 <tcp_input+0x2b4>)
 8007a78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	891a      	ldrh	r2, [r3, #8]
 8007a7e:	4b33      	ldr	r3, [pc, #204]	@ (8007b4c <tcp_input+0x2b8>)
 8007a80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007a82:	4b31      	ldr	r3, [pc, #196]	@ (8007b48 <tcp_input+0x2b4>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00c      	beq.n	8007aa8 <tcp_input+0x214>
    tcplen++;
 8007a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b4c <tcp_input+0x2b8>)
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	4b2d      	ldr	r3, [pc, #180]	@ (8007b4c <tcp_input+0x2b8>)
 8007a98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	891a      	ldrh	r2, [r3, #8]
 8007a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8007b4c <tcp_input+0x2b8>)
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f200 82e6 	bhi.w	8008074 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aac:	4b28      	ldr	r3, [pc, #160]	@ (8007b50 <tcp_input+0x2bc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	e09d      	b.n	8007bf0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	7d1b      	ldrb	r3, [r3, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <tcp_input+0x234>
 8007abc:	4b15      	ldr	r3, [pc, #84]	@ (8007b14 <tcp_input+0x280>)
 8007abe:	22fb      	movs	r2, #251	@ 0xfb
 8007ac0:	4924      	ldr	r1, [pc, #144]	@ (8007b54 <tcp_input+0x2c0>)
 8007ac2:	4816      	ldr	r0, [pc, #88]	@ (8007b1c <tcp_input+0x288>)
 8007ac4:	f006 ffd0 	bl	800ea68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	7d1b      	ldrb	r3, [r3, #20]
 8007acc:	2b0a      	cmp	r3, #10
 8007ace:	d105      	bne.n	8007adc <tcp_input+0x248>
 8007ad0:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <tcp_input+0x280>)
 8007ad2:	22fc      	movs	r2, #252	@ 0xfc
 8007ad4:	4920      	ldr	r1, [pc, #128]	@ (8007b58 <tcp_input+0x2c4>)
 8007ad6:	4811      	ldr	r0, [pc, #68]	@ (8007b1c <tcp_input+0x288>)
 8007ad8:	f006 ffc6 	bl	800ea68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	7d1b      	ldrb	r3, [r3, #20]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d105      	bne.n	8007af0 <tcp_input+0x25c>
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <tcp_input+0x280>)
 8007ae6:	22fd      	movs	r2, #253	@ 0xfd
 8007ae8:	491c      	ldr	r1, [pc, #112]	@ (8007b5c <tcp_input+0x2c8>)
 8007aea:	480c      	ldr	r0, [pc, #48]	@ (8007b1c <tcp_input+0x288>)
 8007aec:	f006 ffbc 	bl	800ea68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	7a1b      	ldrb	r3, [r3, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d033      	beq.n	8007b60 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	7a1a      	ldrb	r2, [r3, #8]
 8007afc:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <tcp_input+0x290>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b04:	3301      	adds	r3, #1
 8007b06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d029      	beq.n	8007b60 <tcp_input+0x2cc>
      prev = pcb;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	61bb      	str	r3, [r7, #24]
      continue;
 8007b10:	e06b      	b.n	8007bea <tcp_input+0x356>
 8007b12:	bf00      	nop
 8007b14:	08010b9c 	.word	0x08010b9c
 8007b18:	08010bd0 	.word	0x08010bd0
 8007b1c:	08010be8 	.word	0x08010be8
 8007b20:	2000832c 	.word	0x2000832c
 8007b24:	20004d18 	.word	0x20004d18
 8007b28:	20008330 	.word	0x20008330
 8007b2c:	20008334 	.word	0x20008334
 8007b30:	20008332 	.word	0x20008332
 8007b34:	08010c10 	.word	0x08010c10
 8007b38:	08010c20 	.word	0x08010c20
 8007b3c:	08010c2c 	.word	0x08010c2c
 8007b40:	2000833c 	.word	0x2000833c
 8007b44:	20008340 	.word	0x20008340
 8007b48:	20008348 	.word	0x20008348
 8007b4c:	20008346 	.word	0x20008346
 8007b50:	20008310 	.word	0x20008310
 8007b54:	08010c4c 	.word	0x08010c4c
 8007b58:	08010c74 	.word	0x08010c74
 8007b5c:	08010ca0 	.word	0x08010ca0
    }

    if (pcb->remote_port == tcphdr->src &&
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	8b1a      	ldrh	r2, [r3, #24]
 8007b64:	4b72      	ldr	r3, [pc, #456]	@ (8007d30 <tcp_input+0x49c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d13a      	bne.n	8007be6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	8ada      	ldrh	r2, [r3, #22]
 8007b74:	4b6e      	ldr	r3, [pc, #440]	@ (8007d30 <tcp_input+0x49c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d132      	bne.n	8007be6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	4b6b      	ldr	r3, [pc, #428]	@ (8007d34 <tcp_input+0x4a0>)
 8007b86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d12c      	bne.n	8007be6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	4b68      	ldr	r3, [pc, #416]	@ (8007d34 <tcp_input+0x4a0>)
 8007b92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d126      	bne.n	8007be6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d106      	bne.n	8007bb0 <tcp_input+0x31c>
 8007ba2:	4b65      	ldr	r3, [pc, #404]	@ (8007d38 <tcp_input+0x4a4>)
 8007ba4:	f240 120d 	movw	r2, #269	@ 0x10d
 8007ba8:	4964      	ldr	r1, [pc, #400]	@ (8007d3c <tcp_input+0x4a8>)
 8007baa:	4865      	ldr	r0, [pc, #404]	@ (8007d40 <tcp_input+0x4ac>)
 8007bac:	f006 ff5c 	bl	800ea68 <iprintf>
      if (prev != NULL) {
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <tcp_input+0x338>
        prev->next = pcb->next;
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007bbe:	4b61      	ldr	r3, [pc, #388]	@ (8007d44 <tcp_input+0x4b0>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8007d44 <tcp_input+0x4b0>)
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d111      	bne.n	8007bfa <tcp_input+0x366>
 8007bd6:	4b58      	ldr	r3, [pc, #352]	@ (8007d38 <tcp_input+0x4a4>)
 8007bd8:	f240 1215 	movw	r2, #277	@ 0x115
 8007bdc:	495a      	ldr	r1, [pc, #360]	@ (8007d48 <tcp_input+0x4b4>)
 8007bde:	4858      	ldr	r0, [pc, #352]	@ (8007d40 <tcp_input+0x4ac>)
 8007be0:	f006 ff42 	bl	800ea68 <iprintf>
      break;
 8007be4:	e009      	b.n	8007bfa <tcp_input+0x366>
    }
    prev = pcb;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f47f af5e 	bne.w	8007ab4 <tcp_input+0x220>
 8007bf8:	e000      	b.n	8007bfc <tcp_input+0x368>
      break;
 8007bfa:	bf00      	nop
  }

  if (pcb == NULL) {
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f040 80aa 	bne.w	8007d58 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c04:	4b51      	ldr	r3, [pc, #324]	@ (8007d4c <tcp_input+0x4b8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	e03f      	b.n	8007c8c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	7d1b      	ldrb	r3, [r3, #20]
 8007c10:	2b0a      	cmp	r3, #10
 8007c12:	d006      	beq.n	8007c22 <tcp_input+0x38e>
 8007c14:	4b48      	ldr	r3, [pc, #288]	@ (8007d38 <tcp_input+0x4a4>)
 8007c16:	f240 121f 	movw	r2, #287	@ 0x11f
 8007c1a:	494d      	ldr	r1, [pc, #308]	@ (8007d50 <tcp_input+0x4bc>)
 8007c1c:	4848      	ldr	r0, [pc, #288]	@ (8007d40 <tcp_input+0x4ac>)
 8007c1e:	f006 ff23 	bl	800ea68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	7a1b      	ldrb	r3, [r3, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	7a1a      	ldrb	r2, [r3, #8]
 8007c2e:	4b41      	ldr	r3, [pc, #260]	@ (8007d34 <tcp_input+0x4a0>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c36:	3301      	adds	r3, #1
 8007c38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d122      	bne.n	8007c84 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	8b1a      	ldrh	r2, [r3, #24]
 8007c42:	4b3b      	ldr	r3, [pc, #236]	@ (8007d30 <tcp_input+0x49c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d11b      	bne.n	8007c86 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	8ada      	ldrh	r2, [r3, #22]
 8007c52:	4b37      	ldr	r3, [pc, #220]	@ (8007d30 <tcp_input+0x49c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	885b      	ldrh	r3, [r3, #2]
 8007c58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d113      	bne.n	8007c86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	4b34      	ldr	r3, [pc, #208]	@ (8007d34 <tcp_input+0x4a0>)
 8007c64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d10d      	bne.n	8007c86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <tcp_input+0x4a0>)
 8007c70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d107      	bne.n	8007c86 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007c76:	69f8      	ldr	r0, [r7, #28]
 8007c78:	f000 fb56 	bl	8008328 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fd fd8d 	bl	800579c <pbuf_free>
        return;
 8007c82:	e1fd      	b.n	8008080 <tcp_input+0x7ec>
        continue;
 8007c84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1bc      	bne.n	8007c0c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007c96:	4b2f      	ldr	r3, [pc, #188]	@ (8007d54 <tcp_input+0x4c0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e02a      	b.n	8007cf4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	7a1b      	ldrb	r3, [r3, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	7a1a      	ldrb	r2, [r3, #8]
 8007caa:	4b22      	ldr	r3, [pc, #136]	@ (8007d34 <tcp_input+0x4a0>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d002      	beq.n	8007cc0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	61bb      	str	r3, [r7, #24]
        continue;
 8007cbe:	e016      	b.n	8007cee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	8ada      	ldrh	r2, [r3, #22]
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d30 <tcp_input+0x49c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d10c      	bne.n	8007cea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b17      	ldr	r3, [pc, #92]	@ (8007d34 <tcp_input+0x4a0>)
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d00f      	beq.n	8007cfc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00d      	beq.n	8007cfe <tcp_input+0x46a>
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1d1      	bne.n	8007c9e <tcp_input+0x40a>
 8007cfa:	e000      	b.n	8007cfe <tcp_input+0x46a>
            break;
 8007cfc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d029      	beq.n	8007d58 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007d12:	4b10      	ldr	r3, [pc, #64]	@ (8007d54 <tcp_input+0x4c0>)
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007d54 <tcp_input+0x4c0>)
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007d20:	6978      	ldr	r0, [r7, #20]
 8007d22:	f000 fa03 	bl	800812c <tcp_listen_input>
      }
      pbuf_free(p);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fd fd38 	bl	800579c <pbuf_free>
      return;
 8007d2c:	e1a8      	b.n	8008080 <tcp_input+0x7ec>
 8007d2e:	bf00      	nop
 8007d30:	2000832c 	.word	0x2000832c
 8007d34:	20004d18 	.word	0x20004d18
 8007d38:	08010b9c 	.word	0x08010b9c
 8007d3c:	08010cc8 	.word	0x08010cc8
 8007d40:	08010be8 	.word	0x08010be8
 8007d44:	20008310 	.word	0x20008310
 8007d48:	08010cf4 	.word	0x08010cf4
 8007d4c:	20008314 	.word	0x20008314
 8007d50:	08010d20 	.word	0x08010d20
 8007d54:	2000830c 	.word	0x2000830c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8158 	beq.w	8008010 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007d60:	4b95      	ldr	r3, [pc, #596]	@ (8007fb8 <tcp_input+0x724>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	891a      	ldrh	r2, [r3, #8]
 8007d6a:	4b93      	ldr	r3, [pc, #588]	@ (8007fb8 <tcp_input+0x724>)
 8007d6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007d6e:	4a92      	ldr	r2, [pc, #584]	@ (8007fb8 <tcp_input+0x724>)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007d74:	4b91      	ldr	r3, [pc, #580]	@ (8007fbc <tcp_input+0x728>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a8f      	ldr	r2, [pc, #572]	@ (8007fb8 <tcp_input+0x724>)
 8007d7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007d7c:	4b90      	ldr	r3, [pc, #576]	@ (8007fc0 <tcp_input+0x72c>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007d82:	4b90      	ldr	r3, [pc, #576]	@ (8007fc4 <tcp_input+0x730>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007d88:	4b8f      	ldr	r3, [pc, #572]	@ (8007fc8 <tcp_input+0x734>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8007fcc <tcp_input+0x738>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d006      	beq.n	8007da8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7b5b      	ldrb	r3, [r3, #13]
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007db0:	69f8      	ldr	r0, [r7, #28]
 8007db2:	f7ff f921 	bl	8006ff8 <tcp_process_refused_data>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f113 0f0d 	cmn.w	r3, #13
 8007dbc:	d007      	beq.n	8007dce <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00c      	beq.n	8007de0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007dc6:	4b82      	ldr	r3, [pc, #520]	@ (8007fd0 <tcp_input+0x73c>)
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f040 80e3 	bne.w	8007f9e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007dd8:	69f8      	ldr	r0, [r7, #28]
 8007dda:	f003 fdff 	bl	800b9dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007dde:	e0de      	b.n	8007f9e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007de0:	4a7c      	ldr	r2, [pc, #496]	@ (8007fd4 <tcp_input+0x740>)
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007de6:	69f8      	ldr	r0, [r7, #28]
 8007de8:	f000 fb18 	bl	800841c <tcp_process>
 8007dec:	4603      	mov	r3, r0
 8007dee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007df0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007df4:	f113 0f0d 	cmn.w	r3, #13
 8007df8:	f000 80d3 	beq.w	8007fa2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007dfc:	4b71      	ldr	r3, [pc, #452]	@ (8007fc4 <tcp_input+0x730>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d015      	beq.n	8007e34 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <tcp_input+0x590>
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e18:	69fa      	ldr	r2, [r7, #28]
 8007e1a:	6912      	ldr	r2, [r2, #16]
 8007e1c:	f06f 010d 	mvn.w	r1, #13
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007e24:	69f9      	ldr	r1, [r7, #28]
 8007e26:	486c      	ldr	r0, [pc, #432]	@ (8007fd8 <tcp_input+0x744>)
 8007e28:	f7ff fbbc 	bl	80075a4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007e2c:	69f8      	ldr	r0, [r7, #28]
 8007e2e:	f7fe f841 	bl	8005eb4 <tcp_free>
 8007e32:	e0da      	b.n	8007fea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007e38:	4b63      	ldr	r3, [pc, #396]	@ (8007fc8 <tcp_input+0x734>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01d      	beq.n	8007e7c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007e40:	4b61      	ldr	r3, [pc, #388]	@ (8007fc8 <tcp_input+0x734>)
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <tcp_input+0x5d2>
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	6910      	ldr	r0, [r2, #16]
 8007e5a:	89fa      	ldrh	r2, [r7, #14]
 8007e5c:	69f9      	ldr	r1, [r7, #28]
 8007e5e:	4798      	blx	r3
 8007e60:	4603      	mov	r3, r0
 8007e62:	74fb      	strb	r3, [r7, #19]
 8007e64:	e001      	b.n	8007e6a <tcp_input+0x5d6>
 8007e66:	2300      	movs	r3, #0
 8007e68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e6e:	f113 0f0d 	cmn.w	r3, #13
 8007e72:	f000 8098 	beq.w	8007fa6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007e76:	4b54      	ldr	r3, [pc, #336]	@ (8007fc8 <tcp_input+0x734>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007e7c:	69f8      	ldr	r0, [r7, #28]
 8007e7e:	f000 f915 	bl	80080ac <tcp_input_delayed_close>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 8090 	bne.w	8007faa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8007fc0 <tcp_input+0x72c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d041      	beq.n	8007f16 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d006      	beq.n	8007ea8 <tcp_input+0x614>
 8007e9a:	4b50      	ldr	r3, [pc, #320]	@ (8007fdc <tcp_input+0x748>)
 8007e9c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007ea0:	494f      	ldr	r1, [pc, #316]	@ (8007fe0 <tcp_input+0x74c>)
 8007ea2:	4850      	ldr	r0, [pc, #320]	@ (8007fe4 <tcp_input+0x750>)
 8007ea4:	f006 fde0 	bl	800ea68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	8b5b      	ldrh	r3, [r3, #26]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007eb4:	4b42      	ldr	r3, [pc, #264]	@ (8007fc0 <tcp_input+0x72c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fd fc6f 	bl	800579c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007ebe:	69f8      	ldr	r0, [r7, #28]
 8007ec0:	f7fe fae0 	bl	8006484 <tcp_abort>
            goto aborted;
 8007ec4:	e091      	b.n	8007fea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00c      	beq.n	8007eea <tcp_input+0x656>
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	6918      	ldr	r0, [r3, #16]
 8007eda:	4b39      	ldr	r3, [pc, #228]	@ (8007fc0 <tcp_input+0x72c>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	69f9      	ldr	r1, [r7, #28]
 8007ee2:	47a0      	blx	r4
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	74fb      	strb	r3, [r7, #19]
 8007ee8:	e008      	b.n	8007efc <tcp_input+0x668>
 8007eea:	4b35      	ldr	r3, [pc, #212]	@ (8007fc0 <tcp_input+0x72c>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	69f9      	ldr	r1, [r7, #28]
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f7ff f956 	bl	80071a4 <tcp_recv_null>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007efc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f00:	f113 0f0d 	cmn.w	r3, #13
 8007f04:	d053      	beq.n	8007fae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007f06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc0 <tcp_input+0x72c>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007f16:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc4 <tcp_input+0x730>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d030      	beq.n	8007f84 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f2e:	7b5a      	ldrb	r2, [r3, #13]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f34:	f042 0220 	orr.w	r2, r2, #32
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	735a      	strb	r2, [r3, #13]
 8007f3c:	e022      	b.n	8007f84 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f42:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007f46:	d005      	beq.n	8007f54 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <tcp_input+0x6e2>
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	6918      	ldr	r0, [r3, #16]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	47a0      	blx	r4
 8007f70:	4603      	mov	r3, r0
 8007f72:	74fb      	strb	r3, [r7, #19]
 8007f74:	e001      	b.n	8007f7a <tcp_input+0x6e6>
 8007f76:	2300      	movs	r3, #0
 8007f78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f7e:	f113 0f0d 	cmn.w	r3, #13
 8007f82:	d016      	beq.n	8007fb2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007f84:	4b13      	ldr	r3, [pc, #76]	@ (8007fd4 <tcp_input+0x740>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007f8a:	69f8      	ldr	r0, [r7, #28]
 8007f8c:	f000 f88e 	bl	80080ac <tcp_input_delayed_close>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d128      	bne.n	8007fe8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007f96:	69f8      	ldr	r0, [r7, #28]
 8007f98:	f002 ff1a 	bl	800add0 <tcp_output>
 8007f9c:	e025      	b.n	8007fea <tcp_input+0x756>
        goto aborted;
 8007f9e:	bf00      	nop
 8007fa0:	e023      	b.n	8007fea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007fa2:	bf00      	nop
 8007fa4:	e021      	b.n	8007fea <tcp_input+0x756>
              goto aborted;
 8007fa6:	bf00      	nop
 8007fa8:	e01f      	b.n	8007fea <tcp_input+0x756>
          goto aborted;
 8007faa:	bf00      	nop
 8007fac:	e01d      	b.n	8007fea <tcp_input+0x756>
            goto aborted;
 8007fae:	bf00      	nop
 8007fb0:	e01b      	b.n	8007fea <tcp_input+0x756>
              goto aborted;
 8007fb2:	bf00      	nop
 8007fb4:	e019      	b.n	8007fea <tcp_input+0x756>
 8007fb6:	bf00      	nop
 8007fb8:	2000831c 	.word	0x2000831c
 8007fbc:	2000832c 	.word	0x2000832c
 8007fc0:	2000834c 	.word	0x2000834c
 8007fc4:	20008349 	.word	0x20008349
 8007fc8:	20008344 	.word	0x20008344
 8007fcc:	20008348 	.word	0x20008348
 8007fd0:	20008346 	.word	0x20008346
 8007fd4:	20008350 	.word	0x20008350
 8007fd8:	20008310 	.word	0x20008310
 8007fdc:	08010b9c 	.word	0x08010b9c
 8007fe0:	08010d50 	.word	0x08010d50
 8007fe4:	08010be8 	.word	0x08010be8
          goto aborted;
 8007fe8:	bf00      	nop
    tcp_input_pcb = NULL;
 8007fea:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <tcp_input+0x7f4>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007ff0:	4b26      	ldr	r3, [pc, #152]	@ (800808c <tcp_input+0x7f8>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007ff6:	4b26      	ldr	r3, [pc, #152]	@ (8008090 <tcp_input+0x7fc>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d03f      	beq.n	800807e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007ffe:	4b24      	ldr	r3, [pc, #144]	@ (8008090 <tcp_input+0x7fc>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd fbca 	bl	800579c <pbuf_free>
      inseg.p = NULL;
 8008008:	4b21      	ldr	r3, [pc, #132]	@ (8008090 <tcp_input+0x7fc>)
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800800e:	e036      	b.n	800807e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008010:	4b20      	ldr	r3, [pc, #128]	@ (8008094 <tcp_input+0x800>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	899b      	ldrh	r3, [r3, #12]
 8008016:	b29b      	uxth	r3, r3
 8008018:	4618      	mov	r0, r3
 800801a:	f7fc f85d 	bl	80040d8 <lwip_htons>
 800801e:	4603      	mov	r3, r0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d118      	bne.n	800805c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800802a:	4b1b      	ldr	r3, [pc, #108]	@ (8008098 <tcp_input+0x804>)
 800802c:	6819      	ldr	r1, [r3, #0]
 800802e:	4b1b      	ldr	r3, [pc, #108]	@ (800809c <tcp_input+0x808>)
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <tcp_input+0x80c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800803a:	4b16      	ldr	r3, [pc, #88]	@ (8008094 <tcp_input+0x800>)
 800803c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800803e:	885b      	ldrh	r3, [r3, #2]
 8008040:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008042:	4a14      	ldr	r2, [pc, #80]	@ (8008094 <tcp_input+0x800>)
 8008044:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008046:	8812      	ldrh	r2, [r2, #0]
 8008048:	b292      	uxth	r2, r2
 800804a:	9202      	str	r2, [sp, #8]
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	4b15      	ldr	r3, [pc, #84]	@ (80080a4 <tcp_input+0x810>)
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4b15      	ldr	r3, [pc, #84]	@ (80080a8 <tcp_input+0x814>)
 8008054:	4602      	mov	r2, r0
 8008056:	2000      	movs	r0, #0
 8008058:	f003 fc6e 	bl	800b938 <tcp_rst>
    pbuf_free(p);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fd fb9d 	bl	800579c <pbuf_free>
  return;
 8008062:	e00c      	b.n	800807e <tcp_input+0x7ea>
    goto dropped;
 8008064:	bf00      	nop
 8008066:	e006      	b.n	8008076 <tcp_input+0x7e2>
    goto dropped;
 8008068:	bf00      	nop
 800806a:	e004      	b.n	8008076 <tcp_input+0x7e2>
    goto dropped;
 800806c:	bf00      	nop
 800806e:	e002      	b.n	8008076 <tcp_input+0x7e2>
      goto dropped;
 8008070:	bf00      	nop
 8008072:	e000      	b.n	8008076 <tcp_input+0x7e2>
      goto dropped;
 8008074:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fd fb90 	bl	800579c <pbuf_free>
 800807c:	e000      	b.n	8008080 <tcp_input+0x7ec>
  return;
 800807e:	bf00      	nop
}
 8008080:	3724      	adds	r7, #36	@ 0x24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd90      	pop	{r4, r7, pc}
 8008086:	bf00      	nop
 8008088:	20008350 	.word	0x20008350
 800808c:	2000834c 	.word	0x2000834c
 8008090:	2000831c 	.word	0x2000831c
 8008094:	2000832c 	.word	0x2000832c
 8008098:	20008340 	.word	0x20008340
 800809c:	20008346 	.word	0x20008346
 80080a0:	2000833c 	.word	0x2000833c
 80080a4:	20004d28 	.word	0x20004d28
 80080a8:	20004d2c 	.word	0x20004d2c

080080ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <tcp_input_delayed_close+0x1c>
 80080ba:	4b17      	ldr	r3, [pc, #92]	@ (8008118 <tcp_input_delayed_close+0x6c>)
 80080bc:	f240 225a 	movw	r2, #602	@ 0x25a
 80080c0:	4916      	ldr	r1, [pc, #88]	@ (800811c <tcp_input_delayed_close+0x70>)
 80080c2:	4817      	ldr	r0, [pc, #92]	@ (8008120 <tcp_input_delayed_close+0x74>)
 80080c4:	f006 fcd0 	bl	800ea68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80080c8:	4b16      	ldr	r3, [pc, #88]	@ (8008124 <tcp_input_delayed_close+0x78>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01c      	beq.n	800810e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8b5b      	ldrh	r3, [r3, #26]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <tcp_input_delayed_close+0x50>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6912      	ldr	r2, [r2, #16]
 80080f4:	f06f 010e 	mvn.w	r1, #14
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	480a      	ldr	r0, [pc, #40]	@ (8008128 <tcp_input_delayed_close+0x7c>)
 8008100:	f7ff fa50 	bl	80075a4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fd fed5 	bl	8005eb4 <tcp_free>
    return 1;
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	08010b9c 	.word	0x08010b9c
 800811c:	08010d6c 	.word	0x08010d6c
 8008120:	08010be8 	.word	0x08010be8
 8008124:	20008349 	.word	0x20008349
 8008128:	20008310 	.word	0x20008310

0800812c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800812c:	b590      	push	{r4, r7, lr}
 800812e:	b08b      	sub	sp, #44	@ 0x2c
 8008130:	af04      	add	r7, sp, #16
 8008132:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008134:	4b6f      	ldr	r3, [pc, #444]	@ (80082f4 <tcp_listen_input+0x1c8>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	f040 80d2 	bne.w	80082e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <tcp_listen_input+0x2a>
 8008148:	4b6b      	ldr	r3, [pc, #428]	@ (80082f8 <tcp_listen_input+0x1cc>)
 800814a:	f240 2281 	movw	r2, #641	@ 0x281
 800814e:	496b      	ldr	r1, [pc, #428]	@ (80082fc <tcp_listen_input+0x1d0>)
 8008150:	486b      	ldr	r0, [pc, #428]	@ (8008300 <tcp_listen_input+0x1d4>)
 8008152:	f006 fc89 	bl	800ea68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008156:	4b67      	ldr	r3, [pc, #412]	@ (80082f4 <tcp_listen_input+0x1c8>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 0310 	and.w	r3, r3, #16
 800815e:	2b00      	cmp	r3, #0
 8008160:	d019      	beq.n	8008196 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008162:	4b68      	ldr	r3, [pc, #416]	@ (8008304 <tcp_listen_input+0x1d8>)
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	4b68      	ldr	r3, [pc, #416]	@ (8008308 <tcp_listen_input+0x1dc>)
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	4b67      	ldr	r3, [pc, #412]	@ (800830c <tcp_listen_input+0x1e0>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008172:	4b67      	ldr	r3, [pc, #412]	@ (8008310 <tcp_listen_input+0x1e4>)
 8008174:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008176:	885b      	ldrh	r3, [r3, #2]
 8008178:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800817a:	4a65      	ldr	r2, [pc, #404]	@ (8008310 <tcp_listen_input+0x1e4>)
 800817c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800817e:	8812      	ldrh	r2, [r2, #0]
 8008180:	b292      	uxth	r2, r2
 8008182:	9202      	str	r2, [sp, #8]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	4b63      	ldr	r3, [pc, #396]	@ (8008314 <tcp_listen_input+0x1e8>)
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4b63      	ldr	r3, [pc, #396]	@ (8008318 <tcp_listen_input+0x1ec>)
 800818c:	4602      	mov	r2, r0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f003 fbd2 	bl	800b938 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008194:	e0a9      	b.n	80082ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008196:	4b57      	ldr	r3, [pc, #348]	@ (80082f4 <tcp_listen_input+0x1c8>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 80a3 	beq.w	80082ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	7d5b      	ldrb	r3, [r3, #21]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff f91f 	bl	80073ec <tcp_alloc>
 80081ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d111      	bne.n	80081da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <tcp_listen_input+0xa8>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6910      	ldr	r0, [r2, #16]
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ca:	2100      	movs	r1, #0
 80081cc:	4798      	blx	r3
 80081ce:	4603      	mov	r3, r0
 80081d0:	73bb      	strb	r3, [r7, #14]
      return;
 80081d2:	e08b      	b.n	80082ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80081d4:	23f0      	movs	r3, #240	@ 0xf0
 80081d6:	73bb      	strb	r3, [r7, #14]
      return;
 80081d8:	e088      	b.n	80082ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80081da:	4b50      	ldr	r3, [pc, #320]	@ (800831c <tcp_listen_input+0x1f0>)
 80081dc:	695a      	ldr	r2, [r3, #20]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80081e2:	4b4e      	ldr	r3, [pc, #312]	@ (800831c <tcp_listen_input+0x1f0>)
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8ada      	ldrh	r2, [r3, #22]
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80081f2:	4b47      	ldr	r3, [pc, #284]	@ (8008310 <tcp_listen_input+0x1e4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2203      	movs	r2, #3
 8008202:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008204:	4b41      	ldr	r3, [pc, #260]	@ (800830c <tcp_listen_input+0x1e0>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008216:	6978      	ldr	r0, [r7, #20]
 8008218:	f7ff fa58 	bl	80076cc <tcp_next_iss>
 800821c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008236:	4b35      	ldr	r3, [pc, #212]	@ (800830c <tcp_listen_input+0x1e0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7a5b      	ldrb	r3, [r3, #9]
 8008252:	f003 030c 	and.w	r3, r3, #12
 8008256:	b2da      	uxtb	r2, r3
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7a1a      	ldrb	r2, [r3, #8]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008264:	4b2e      	ldr	r3, [pc, #184]	@ (8008320 <tcp_listen_input+0x1f4>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	60da      	str	r2, [r3, #12]
 800826c:	4a2c      	ldr	r2, [pc, #176]	@ (8008320 <tcp_listen_input+0x1f4>)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	f003 fd23 	bl	800bcbc <tcp_timer_needed>
 8008276:	4b2b      	ldr	r3, [pc, #172]	@ (8008324 <tcp_listen_input+0x1f8>)
 8008278:	2201      	movs	r2, #1
 800827a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800827c:	6978      	ldr	r0, [r7, #20]
 800827e:	f001 fd8b 	bl	8009d98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008282:	4b23      	ldr	r3, [pc, #140]	@ (8008310 <tcp_listen_input+0x1e4>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	89db      	ldrh	r3, [r3, #14]
 8008288:	b29a      	uxth	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f005 f8e7 	bl	800d478 <ip4_route>
 80082aa:	4601      	mov	r1, r0
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	3304      	adds	r3, #4
 80082b0:	461a      	mov	r2, r3
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fa30 	bl	8007718 <tcp_eff_send_mss_netif>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461a      	mov	r2, r3
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80082c0:	2112      	movs	r1, #18
 80082c2:	6978      	ldr	r0, [r7, #20]
 80082c4:	f002 fc96 	bl	800abf4 <tcp_enqueue_flags>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80082cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80082d4:	2100      	movs	r1, #0
 80082d6:	6978      	ldr	r0, [r7, #20]
 80082d8:	f7fe f816 	bl	8006308 <tcp_abandon>
      return;
 80082dc:	e006      	b.n	80082ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80082de:	6978      	ldr	r0, [r7, #20]
 80082e0:	f002 fd76 	bl	800add0 <tcp_output>
  return;
 80082e4:	e001      	b.n	80082ea <tcp_listen_input+0x1be>
    return;
 80082e6:	bf00      	nop
 80082e8:	e000      	b.n	80082ec <tcp_listen_input+0x1c0>
  return;
 80082ea:	bf00      	nop
}
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd90      	pop	{r4, r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20008348 	.word	0x20008348
 80082f8:	08010b9c 	.word	0x08010b9c
 80082fc:	08010d94 	.word	0x08010d94
 8008300:	08010be8 	.word	0x08010be8
 8008304:	20008340 	.word	0x20008340
 8008308:	20008346 	.word	0x20008346
 800830c:	2000833c 	.word	0x2000833c
 8008310:	2000832c 	.word	0x2000832c
 8008314:	20004d28 	.word	0x20004d28
 8008318:	20004d2c 	.word	0x20004d2c
 800831c:	20004d18 	.word	0x20004d18
 8008320:	20008310 	.word	0x20008310
 8008324:	20008318 	.word	0x20008318

08008328 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af04      	add	r7, sp, #16
 800832e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008330:	4b2f      	ldr	r3, [pc, #188]	@ (80083f0 <tcp_timewait_input+0xc8>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d153      	bne.n	80083e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <tcp_timewait_input+0x28>
 8008342:	4b2c      	ldr	r3, [pc, #176]	@ (80083f4 <tcp_timewait_input+0xcc>)
 8008344:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008348:	492b      	ldr	r1, [pc, #172]	@ (80083f8 <tcp_timewait_input+0xd0>)
 800834a:	482c      	ldr	r0, [pc, #176]	@ (80083fc <tcp_timewait_input+0xd4>)
 800834c:	f006 fb8c 	bl	800ea68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008350:	4b27      	ldr	r3, [pc, #156]	@ (80083f0 <tcp_timewait_input+0xc8>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02a      	beq.n	80083b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800835c:	4b28      	ldr	r3, [pc, #160]	@ (8008400 <tcp_timewait_input+0xd8>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	db2d      	blt.n	80083c6 <tcp_timewait_input+0x9e>
 800836a:	4b25      	ldr	r3, [pc, #148]	@ (8008400 <tcp_timewait_input+0xd8>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008376:	440b      	add	r3, r1
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc23      	bgt.n	80083c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800837e:	4b21      	ldr	r3, [pc, #132]	@ (8008404 <tcp_timewait_input+0xdc>)
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	4b21      	ldr	r3, [pc, #132]	@ (8008408 <tcp_timewait_input+0xe0>)
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	4b1d      	ldr	r3, [pc, #116]	@ (8008400 <tcp_timewait_input+0xd8>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800838e:	4b1f      	ldr	r3, [pc, #124]	@ (800840c <tcp_timewait_input+0xe4>)
 8008390:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008396:	4a1d      	ldr	r2, [pc, #116]	@ (800840c <tcp_timewait_input+0xe4>)
 8008398:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800839a:	8812      	ldrh	r2, [r2, #0]
 800839c:	b292      	uxth	r2, r2
 800839e:	9202      	str	r2, [sp, #8]
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008410 <tcp_timewait_input+0xe8>)
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008414 <tcp_timewait_input+0xec>)
 80083a8:	4602      	mov	r2, r0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f003 fac4 	bl	800b938 <tcp_rst>
      return;
 80083b0:	e01b      	b.n	80083ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80083b2:	4b0f      	ldr	r3, [pc, #60]	@ (80083f0 <tcp_timewait_input+0xc8>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80083be:	4b16      	ldr	r3, [pc, #88]	@ (8008418 <tcp_timewait_input+0xf0>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80083c6:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <tcp_timewait_input+0xe0>)
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8b5b      	ldrh	r3, [r3, #26]
 80083d2:	f043 0302 	orr.w	r3, r3, #2
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 fcf7 	bl	800add0 <tcp_output>
  }
  return;
 80083e2:	e001      	b.n	80083e8 <tcp_timewait_input+0xc0>
    return;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <tcp_timewait_input+0xc2>
  return;
 80083e8:	bf00      	nop
}
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20008348 	.word	0x20008348
 80083f4:	08010b9c 	.word	0x08010b9c
 80083f8:	08010db4 	.word	0x08010db4
 80083fc:	08010be8 	.word	0x08010be8
 8008400:	2000833c 	.word	0x2000833c
 8008404:	20008340 	.word	0x20008340
 8008408:	20008346 	.word	0x20008346
 800840c:	2000832c 	.word	0x2000832c
 8008410:	20004d28 	.word	0x20004d28
 8008414:	20004d2c 	.word	0x20004d2c
 8008418:	20008304 	.word	0x20008304

0800841c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b08d      	sub	sp, #52	@ 0x34
 8008420:	af04      	add	r7, sp, #16
 8008422:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <tcp_process+0x24>
 8008432:	4b9d      	ldr	r3, [pc, #628]	@ (80086a8 <tcp_process+0x28c>)
 8008434:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008438:	499c      	ldr	r1, [pc, #624]	@ (80086ac <tcp_process+0x290>)
 800843a:	489d      	ldr	r0, [pc, #628]	@ (80086b0 <tcp_process+0x294>)
 800843c:	f006 fb14 	bl	800ea68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008440:	4b9c      	ldr	r3, [pc, #624]	@ (80086b4 <tcp_process+0x298>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d04e      	beq.n	80084ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	7d1b      	ldrb	r3, [r3, #20]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d108      	bne.n	8008466 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008458:	4b97      	ldr	r3, [pc, #604]	@ (80086b8 <tcp_process+0x29c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d123      	bne.n	80084a8 <tcp_process+0x8c>
        acceptable = 1;
 8008460:	2301      	movs	r3, #1
 8008462:	76fb      	strb	r3, [r7, #27]
 8008464:	e020      	b.n	80084a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800846a:	4b94      	ldr	r3, [pc, #592]	@ (80086bc <tcp_process+0x2a0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d102      	bne.n	8008478 <tcp_process+0x5c>
        acceptable = 1;
 8008472:	2301      	movs	r3, #1
 8008474:	76fb      	strb	r3, [r7, #27]
 8008476:	e017      	b.n	80084a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008478:	4b90      	ldr	r3, [pc, #576]	@ (80086bc <tcp_process+0x2a0>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	db10      	blt.n	80084a8 <tcp_process+0x8c>
 8008486:	4b8d      	ldr	r3, [pc, #564]	@ (80086bc <tcp_process+0x2a0>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008492:	440b      	add	r3, r1
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	dc06      	bgt.n	80084a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	8b5b      	ldrh	r3, [r3, #26]
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80084a8:	7efb      	ldrb	r3, [r7, #27]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01b      	beq.n	80084e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7d1b      	ldrb	r3, [r3, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <tcp_process+0xa8>
 80084b6:	4b7c      	ldr	r3, [pc, #496]	@ (80086a8 <tcp_process+0x28c>)
 80084b8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80084bc:	4980      	ldr	r1, [pc, #512]	@ (80086c0 <tcp_process+0x2a4>)
 80084be:	487c      	ldr	r0, [pc, #496]	@ (80086b0 <tcp_process+0x294>)
 80084c0:	f006 fad2 	bl	800ea68 <iprintf>
      recv_flags |= TF_RESET;
 80084c4:	4b7f      	ldr	r3, [pc, #508]	@ (80086c4 <tcp_process+0x2a8>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f043 0308 	orr.w	r3, r3, #8
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	4b7d      	ldr	r3, [pc, #500]	@ (80086c4 <tcp_process+0x2a8>)
 80084d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	8b5b      	ldrh	r3, [r3, #26]
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80084e0:	f06f 030d 	mvn.w	r3, #13
 80084e4:	e37a      	b.n	8008bdc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e378      	b.n	8008bdc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80084ea:	4b72      	ldr	r3, [pc, #456]	@ (80086b4 <tcp_process+0x298>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d010      	beq.n	8008518 <tcp_process+0xfc>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	7d1b      	ldrb	r3, [r3, #20]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d00c      	beq.n	8008518 <tcp_process+0xfc>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7d1b      	ldrb	r3, [r3, #20]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d008      	beq.n	8008518 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8b5b      	ldrh	r3, [r3, #26]
 800850a:	f043 0302 	orr.w	r3, r3, #2
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e361      	b.n	8008bdc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8b5b      	ldrh	r3, [r3, #26]
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d103      	bne.n	800852c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008524:	4b68      	ldr	r3, [pc, #416]	@ (80086c8 <tcp_process+0x2ac>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 fc2b 	bl	8009d98 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7d1b      	ldrb	r3, [r3, #20]
 8008546:	3b02      	subs	r3, #2
 8008548:	2b07      	cmp	r3, #7
 800854a:	f200 8337 	bhi.w	8008bbc <tcp_process+0x7a0>
 800854e:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <tcp_process+0x138>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	08008575 	.word	0x08008575
 8008558:	080087a5 	.word	0x080087a5
 800855c:	0800891d 	.word	0x0800891d
 8008560:	08008947 	.word	0x08008947
 8008564:	08008a6b 	.word	0x08008a6b
 8008568:	0800891d 	.word	0x0800891d
 800856c:	08008af7 	.word	0x08008af7
 8008570:	08008b87 	.word	0x08008b87
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008574:	4b4f      	ldr	r3, [pc, #316]	@ (80086b4 <tcp_process+0x298>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80e4 	beq.w	800874a <tcp_process+0x32e>
 8008582:	4b4c      	ldr	r3, [pc, #304]	@ (80086b4 <tcp_process+0x298>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80dd 	beq.w	800874a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	4b48      	ldr	r3, [pc, #288]	@ (80086b8 <tcp_process+0x29c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	f040 80d5 	bne.w	800874a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80085a0:	4b46      	ldr	r3, [pc, #280]	@ (80086bc <tcp_process+0x2a0>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80085b2:	4b41      	ldr	r3, [pc, #260]	@ (80086b8 <tcp_process+0x29c>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80085ba:	4b44      	ldr	r3, [pc, #272]	@ (80086cc <tcp_process+0x2b0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	89db      	ldrh	r3, [r3, #14]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80085d4:	4b39      	ldr	r3, [pc, #228]	@ (80086bc <tcp_process+0x2a0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	1e5a      	subs	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2204      	movs	r2, #4
 80085e2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4618      	mov	r0, r3
 80085ee:	f004 ff43 	bl	800d478 <ip4_route>
 80085f2:	4601      	mov	r1, r0
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	461a      	mov	r2, r3
 80085fa:	4620      	mov	r0, r4
 80085fc:	f7ff f88c 	bl	8007718 <tcp_eff_send_mss_netif>
 8008600:	4603      	mov	r3, r0
 8008602:	461a      	mov	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800860c:	009a      	lsls	r2, r3, #2
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008618:	428b      	cmp	r3, r1
 800861a:	bf38      	it	cc
 800861c:	460b      	movcc	r3, r1
 800861e:	429a      	cmp	r2, r3
 8008620:	d204      	bcs.n	800862c <tcp_process+0x210>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	b29b      	uxth	r3, r3
 800862a:	e00d      	b.n	8008648 <tcp_process+0x22c>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008636:	4293      	cmp	r3, r2
 8008638:	d904      	bls.n	8008644 <tcp_process+0x228>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	b29b      	uxth	r3, r3
 8008642:	e001      	b.n	8008648 <tcp_process+0x22c>
 8008644:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <tcp_process+0x24a>
 8008658:	4b13      	ldr	r3, [pc, #76]	@ (80086a8 <tcp_process+0x28c>)
 800865a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800865e:	491c      	ldr	r1, [pc, #112]	@ (80086d0 <tcp_process+0x2b4>)
 8008660:	4813      	ldr	r0, [pc, #76]	@ (80086b0 <tcp_process+0x294>)
 8008662:	f006 fa01 	bl	800ea68 <iprintf>
        --pcb->snd_queuelen;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d12a      	bne.n	80086d8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008686:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <tcp_process+0x280>
 800868e:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <tcp_process+0x28c>)
 8008690:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008694:	490f      	ldr	r1, [pc, #60]	@ (80086d4 <tcp_process+0x2b8>)
 8008696:	4806      	ldr	r0, [pc, #24]	@ (80086b0 <tcp_process+0x294>)
 8008698:	f006 f9e6 	bl	800ea68 <iprintf>
          pcb->unsent = rseg->next;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80086a4:	e01c      	b.n	80086e0 <tcp_process+0x2c4>
 80086a6:	bf00      	nop
 80086a8:	08010b9c 	.word	0x08010b9c
 80086ac:	08010dd4 	.word	0x08010dd4
 80086b0:	08010be8 	.word	0x08010be8
 80086b4:	20008348 	.word	0x20008348
 80086b8:	20008340 	.word	0x20008340
 80086bc:	2000833c 	.word	0x2000833c
 80086c0:	08010df0 	.word	0x08010df0
 80086c4:	20008349 	.word	0x20008349
 80086c8:	20008304 	.word	0x20008304
 80086cc:	2000832c 	.word	0x2000832c
 80086d0:	08010e10 	.word	0x08010e10
 80086d4:	08010e28 	.word	0x08010e28
        } else {
          pcb->unacked = rseg->next;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80086e0:	69f8      	ldr	r0, [r7, #28]
 80086e2:	f7fe fd1a 	bl	800711a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086f4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80086f6:	e006      	b.n	8008706 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <tcp_process+0x30a>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6910      	ldr	r0, [r2, #16]
 800871a:	2200      	movs	r2, #0
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4798      	blx	r3
 8008720:	4603      	mov	r3, r0
 8008722:	76bb      	strb	r3, [r7, #26]
 8008724:	e001      	b.n	800872a <tcp_process+0x30e>
 8008726:	2300      	movs	r3, #0
 8008728:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800872a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800872e:	f113 0f0d 	cmn.w	r3, #13
 8008732:	d102      	bne.n	800873a <tcp_process+0x31e>
          return ERR_ABRT;
 8008734:	f06f 030c 	mvn.w	r3, #12
 8008738:	e250      	b.n	8008bdc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8b5b      	ldrh	r3, [r3, #26]
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008748:	e23a      	b.n	8008bc0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800874a:	4b98      	ldr	r3, [pc, #608]	@ (80089ac <tcp_process+0x590>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0310 	and.w	r3, r3, #16
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8234 	beq.w	8008bc0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008758:	4b95      	ldr	r3, [pc, #596]	@ (80089b0 <tcp_process+0x594>)
 800875a:	6819      	ldr	r1, [r3, #0]
 800875c:	4b95      	ldr	r3, [pc, #596]	@ (80089b4 <tcp_process+0x598>)
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	4b95      	ldr	r3, [pc, #596]	@ (80089b8 <tcp_process+0x59c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008768:	4b94      	ldr	r3, [pc, #592]	@ (80089bc <tcp_process+0x5a0>)
 800876a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008770:	4a92      	ldr	r2, [pc, #584]	@ (80089bc <tcp_process+0x5a0>)
 8008772:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008774:	8812      	ldrh	r2, [r2, #0]
 8008776:	b292      	uxth	r2, r2
 8008778:	9202      	str	r2, [sp, #8]
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	4b90      	ldr	r3, [pc, #576]	@ (80089c0 <tcp_process+0x5a4>)
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4b90      	ldr	r3, [pc, #576]	@ (80089c4 <tcp_process+0x5a8>)
 8008782:	4602      	mov	r2, r0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f003 f8d7 	bl	800b938 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008790:	2b05      	cmp	r3, #5
 8008792:	f200 8215 	bhi.w	8008bc0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f002 fea3 	bl	800b4e8 <tcp_rexmit_rto>
      break;
 80087a2:	e20d      	b.n	8008bc0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80087a4:	4b81      	ldr	r3, [pc, #516]	@ (80089ac <tcp_process+0x590>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80a1 	beq.w	80088f4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80087b2:	4b7f      	ldr	r3, [pc, #508]	@ (80089b0 <tcp_process+0x594>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	db7e      	blt.n	80088c0 <tcp_process+0x4a4>
 80087c2:	4b7b      	ldr	r3, [pc, #492]	@ (80089b0 <tcp_process+0x594>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dc77      	bgt.n	80088c0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2204      	movs	r2, #4
 80087d4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80087de:	23fa      	movs	r3, #250	@ 0xfa
 80087e0:	76bb      	strb	r3, [r7, #26]
 80087e2:	e01d      	b.n	8008820 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <tcp_process+0x3e0>
 80087ee:	4b76      	ldr	r3, [pc, #472]	@ (80089c8 <tcp_process+0x5ac>)
 80087f0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80087f4:	4975      	ldr	r1, [pc, #468]	@ (80089cc <tcp_process+0x5b0>)
 80087f6:	4876      	ldr	r0, [pc, #472]	@ (80089d0 <tcp_process+0x5b4>)
 80087f8:	f006 f936 	bl	800ea68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <tcp_process+0x400>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6910      	ldr	r0, [r2, #16]
 8008810:	2200      	movs	r2, #0
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4798      	blx	r3
 8008816:	4603      	mov	r3, r0
 8008818:	76bb      	strb	r3, [r7, #26]
 800881a:	e001      	b.n	8008820 <tcp_process+0x404>
 800881c:	23f0      	movs	r3, #240	@ 0xf0
 800881e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008820:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008828:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800882c:	f113 0f0d 	cmn.w	r3, #13
 8008830:	d002      	beq.n	8008838 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fd fe26 	bl	8006484 <tcp_abort>
            }
            return ERR_ABRT;
 8008838:	f06f 030c 	mvn.w	r3, #12
 800883c:	e1ce      	b.n	8008bdc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fae0 	bl	8008e04 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008844:	4b63      	ldr	r3, [pc, #396]	@ (80089d4 <tcp_process+0x5b8>)
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <tcp_process+0x43c>
            recv_acked--;
 800884c:	4b61      	ldr	r3, [pc, #388]	@ (80089d4 <tcp_process+0x5b8>)
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	4b5f      	ldr	r3, [pc, #380]	@ (80089d4 <tcp_process+0x5b8>)
 8008856:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800885c:	009a      	lsls	r2, r3, #2
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008868:	428b      	cmp	r3, r1
 800886a:	bf38      	it	cc
 800886c:	460b      	movcc	r3, r1
 800886e:	429a      	cmp	r2, r3
 8008870:	d204      	bcs.n	800887c <tcp_process+0x460>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	b29b      	uxth	r3, r3
 800887a:	e00d      	b.n	8008898 <tcp_process+0x47c>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008886:	4293      	cmp	r3, r2
 8008888:	d904      	bls.n	8008894 <tcp_process+0x478>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	b29b      	uxth	r3, r3
 8008892:	e001      	b.n	8008898 <tcp_process+0x47c>
 8008894:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800889e:	4b4e      	ldr	r3, [pc, #312]	@ (80089d8 <tcp_process+0x5bc>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d037      	beq.n	800891a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8b5b      	ldrh	r3, [r3, #26]
 80088ae:	f043 0302 	orr.w	r3, r3, #2
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2207      	movs	r2, #7
 80088bc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80088be:	e02c      	b.n	800891a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088c0:	4b3b      	ldr	r3, [pc, #236]	@ (80089b0 <tcp_process+0x594>)
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	4b3b      	ldr	r3, [pc, #236]	@ (80089b4 <tcp_process+0x598>)
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	4b3b      	ldr	r3, [pc, #236]	@ (80089b8 <tcp_process+0x59c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088d0:	4b3a      	ldr	r3, [pc, #232]	@ (80089bc <tcp_process+0x5a0>)
 80088d2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088d4:	885b      	ldrh	r3, [r3, #2]
 80088d6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088d8:	4a38      	ldr	r2, [pc, #224]	@ (80089bc <tcp_process+0x5a0>)
 80088da:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088dc:	8812      	ldrh	r2, [r2, #0]
 80088de:	b292      	uxth	r2, r2
 80088e0:	9202      	str	r2, [sp, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	4b36      	ldr	r3, [pc, #216]	@ (80089c0 <tcp_process+0x5a4>)
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4b36      	ldr	r3, [pc, #216]	@ (80089c4 <tcp_process+0x5a8>)
 80088ea:	4602      	mov	r2, r0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f003 f823 	bl	800b938 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80088f2:	e167      	b.n	8008bc4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80088f4:	4b2d      	ldr	r3, [pc, #180]	@ (80089ac <tcp_process+0x590>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8161 	beq.w	8008bc4 <tcp_process+0x7a8>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008906:	1e5a      	subs	r2, r3, #1
 8008908:	4b2b      	ldr	r3, [pc, #172]	@ (80089b8 <tcp_process+0x59c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	f040 8159 	bne.w	8008bc4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 fe0a 	bl	800b52c <tcp_rexmit>
      break;
 8008918:	e154      	b.n	8008bc4 <tcp_process+0x7a8>
 800891a:	e153      	b.n	8008bc4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fa71 	bl	8008e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008922:	4b2d      	ldr	r3, [pc, #180]	@ (80089d8 <tcp_process+0x5bc>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 814c 	beq.w	8008bc8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8b5b      	ldrh	r3, [r3, #26]
 8008934:	f043 0302 	orr.w	r3, r3, #2
 8008938:	b29a      	uxth	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2207      	movs	r2, #7
 8008942:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008944:	e140      	b.n	8008bc8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa5c 	bl	8008e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800894c:	4b22      	ldr	r3, [pc, #136]	@ (80089d8 <tcp_process+0x5bc>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d071      	beq.n	8008a3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008958:	4b14      	ldr	r3, [pc, #80]	@ (80089ac <tcp_process+0x590>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b00      	cmp	r3, #0
 8008962:	d060      	beq.n	8008a26 <tcp_process+0x60a>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008968:	4b11      	ldr	r3, [pc, #68]	@ (80089b0 <tcp_process+0x594>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d15a      	bne.n	8008a26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008974:	2b00      	cmp	r3, #0
 8008976:	d156      	bne.n	8008a26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8b5b      	ldrh	r3, [r3, #26]
 800897c:	f043 0302 	orr.w	r3, r3, #2
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fe fdbc 	bl	8007504 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800898c:	4b13      	ldr	r3, [pc, #76]	@ (80089dc <tcp_process+0x5c0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d105      	bne.n	80089a2 <tcp_process+0x586>
 8008996:	4b11      	ldr	r3, [pc, #68]	@ (80089dc <tcp_process+0x5c0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a0f      	ldr	r2, [pc, #60]	@ (80089dc <tcp_process+0x5c0>)
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e02e      	b.n	8008a00 <tcp_process+0x5e4>
 80089a2:	4b0e      	ldr	r3, [pc, #56]	@ (80089dc <tcp_process+0x5c0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e027      	b.n	80089fa <tcp_process+0x5de>
 80089aa:	bf00      	nop
 80089ac:	20008348 	.word	0x20008348
 80089b0:	20008340 	.word	0x20008340
 80089b4:	20008346 	.word	0x20008346
 80089b8:	2000833c 	.word	0x2000833c
 80089bc:	2000832c 	.word	0x2000832c
 80089c0:	20004d28 	.word	0x20004d28
 80089c4:	20004d2c 	.word	0x20004d2c
 80089c8:	08010b9c 	.word	0x08010b9c
 80089cc:	08010e3c 	.word	0x08010e3c
 80089d0:	08010be8 	.word	0x08010be8
 80089d4:	20008344 	.word	0x20008344
 80089d8:	20008349 	.word	0x20008349
 80089dc:	20008310 	.word	0x20008310
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d104      	bne.n	80089f4 <tcp_process+0x5d8>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	60da      	str	r2, [r3, #12]
 80089f2:	e005      	b.n	8008a00 <tcp_process+0x5e4>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1ef      	bne.n	80089e0 <tcp_process+0x5c4>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	60da      	str	r2, [r3, #12]
 8008a06:	4b77      	ldr	r3, [pc, #476]	@ (8008be4 <tcp_process+0x7c8>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	220a      	movs	r2, #10
 8008a10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008a12:	4b75      	ldr	r3, [pc, #468]	@ (8008be8 <tcp_process+0x7cc>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]
 8008a1a:	4a73      	ldr	r2, [pc, #460]	@ (8008be8 <tcp_process+0x7cc>)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	f003 f94c 	bl	800bcbc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008a24:	e0d2      	b.n	8008bcc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	8b5b      	ldrh	r3, [r3, #26]
 8008a2a:	f043 0302 	orr.w	r3, r3, #2
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2208      	movs	r2, #8
 8008a38:	751a      	strb	r2, [r3, #20]
      break;
 8008a3a:	e0c7      	b.n	8008bcc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8008bec <tcp_process+0x7d0>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80c1 	beq.w	8008bcc <tcp_process+0x7b0>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a4e:	4b68      	ldr	r3, [pc, #416]	@ (8008bf0 <tcp_process+0x7d4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	f040 80ba 	bne.w	8008bcc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 80b5 	bne.w	8008bcc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2206      	movs	r2, #6
 8008a66:	751a      	strb	r2, [r3, #20]
      break;
 8008a68:	e0b0      	b.n	8008bcc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9ca 	bl	8008e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008a70:	4b60      	ldr	r3, [pc, #384]	@ (8008bf4 <tcp_process+0x7d8>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 80a9 	beq.w	8008bd0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8b5b      	ldrh	r3, [r3, #26]
 8008a82:	f043 0302 	orr.w	r3, r3, #2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7fe fd39 	bl	8007504 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008a92:	4b59      	ldr	r3, [pc, #356]	@ (8008bf8 <tcp_process+0x7dc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d105      	bne.n	8008aa8 <tcp_process+0x68c>
 8008a9c:	4b56      	ldr	r3, [pc, #344]	@ (8008bf8 <tcp_process+0x7dc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	4a55      	ldr	r2, [pc, #340]	@ (8008bf8 <tcp_process+0x7dc>)
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e013      	b.n	8008ad0 <tcp_process+0x6b4>
 8008aa8:	4b53      	ldr	r3, [pc, #332]	@ (8008bf8 <tcp_process+0x7dc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	e00c      	b.n	8008aca <tcp_process+0x6ae>
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d104      	bne.n	8008ac4 <tcp_process+0x6a8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	60da      	str	r2, [r3, #12]
 8008ac2:	e005      	b.n	8008ad0 <tcp_process+0x6b4>
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1ef      	bne.n	8008ab0 <tcp_process+0x694>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	4b43      	ldr	r3, [pc, #268]	@ (8008be4 <tcp_process+0x7c8>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	220a      	movs	r2, #10
 8008ae0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008ae2:	4b41      	ldr	r3, [pc, #260]	@ (8008be8 <tcp_process+0x7cc>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]
 8008aea:	4a3f      	ldr	r2, [pc, #252]	@ (8008be8 <tcp_process+0x7cc>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	f003 f8e4 	bl	800bcbc <tcp_timer_needed>
      }
      break;
 8008af4:	e06c      	b.n	8008bd0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f984 	bl	8008e04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008afc:	4b3b      	ldr	r3, [pc, #236]	@ (8008bec <tcp_process+0x7d0>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d065      	beq.n	8008bd4 <tcp_process+0x7b8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b0c:	4b38      	ldr	r3, [pc, #224]	@ (8008bf0 <tcp_process+0x7d4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d15f      	bne.n	8008bd4 <tcp_process+0x7b8>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d15b      	bne.n	8008bd4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fe fcf1 	bl	8007504 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008b22:	4b35      	ldr	r3, [pc, #212]	@ (8008bf8 <tcp_process+0x7dc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d105      	bne.n	8008b38 <tcp_process+0x71c>
 8008b2c:	4b32      	ldr	r3, [pc, #200]	@ (8008bf8 <tcp_process+0x7dc>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	4a31      	ldr	r2, [pc, #196]	@ (8008bf8 <tcp_process+0x7dc>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	e013      	b.n	8008b60 <tcp_process+0x744>
 8008b38:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf8 <tcp_process+0x7dc>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e00c      	b.n	8008b5a <tcp_process+0x73e>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d104      	bne.n	8008b54 <tcp_process+0x738>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	e005      	b.n	8008b60 <tcp_process+0x744>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1ef      	bne.n	8008b40 <tcp_process+0x724>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	4b1f      	ldr	r3, [pc, #124]	@ (8008be4 <tcp_process+0x7c8>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	220a      	movs	r2, #10
 8008b70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008b72:	4b1d      	ldr	r3, [pc, #116]	@ (8008be8 <tcp_process+0x7cc>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008be8 <tcp_process+0x7cc>)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	f003 f89c 	bl	800bcbc <tcp_timer_needed>
      }
      break;
 8008b84:	e026      	b.n	8008bd4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f93c 	bl	8008e04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008b8c:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <tcp_process+0x7d0>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01f      	beq.n	8008bd8 <tcp_process+0x7bc>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b9c:	4b14      	ldr	r3, [pc, #80]	@ (8008bf0 <tcp_process+0x7d4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d119      	bne.n	8008bd8 <tcp_process+0x7bc>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d115      	bne.n	8008bd8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008bac:	4b11      	ldr	r3, [pc, #68]	@ (8008bf4 <tcp_process+0x7d8>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f043 0310 	orr.w	r3, r3, #16
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf4 <tcp_process+0x7d8>)
 8008bb8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008bba:	e00d      	b.n	8008bd8 <tcp_process+0x7bc>
    default:
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e00c      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e00a      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e008      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bc8:	bf00      	nop
 8008bca:	e006      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bcc:	bf00      	nop
 8008bce:	e004      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bd0:	bf00      	nop
 8008bd2:	e002      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bd4:	bf00      	nop
 8008bd6:	e000      	b.n	8008bda <tcp_process+0x7be>
      break;
 8008bd8:	bf00      	nop
  }
  return ERR_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3724      	adds	r7, #36	@ 0x24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd90      	pop	{r4, r7, pc}
 8008be4:	20008318 	.word	0x20008318
 8008be8:	20008314 	.word	0x20008314
 8008bec:	20008348 	.word	0x20008348
 8008bf0:	20008340 	.word	0x20008340
 8008bf4:	20008349 	.word	0x20008349
 8008bf8:	20008310 	.word	0x20008310

08008bfc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <tcp_oos_insert_segment+0x1e>
 8008c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008cfc <tcp_oos_insert_segment+0x100>)
 8008c0e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008c12:	493b      	ldr	r1, [pc, #236]	@ (8008d00 <tcp_oos_insert_segment+0x104>)
 8008c14:	483b      	ldr	r0, [pc, #236]	@ (8008d04 <tcp_oos_insert_segment+0x108>)
 8008c16:	f005 ff27 	bl	800ea68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	899b      	ldrh	r3, [r3, #12]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fb fa58 	bl	80040d8 <lwip_htons>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d028      	beq.n	8008c86 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008c34:	6838      	ldr	r0, [r7, #0]
 8008c36:	f7fe fa5b 	bl	80070f0 <tcp_segs_free>
    next = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	603b      	str	r3, [r7, #0]
 8008c3e:	e056      	b.n	8008cee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	899b      	ldrh	r3, [r3, #12]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fb fa45 	bl	80040d8 <lwip_htons>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00d      	beq.n	8008c76 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	899b      	ldrh	r3, [r3, #12]
 8008c60:	b29c      	uxth	r4, r3
 8008c62:	2001      	movs	r0, #1
 8008c64:	f7fb fa38 	bl	80040d8 <lwip_htons>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	4322      	orrs	r2, r4
 8008c72:	b292      	uxth	r2, r2
 8008c74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7fe fa4a 	bl	800711a <tcp_seg_free>
    while (next &&
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00e      	beq.n	8008caa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	891b      	ldrh	r3, [r3, #8]
 8008c90:	461a      	mov	r2, r3
 8008c92:	4b1d      	ldr	r3, [pc, #116]	@ (8008d08 <tcp_oos_insert_segment+0x10c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	441a      	add	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	8909      	ldrh	r1, [r1, #8]
 8008ca2:	440b      	add	r3, r1
 8008ca4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	daca      	bge.n	8008c40 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01e      	beq.n	8008cee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	891b      	ldrh	r3, [r3, #8]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4b14      	ldr	r3, [pc, #80]	@ (8008d08 <tcp_oos_insert_segment+0x10c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	441a      	add	r2, r3
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd12      	ble.n	8008cee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <tcp_oos_insert_segment+0x10c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	891b      	ldrh	r3, [r3, #8]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f7fc fbd1 	bl	8005490 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd90      	pop	{r4, r7, pc}
 8008cfc:	08010b9c 	.word	0x08010b9c
 8008d00:	08010e5c 	.word	0x08010e5c
 8008d04:	08010be8 	.word	0x08010be8
 8008d08:	2000833c 	.word	0x2000833c

08008d0c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008d0c:	b5b0      	push	{r4, r5, r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008d1a:	e03e      	b.n	8008d9a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fc fdbe 	bl	80058ac <pbuf_clen>
 8008d30:	4603      	mov	r3, r0
 8008d32:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008d3a:	8a7a      	ldrh	r2, [r7, #18]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d906      	bls.n	8008d4e <tcp_free_acked_segments+0x42>
 8008d40:	4b2a      	ldr	r3, [pc, #168]	@ (8008dec <tcp_free_acked_segments+0xe0>)
 8008d42:	f240 4257 	movw	r2, #1111	@ 0x457
 8008d46:	492a      	ldr	r1, [pc, #168]	@ (8008df0 <tcp_free_acked_segments+0xe4>)
 8008d48:	482a      	ldr	r0, [pc, #168]	@ (8008df4 <tcp_free_acked_segments+0xe8>)
 8008d4a:	f005 fe8d 	bl	800ea68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008d54:	8a7b      	ldrh	r3, [r7, #18]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	891a      	ldrh	r2, [r3, #8]
 8008d64:	4b24      	ldr	r3, [pc, #144]	@ (8008df8 <tcp_free_acked_segments+0xec>)
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	4413      	add	r3, r2
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	4b22      	ldr	r3, [pc, #136]	@ (8008df8 <tcp_free_acked_segments+0xec>)
 8008d6e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008d70:	6978      	ldr	r0, [r7, #20]
 8008d72:	f7fe f9d2 	bl	800711a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <tcp_free_acked_segments+0x8e>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <tcp_free_acked_segments+0x8e>
 8008d8c:	4b17      	ldr	r3, [pc, #92]	@ (8008dec <tcp_free_acked_segments+0xe0>)
 8008d8e:	f240 4261 	movw	r2, #1121	@ 0x461
 8008d92:	491a      	ldr	r1, [pc, #104]	@ (8008dfc <tcp_free_acked_segments+0xf0>)
 8008d94:	4817      	ldr	r0, [pc, #92]	@ (8008df4 <tcp_free_acked_segments+0xe8>)
 8008d96:	f005 fe67 	bl	800ea68 <iprintf>
  while (seg_list != NULL &&
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d020      	beq.n	8008de2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fb f9ac 	bl	8004104 <lwip_htonl>
 8008dac:	4604      	mov	r4, r0
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	891b      	ldrh	r3, [r3, #8]
 8008db2:	461d      	mov	r5, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	899b      	ldrh	r3, [r3, #12]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fb f98b 	bl	80040d8 <lwip_htons>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <tcp_free_acked_segments+0xc6>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <tcp_free_acked_segments+0xc8>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	442b      	add	r3, r5
 8008dd6:	18e2      	adds	r2, r4, r3
 8008dd8:	4b09      	ldr	r3, [pc, #36]	@ (8008e00 <tcp_free_acked_segments+0xf4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	dd9c      	ble.n	8008d1c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008de2:	68bb      	ldr	r3, [r7, #8]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bdb0      	pop	{r4, r5, r7, pc}
 8008dec:	08010b9c 	.word	0x08010b9c
 8008df0:	08010e84 	.word	0x08010e84
 8008df4:	08010be8 	.word	0x08010be8
 8008df8:	20008344 	.word	0x20008344
 8008dfc:	08010eac 	.word	0x08010eac
 8008e00:	20008340 	.word	0x20008340

08008e04 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008e04:	b5b0      	push	{r4, r5, r7, lr}
 8008e06:	b094      	sub	sp, #80	@ 0x50
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <tcp_receive+0x20>
 8008e16:	4b91      	ldr	r3, [pc, #580]	@ (800905c <tcp_receive+0x258>)
 8008e18:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008e1c:	4990      	ldr	r1, [pc, #576]	@ (8009060 <tcp_receive+0x25c>)
 8008e1e:	4891      	ldr	r0, [pc, #580]	@ (8009064 <tcp_receive+0x260>)
 8008e20:	f005 fe22 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7d1b      	ldrb	r3, [r3, #20]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d806      	bhi.n	8008e3a <tcp_receive+0x36>
 8008e2c:	4b8b      	ldr	r3, [pc, #556]	@ (800905c <tcp_receive+0x258>)
 8008e2e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8008e32:	498d      	ldr	r1, [pc, #564]	@ (8009068 <tcp_receive+0x264>)
 8008e34:	488b      	ldr	r0, [pc, #556]	@ (8009064 <tcp_receive+0x260>)
 8008e36:	f005 fe17 	bl	800ea68 <iprintf>

  if (flags & TCP_ACK) {
 8008e3a:	4b8c      	ldr	r3, [pc, #560]	@ (800906c <tcp_receive+0x268>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 0310 	and.w	r3, r3, #16
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8264 	beq.w	8009310 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e4e:	461a      	mov	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e54:	4413      	add	r3, r2
 8008e56:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e5c:	4b84      	ldr	r3, [pc, #528]	@ (8009070 <tcp_receive+0x26c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	db1b      	blt.n	8008e9e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e6a:	4b81      	ldr	r3, [pc, #516]	@ (8009070 <tcp_receive+0x26c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d106      	bne.n	8008e80 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008e76:	4b7f      	ldr	r3, [pc, #508]	@ (8009074 <tcp_receive+0x270>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	db0e      	blt.n	8008e9e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008e84:	4b7b      	ldr	r3, [pc, #492]	@ (8009074 <tcp_receive+0x270>)
 8008e86:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d125      	bne.n	8008ed8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8009078 <tcp_receive+0x274>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	89db      	ldrh	r3, [r3, #14]
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d91c      	bls.n	8008ed8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008e9e:	4b76      	ldr	r3, [pc, #472]	@ (8009078 <tcp_receive+0x274>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	89db      	ldrh	r3, [r3, #14]
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d205      	bcs.n	8008ec8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8008ec8:	4b69      	ldr	r3, [pc, #420]	@ (8009070 <tcp_receive+0x26c>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008ed0:	4b68      	ldr	r3, [pc, #416]	@ (8009074 <tcp_receive+0x270>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008ed8:	4b66      	ldr	r3, [pc, #408]	@ (8009074 <tcp_receive+0x270>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dc58      	bgt.n	8008f98 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008ee6:	4b65      	ldr	r3, [pc, #404]	@ (800907c <tcp_receive+0x278>)
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d14b      	bne.n	8008f86 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8008ef8:	4413      	add	r3, r2
 8008efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d142      	bne.n	8008f86 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	db3d      	blt.n	8008f86 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f0e:	4b59      	ldr	r3, [pc, #356]	@ (8009074 <tcp_receive+0x270>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d137      	bne.n	8008f86 <tcp_receive+0x182>
              found_dupack = 1;
 8008f16:	2301      	movs	r3, #1
 8008f18:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f20:	2bff      	cmp	r3, #255	@ 0xff
 8008f22:	d007      	beq.n	8008f34 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d91b      	bls.n	8008f76 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008f48:	4413      	add	r3, r2
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d30a      	bcc.n	8008f6c <tcp_receive+0x168>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008f60:	4413      	add	r3, r2
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008f6a:	e004      	b.n	8008f76 <tcp_receive+0x172>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d902      	bls.n	8008f86 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f002 fb3f 	bl	800b604 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 8161 	bne.w	8009250 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f96:	e15b      	b.n	8009250 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008f98:	4b36      	ldr	r3, [pc, #216]	@ (8009074 <tcp_receive+0x270>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f2c0 814e 	blt.w	8009246 <tcp_receive+0x442>
 8008faa:	4b32      	ldr	r3, [pc, #200]	@ (8009074 <tcp_receive+0x270>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f300 8146 	bgt.w	8009246 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	8b5b      	ldrh	r3, [r3, #26]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d010      	beq.n	8008fe8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8b5b      	ldrh	r3, [r3, #26]
 8008fca:	f023 0304 	bic.w	r3, r3, #4
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008ff6:	10db      	asrs	r3, r3, #3
 8008ff8:	b21b      	sxth	r3, r3
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009002:	b29b      	uxth	r3, r3
 8009004:	4413      	add	r3, r2
 8009006:	b29b      	uxth	r3, r3
 8009008:	b21a      	sxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009010:	4b18      	ldr	r3, [pc, #96]	@ (8009074 <tcp_receive+0x270>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800901a:	b29b      	uxth	r3, r3
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009028:	4b12      	ldr	r3, [pc, #72]	@ (8009074 <tcp_receive+0x270>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7d1b      	ldrb	r3, [r3, #20]
 8009034:	2b03      	cmp	r3, #3
 8009036:	f240 8097 	bls.w	8009168 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009046:	429a      	cmp	r2, r3
 8009048:	d245      	bcs.n	80090d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	8b5b      	ldrh	r3, [r3, #26]
 800904e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009052:	2b00      	cmp	r3, #0
 8009054:	d014      	beq.n	8009080 <tcp_receive+0x27c>
 8009056:	2301      	movs	r3, #1
 8009058:	e013      	b.n	8009082 <tcp_receive+0x27e>
 800905a:	bf00      	nop
 800905c:	08010b9c 	.word	0x08010b9c
 8009060:	08010ecc 	.word	0x08010ecc
 8009064:	08010be8 	.word	0x08010be8
 8009068:	08010ee8 	.word	0x08010ee8
 800906c:	20008348 	.word	0x20008348
 8009070:	2000833c 	.word	0x2000833c
 8009074:	20008340 	.word	0x20008340
 8009078:	2000832c 	.word	0x2000832c
 800907c:	20008346 	.word	0x20008346
 8009080:	2302      	movs	r3, #2
 8009082:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009086:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800908a:	b29a      	uxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009090:	fb12 f303 	smulbb	r3, r2, r3
 8009094:	b29b      	uxth	r3, r3
 8009096:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009098:	4293      	cmp	r3, r2
 800909a:	bf28      	it	cs
 800909c:	4613      	movcs	r3, r2
 800909e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80090a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80090a8:	4413      	add	r3, r2
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d309      	bcc.n	80090ca <tcp_receive+0x2c6>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80090bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80090be:	4413      	add	r3, r2
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80090c8:	e04e      	b.n	8009168 <tcp_receive+0x364>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80090d4:	e048      	b.n	8009168 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80090dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80090de:	4413      	add	r3, r2
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d309      	bcc.n	8009100 <tcp_receive+0x2fc>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80090f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80090f4:	4413      	add	r3, r2
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80090fe:	e004      	b.n	800910a <tcp_receive+0x306>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009116:	429a      	cmp	r2, r3
 8009118:	d326      	bcc.n	8009168 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800913a:	4413      	add	r3, r2
 800913c:	b29a      	uxth	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009144:	429a      	cmp	r2, r3
 8009146:	d30a      	bcc.n	800915e <tcp_receive+0x35a>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009152:	4413      	add	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800915c:	e004      	b.n	8009168 <tcp_receive+0x364>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009164:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009170:	4a98      	ldr	r2, [pc, #608]	@ (80093d4 <tcp_receive+0x5d0>)
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff fdca 	bl	8008d0c <tcp_free_acked_segments>
 8009178:	4602      	mov	r2, r0
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009186:	4a94      	ldr	r2, [pc, #592]	@ (80093d8 <tcp_receive+0x5d4>)
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff fdbf 	bl	8008d0c <tcp_free_acked_segments>
 800918e:	4602      	mov	r2, r0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091a2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80091a4:	e002      	b.n	80091ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80091c8:	4b84      	ldr	r3, [pc, #528]	@ (80093dc <tcp_receive+0x5d8>)
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	4413      	add	r3, r2
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	8b5b      	ldrh	r3, [r3, #26]
 80091da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d035      	beq.n	800924e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d118      	bne.n	800921c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00c      	beq.n	800920c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fa ff80 	bl	8004104 <lwip_htonl>
 8009204:	4603      	mov	r3, r0
 8009206:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009208:	2b00      	cmp	r3, #0
 800920a:	dc20      	bgt.n	800924e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8b5b      	ldrh	r3, [r3, #26]
 8009210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009214:	b29a      	uxth	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800921a:	e018      	b.n	800924e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	f7fa ff6b 	bl	8004104 <lwip_htonl>
 800922e:	4603      	mov	r3, r0
 8009230:	1ae3      	subs	r3, r4, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	dc0b      	bgt.n	800924e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8b5b      	ldrh	r3, [r3, #26]
 800923a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009244:	e003      	b.n	800924e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f002 fbc8 	bl	800b9dc <tcp_send_empty_ack>
 800924c:	e000      	b.n	8009250 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800924e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009254:	2b00      	cmp	r3, #0
 8009256:	d05b      	beq.n	8009310 <tcp_receive+0x50c>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800925c:	4b60      	ldr	r3, [pc, #384]	@ (80093e0 <tcp_receive+0x5dc>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	da54      	bge.n	8009310 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009266:	4b5f      	ldr	r3, [pc, #380]	@ (80093e4 <tcp_receive+0x5e0>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	b29a      	uxth	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009270:	b29b      	uxth	r3, r3
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	b29b      	uxth	r3, r3
 8009276:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800927a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009284:	10db      	asrs	r3, r3, #3
 8009286:	b21b      	sxth	r3, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	b29b      	uxth	r3, r3
 800928e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009298:	b29a      	uxth	r2, r3
 800929a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800929e:	4413      	add	r3, r2
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	b21a      	sxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80092a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da05      	bge.n	80092bc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80092b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80092b4:	425b      	negs	r3, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80092bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80092c6:	109b      	asrs	r3, r3, #2
 80092c8:	b21b      	sxth	r3, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80092e0:	4413      	add	r3, r2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	b21a      	sxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80092f0:	10db      	asrs	r3, r3, #3
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	4413      	add	r3, r2
 8009300:	b29b      	uxth	r3, r3
 8009302:	b21a      	sxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009310:	4b35      	ldr	r3, [pc, #212]	@ (80093e8 <tcp_receive+0x5e4>)
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 84df 	beq.w	8009cd8 <tcp_receive+0xed4>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7d1b      	ldrb	r3, [r3, #20]
 800931e:	2b06      	cmp	r3, #6
 8009320:	f200 84da 	bhi.w	8009cd8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009328:	4b30      	ldr	r3, [pc, #192]	@ (80093ec <tcp_receive+0x5e8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	3b01      	subs	r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	f2c0 808f 	blt.w	8009454 <tcp_receive+0x650>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800933a:	4b2b      	ldr	r3, [pc, #172]	@ (80093e8 <tcp_receive+0x5e4>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	4619      	mov	r1, r3
 8009340:	4b2a      	ldr	r3, [pc, #168]	@ (80093ec <tcp_receive+0x5e8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	440b      	add	r3, r1
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	3301      	adds	r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	f300 8082 	bgt.w	8009454 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009350:	4b27      	ldr	r3, [pc, #156]	@ (80093f0 <tcp_receive+0x5ec>)
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800935a:	4b24      	ldr	r3, [pc, #144]	@ (80093ec <tcp_receive+0x5e8>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009362:	4b23      	ldr	r3, [pc, #140]	@ (80093f0 <tcp_receive+0x5ec>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <tcp_receive+0x574>
 800936a:	4b22      	ldr	r3, [pc, #136]	@ (80093f4 <tcp_receive+0x5f0>)
 800936c:	f240 5294 	movw	r2, #1428	@ 0x594
 8009370:	4921      	ldr	r1, [pc, #132]	@ (80093f8 <tcp_receive+0x5f4>)
 8009372:	4822      	ldr	r0, [pc, #136]	@ (80093fc <tcp_receive+0x5f8>)
 8009374:	f005 fb78 	bl	800ea68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800937e:	4293      	cmp	r3, r2
 8009380:	d906      	bls.n	8009390 <tcp_receive+0x58c>
 8009382:	4b1c      	ldr	r3, [pc, #112]	@ (80093f4 <tcp_receive+0x5f0>)
 8009384:	f240 5295 	movw	r2, #1429	@ 0x595
 8009388:	491d      	ldr	r1, [pc, #116]	@ (8009400 <tcp_receive+0x5fc>)
 800938a:	481c      	ldr	r0, [pc, #112]	@ (80093fc <tcp_receive+0x5f8>)
 800938c:	f005 fb6c 	bl	800ea68 <iprintf>
      off = (u16_t)off32;
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009396:	4b16      	ldr	r3, [pc, #88]	@ (80093f0 <tcp_receive+0x5ec>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d906      	bls.n	80093b2 <tcp_receive+0x5ae>
 80093a4:	4b13      	ldr	r3, [pc, #76]	@ (80093f4 <tcp_receive+0x5f0>)
 80093a6:	f240 5297 	movw	r2, #1431	@ 0x597
 80093aa:	4916      	ldr	r1, [pc, #88]	@ (8009404 <tcp_receive+0x600>)
 80093ac:	4813      	ldr	r0, [pc, #76]	@ (80093fc <tcp_receive+0x5f8>)
 80093ae:	f005 fb5b 	bl	800ea68 <iprintf>
      inseg.len -= off;
 80093b2:	4b0f      	ldr	r3, [pc, #60]	@ (80093f0 <tcp_receive+0x5ec>)
 80093b4:	891a      	ldrh	r2, [r3, #8]
 80093b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	b29a      	uxth	r2, r3
 80093be:	4b0c      	ldr	r3, [pc, #48]	@ (80093f0 <tcp_receive+0x5ec>)
 80093c0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80093c2:	4b0b      	ldr	r3, [pc, #44]	@ (80093f0 <tcp_receive+0x5ec>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	891a      	ldrh	r2, [r3, #8]
 80093c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80093d0:	e02a      	b.n	8009428 <tcp_receive+0x624>
 80093d2:	bf00      	nop
 80093d4:	08010f04 	.word	0x08010f04
 80093d8:	08010f0c 	.word	0x08010f0c
 80093dc:	20008344 	.word	0x20008344
 80093e0:	20008340 	.word	0x20008340
 80093e4:	20008304 	.word	0x20008304
 80093e8:	20008346 	.word	0x20008346
 80093ec:	2000833c 	.word	0x2000833c
 80093f0:	2000831c 	.word	0x2000831c
 80093f4:	08010b9c 	.word	0x08010b9c
 80093f8:	08010f14 	.word	0x08010f14
 80093fc:	08010be8 	.word	0x08010be8
 8009400:	08010f24 	.word	0x08010f24
 8009404:	08010f34 	.word	0x08010f34
        off -= p->len;
 8009408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800940a:	895b      	ldrh	r3, [r3, #10]
 800940c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009418:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800941a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800941c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800941e:	2200      	movs	r2, #0
 8009420:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800942a:	895b      	ldrh	r3, [r3, #10]
 800942c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009430:	429a      	cmp	r2, r3
 8009432:	d8e9      	bhi.n	8009408 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009438:	4619      	mov	r1, r3
 800943a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800943c:	f7fc f928 	bl	8005690 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009444:	4a90      	ldr	r2, [pc, #576]	@ (8009688 <tcp_receive+0x884>)
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	4b90      	ldr	r3, [pc, #576]	@ (800968c <tcp_receive+0x888>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	4a8e      	ldr	r2, [pc, #568]	@ (8009688 <tcp_receive+0x884>)
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009452:	e00d      	b.n	8009470 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009454:	4b8c      	ldr	r3, [pc, #560]	@ (8009688 <tcp_receive+0x884>)
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	da06      	bge.n	8009470 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8b5b      	ldrh	r3, [r3, #26]
 8009466:	f043 0302 	orr.w	r3, r3, #2
 800946a:	b29a      	uxth	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009470:	4b85      	ldr	r3, [pc, #532]	@ (8009688 <tcp_receive+0x884>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	f2c0 8427 	blt.w	8009cce <tcp_receive+0xeca>
 8009480:	4b81      	ldr	r3, [pc, #516]	@ (8009688 <tcp_receive+0x884>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800948c:	440b      	add	r3, r1
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	3301      	adds	r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	f300 841b 	bgt.w	8009cce <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800949c:	4b7a      	ldr	r3, [pc, #488]	@ (8009688 <tcp_receive+0x884>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	f040 8298 	bne.w	80099d6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80094a6:	4b79      	ldr	r3, [pc, #484]	@ (800968c <tcp_receive+0x888>)
 80094a8:	891c      	ldrh	r4, [r3, #8]
 80094aa:	4b78      	ldr	r3, [pc, #480]	@ (800968c <tcp_receive+0x888>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	899b      	ldrh	r3, [r3, #12]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fa fe10 	bl	80040d8 <lwip_htons>
 80094b8:	4603      	mov	r3, r0
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <tcp_receive+0x6c4>
 80094c4:	2301      	movs	r3, #1
 80094c6:	e000      	b.n	80094ca <tcp_receive+0x6c6>
 80094c8:	2300      	movs	r3, #0
 80094ca:	4423      	add	r3, r4
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	4b70      	ldr	r3, [pc, #448]	@ (8009690 <tcp_receive+0x88c>)
 80094d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80094d6:	4b6e      	ldr	r3, [pc, #440]	@ (8009690 <tcp_receive+0x88c>)
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d274      	bcs.n	80095c8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80094de:	4b6b      	ldr	r3, [pc, #428]	@ (800968c <tcp_receive+0x888>)
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	899b      	ldrh	r3, [r3, #12]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fa fdf6 	bl	80040d8 <lwip_htons>
 80094ec:	4603      	mov	r3, r0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01e      	beq.n	8009536 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80094f8:	4b64      	ldr	r3, [pc, #400]	@ (800968c <tcp_receive+0x888>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	899b      	ldrh	r3, [r3, #12]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	b21b      	sxth	r3, r3
 8009502:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009506:	b21c      	sxth	r4, r3
 8009508:	4b60      	ldr	r3, [pc, #384]	@ (800968c <tcp_receive+0x888>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	899b      	ldrh	r3, [r3, #12]
 800950e:	b29b      	uxth	r3, r3
 8009510:	4618      	mov	r0, r3
 8009512:	f7fa fde1 	bl	80040d8 <lwip_htons>
 8009516:	4603      	mov	r3, r0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800951e:	b29b      	uxth	r3, r3
 8009520:	4618      	mov	r0, r3
 8009522:	f7fa fdd9 	bl	80040d8 <lwip_htons>
 8009526:	4603      	mov	r3, r0
 8009528:	b21b      	sxth	r3, r3
 800952a:	4323      	orrs	r3, r4
 800952c:	b21a      	sxth	r2, r3
 800952e:	4b57      	ldr	r3, [pc, #348]	@ (800968c <tcp_receive+0x888>)
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	b292      	uxth	r2, r2
 8009534:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800953a:	4b54      	ldr	r3, [pc, #336]	@ (800968c <tcp_receive+0x888>)
 800953c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800953e:	4b53      	ldr	r3, [pc, #332]	@ (800968c <tcp_receive+0x888>)
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	899b      	ldrh	r3, [r3, #12]
 8009544:	b29b      	uxth	r3, r3
 8009546:	4618      	mov	r0, r3
 8009548:	f7fa fdc6 	bl	80040d8 <lwip_htons>
 800954c:	4603      	mov	r3, r0
 800954e:	b2db      	uxtb	r3, r3
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <tcp_receive+0x760>
            inseg.len -= 1;
 8009558:	4b4c      	ldr	r3, [pc, #304]	@ (800968c <tcp_receive+0x888>)
 800955a:	891b      	ldrh	r3, [r3, #8]
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	4b4a      	ldr	r3, [pc, #296]	@ (800968c <tcp_receive+0x888>)
 8009562:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009564:	4b49      	ldr	r3, [pc, #292]	@ (800968c <tcp_receive+0x888>)
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4a48      	ldr	r2, [pc, #288]	@ (800968c <tcp_receive+0x888>)
 800956a:	8912      	ldrh	r2, [r2, #8]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7fb ff8e 	bl	8005490 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009574:	4b45      	ldr	r3, [pc, #276]	@ (800968c <tcp_receive+0x888>)
 8009576:	891c      	ldrh	r4, [r3, #8]
 8009578:	4b44      	ldr	r3, [pc, #272]	@ (800968c <tcp_receive+0x888>)
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	899b      	ldrh	r3, [r3, #12]
 800957e:	b29b      	uxth	r3, r3
 8009580:	4618      	mov	r0, r3
 8009582:	f7fa fda9 	bl	80040d8 <lwip_htons>
 8009586:	4603      	mov	r3, r0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <tcp_receive+0x792>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <tcp_receive+0x794>
 8009596:	2300      	movs	r3, #0
 8009598:	4423      	add	r3, r4
 800959a:	b29a      	uxth	r2, r3
 800959c:	4b3c      	ldr	r3, [pc, #240]	@ (8009690 <tcp_receive+0x88c>)
 800959e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80095a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009690 <tcp_receive+0x88c>)
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	4b38      	ldr	r3, [pc, #224]	@ (8009688 <tcp_receive+0x884>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	441a      	add	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80095b4:	440b      	add	r3, r1
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d006      	beq.n	80095c8 <tcp_receive+0x7c4>
 80095ba:	4b36      	ldr	r3, [pc, #216]	@ (8009694 <tcp_receive+0x890>)
 80095bc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80095c0:	4935      	ldr	r1, [pc, #212]	@ (8009698 <tcp_receive+0x894>)
 80095c2:	4836      	ldr	r0, [pc, #216]	@ (800969c <tcp_receive+0x898>)
 80095c4:	f005 fa50 	bl	800ea68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80e6 	beq.w	800979e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80095d2:	4b2e      	ldr	r3, [pc, #184]	@ (800968c <tcp_receive+0x888>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	899b      	ldrh	r3, [r3, #12]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fa fd7c 	bl	80040d8 <lwip_htons>
 80095e0:	4603      	mov	r3, r0
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d010      	beq.n	800960e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80095ec:	e00a      	b.n	8009604 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7fd fd8b 	bl	800711a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f0      	bne.n	80095ee <tcp_receive+0x7ea>
 800960c:	e0c7      	b.n	800979e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009612:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009614:	e051      	b.n	80096ba <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	899b      	ldrh	r3, [r3, #12]
 800961c:	b29b      	uxth	r3, r3
 800961e:	4618      	mov	r0, r3
 8009620:	f7fa fd5a 	bl	80040d8 <lwip_htons>
 8009624:	4603      	mov	r3, r0
 8009626:	b2db      	uxtb	r3, r3
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d03c      	beq.n	80096aa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009630:	4b16      	ldr	r3, [pc, #88]	@ (800968c <tcp_receive+0x888>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	899b      	ldrh	r3, [r3, #12]
 8009636:	b29b      	uxth	r3, r3
 8009638:	4618      	mov	r0, r3
 800963a:	f7fa fd4d 	bl	80040d8 <lwip_htons>
 800963e:	4603      	mov	r3, r0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009646:	2b00      	cmp	r3, #0
 8009648:	d12f      	bne.n	80096aa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800964a:	4b10      	ldr	r3, [pc, #64]	@ (800968c <tcp_receive+0x888>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	899b      	ldrh	r3, [r3, #12]
 8009650:	b29c      	uxth	r4, r3
 8009652:	2001      	movs	r0, #1
 8009654:	f7fa fd40 	bl	80040d8 <lwip_htons>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	4b0b      	ldr	r3, [pc, #44]	@ (800968c <tcp_receive+0x888>)
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	4322      	orrs	r2, r4
 8009662:	b292      	uxth	r2, r2
 8009664:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <tcp_receive+0x888>)
 8009668:	891c      	ldrh	r4, [r3, #8]
 800966a:	4b08      	ldr	r3, [pc, #32]	@ (800968c <tcp_receive+0x888>)
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	899b      	ldrh	r3, [r3, #12]
 8009670:	b29b      	uxth	r3, r3
 8009672:	4618      	mov	r0, r3
 8009674:	f7fa fd30 	bl	80040d8 <lwip_htons>
 8009678:	4603      	mov	r3, r0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00d      	beq.n	80096a0 <tcp_receive+0x89c>
 8009684:	2301      	movs	r3, #1
 8009686:	e00c      	b.n	80096a2 <tcp_receive+0x89e>
 8009688:	2000833c 	.word	0x2000833c
 800968c:	2000831c 	.word	0x2000831c
 8009690:	20008346 	.word	0x20008346
 8009694:	08010b9c 	.word	0x08010b9c
 8009698:	08010f44 	.word	0x08010f44
 800969c:	08010be8 	.word	0x08010be8
 80096a0:	2300      	movs	r3, #0
 80096a2:	4423      	add	r3, r4
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	4b98      	ldr	r3, [pc, #608]	@ (8009908 <tcp_receive+0xb04>)
 80096a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80096aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 80096ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80096b4:	6938      	ldr	r0, [r7, #16]
 80096b6:	f7fd fd30 	bl	800711a <tcp_seg_free>
            while (next &&
 80096ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00e      	beq.n	80096de <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80096c0:	4b91      	ldr	r3, [pc, #580]	@ (8009908 <tcp_receive+0xb04>)
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	4b91      	ldr	r3, [pc, #580]	@ (800990c <tcp_receive+0xb08>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	441a      	add	r2, r3
 80096cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096d4:	8909      	ldrh	r1, [r1, #8]
 80096d6:	440b      	add	r3, r1
 80096d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80096da:	2b00      	cmp	r3, #0
 80096dc:	da9b      	bge.n	8009616 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80096de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d059      	beq.n	8009798 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80096e4:	4b88      	ldr	r3, [pc, #544]	@ (8009908 <tcp_receive+0xb04>)
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	4b88      	ldr	r3, [pc, #544]	@ (800990c <tcp_receive+0xb08>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	441a      	add	r2, r3
 80096f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dd4d      	ble.n	8009798 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80096fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	b29a      	uxth	r2, r3
 8009704:	4b81      	ldr	r3, [pc, #516]	@ (800990c <tcp_receive+0xb08>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	b29a      	uxth	r2, r3
 800970e:	4b80      	ldr	r3, [pc, #512]	@ (8009910 <tcp_receive+0xb0c>)
 8009710:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009712:	4b7f      	ldr	r3, [pc, #508]	@ (8009910 <tcp_receive+0xb0c>)
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	899b      	ldrh	r3, [r3, #12]
 8009718:	b29b      	uxth	r3, r3
 800971a:	4618      	mov	r0, r3
 800971c:	f7fa fcdc 	bl	80040d8 <lwip_htons>
 8009720:	4603      	mov	r3, r0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d005      	beq.n	8009738 <tcp_receive+0x934>
                inseg.len -= 1;
 800972c:	4b78      	ldr	r3, [pc, #480]	@ (8009910 <tcp_receive+0xb0c>)
 800972e:	891b      	ldrh	r3, [r3, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	4b76      	ldr	r3, [pc, #472]	@ (8009910 <tcp_receive+0xb0c>)
 8009736:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009738:	4b75      	ldr	r3, [pc, #468]	@ (8009910 <tcp_receive+0xb0c>)
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	4a74      	ldr	r2, [pc, #464]	@ (8009910 <tcp_receive+0xb0c>)
 800973e:	8912      	ldrh	r2, [r2, #8]
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7fb fea4 	bl	8005490 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009748:	4b71      	ldr	r3, [pc, #452]	@ (8009910 <tcp_receive+0xb0c>)
 800974a:	891c      	ldrh	r4, [r3, #8]
 800974c:	4b70      	ldr	r3, [pc, #448]	@ (8009910 <tcp_receive+0xb0c>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	899b      	ldrh	r3, [r3, #12]
 8009752:	b29b      	uxth	r3, r3
 8009754:	4618      	mov	r0, r3
 8009756:	f7fa fcbf 	bl	80040d8 <lwip_htons>
 800975a:	4603      	mov	r3, r0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <tcp_receive+0x966>
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <tcp_receive+0x968>
 800976a:	2300      	movs	r3, #0
 800976c:	4423      	add	r3, r4
 800976e:	b29a      	uxth	r2, r3
 8009770:	4b65      	ldr	r3, [pc, #404]	@ (8009908 <tcp_receive+0xb04>)
 8009772:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009774:	4b64      	ldr	r3, [pc, #400]	@ (8009908 <tcp_receive+0xb04>)
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	4b64      	ldr	r3, [pc, #400]	@ (800990c <tcp_receive+0xb08>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	441a      	add	r2, r3
 8009780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d006      	beq.n	8009798 <tcp_receive+0x994>
 800978a:	4b62      	ldr	r3, [pc, #392]	@ (8009914 <tcp_receive+0xb10>)
 800978c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009790:	4961      	ldr	r1, [pc, #388]	@ (8009918 <tcp_receive+0xb14>)
 8009792:	4862      	ldr	r0, [pc, #392]	@ (800991c <tcp_receive+0xb18>)
 8009794:	f005 f968 	bl	800ea68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800979c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800979e:	4b5a      	ldr	r3, [pc, #360]	@ (8009908 <tcp_receive+0xb04>)
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	4b59      	ldr	r3, [pc, #356]	@ (800990c <tcp_receive+0xb08>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	441a      	add	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80097b2:	4b55      	ldr	r3, [pc, #340]	@ (8009908 <tcp_receive+0xb04>)
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d206      	bcs.n	80097c8 <tcp_receive+0x9c4>
 80097ba:	4b56      	ldr	r3, [pc, #344]	@ (8009914 <tcp_receive+0xb10>)
 80097bc:	f240 6207 	movw	r2, #1543	@ 0x607
 80097c0:	4957      	ldr	r1, [pc, #348]	@ (8009920 <tcp_receive+0xb1c>)
 80097c2:	4856      	ldr	r0, [pc, #344]	@ (800991c <tcp_receive+0xb18>)
 80097c4:	f005 f950 	bl	800ea68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80097cc:	4b4e      	ldr	r3, [pc, #312]	@ (8009908 <tcp_receive+0xb04>)
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7fc fe5f 	bl	800649c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80097de:	4b4c      	ldr	r3, [pc, #304]	@ (8009910 <tcp_receive+0xb0c>)
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	891b      	ldrh	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d006      	beq.n	80097f6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80097e8:	4b49      	ldr	r3, [pc, #292]	@ (8009910 <tcp_receive+0xb0c>)
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	4a4d      	ldr	r2, [pc, #308]	@ (8009924 <tcp_receive+0xb20>)
 80097ee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80097f0:	4b47      	ldr	r3, [pc, #284]	@ (8009910 <tcp_receive+0xb0c>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80097f6:	4b46      	ldr	r3, [pc, #280]	@ (8009910 <tcp_receive+0xb0c>)
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	899b      	ldrh	r3, [r3, #12]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fa fc6a 	bl	80040d8 <lwip_htons>
 8009804:	4603      	mov	r3, r0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 80b8 	beq.w	8009982 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009812:	4b45      	ldr	r3, [pc, #276]	@ (8009928 <tcp_receive+0xb24>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f043 0320 	orr.w	r3, r3, #32
 800981a:	b2da      	uxtb	r2, r3
 800981c:	4b42      	ldr	r3, [pc, #264]	@ (8009928 <tcp_receive+0xb24>)
 800981e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009820:	e0af      	b.n	8009982 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009826:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a36      	ldr	r2, [pc, #216]	@ (800990c <tcp_receive+0xb08>)
 8009832:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	891b      	ldrh	r3, [r3, #8]
 8009838:	461c      	mov	r4, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	899b      	ldrh	r3, [r3, #12]
 8009840:	b29b      	uxth	r3, r3
 8009842:	4618      	mov	r0, r3
 8009844:	f7fa fc48 	bl	80040d8 <lwip_htons>
 8009848:	4603      	mov	r3, r0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <tcp_receive+0xa54>
 8009854:	2301      	movs	r3, #1
 8009856:	e000      	b.n	800985a <tcp_receive+0xa56>
 8009858:	2300      	movs	r3, #0
 800985a:	191a      	adds	r2, r3, r4
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009860:	441a      	add	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800986a:	461c      	mov	r4, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	891b      	ldrh	r3, [r3, #8]
 8009870:	461d      	mov	r5, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	899b      	ldrh	r3, [r3, #12]
 8009878:	b29b      	uxth	r3, r3
 800987a:	4618      	mov	r0, r3
 800987c:	f7fa fc2c 	bl	80040d8 <lwip_htons>
 8009880:	4603      	mov	r3, r0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <tcp_receive+0xa8c>
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <tcp_receive+0xa8e>
 8009890:	2300      	movs	r3, #0
 8009892:	442b      	add	r3, r5
 8009894:	429c      	cmp	r4, r3
 8009896:	d206      	bcs.n	80098a6 <tcp_receive+0xaa2>
 8009898:	4b1e      	ldr	r3, [pc, #120]	@ (8009914 <tcp_receive+0xb10>)
 800989a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800989e:	4923      	ldr	r1, [pc, #140]	@ (800992c <tcp_receive+0xb28>)
 80098a0:	481e      	ldr	r0, [pc, #120]	@ (800991c <tcp_receive+0xb18>)
 80098a2:	f005 f8e1 	bl	800ea68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	891b      	ldrh	r3, [r3, #8]
 80098aa:	461c      	mov	r4, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	899b      	ldrh	r3, [r3, #12]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fa fc0f 	bl	80040d8 <lwip_htons>
 80098ba:	4603      	mov	r3, r0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <tcp_receive+0xac6>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <tcp_receive+0xac8>
 80098ca:	2300      	movs	r3, #0
 80098cc:	1919      	adds	r1, r3, r4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80098d2:	b28b      	uxth	r3, r1
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7fc fddd 	bl	800649c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	891b      	ldrh	r3, [r3, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d028      	beq.n	800993e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80098ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009924 <tcp_receive+0xb20>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01d      	beq.n	8009930 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80098f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009924 <tcp_receive+0xb20>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7fc f80e 	bl	8005920 <pbuf_cat>
 8009904:	e018      	b.n	8009938 <tcp_receive+0xb34>
 8009906:	bf00      	nop
 8009908:	20008346 	.word	0x20008346
 800990c:	2000833c 	.word	0x2000833c
 8009910:	2000831c 	.word	0x2000831c
 8009914:	08010b9c 	.word	0x08010b9c
 8009918:	08010f7c 	.word	0x08010f7c
 800991c:	08010be8 	.word	0x08010be8
 8009920:	08010fb8 	.word	0x08010fb8
 8009924:	2000834c 	.word	0x2000834c
 8009928:	20008349 	.word	0x20008349
 800992c:	08010fd8 	.word	0x08010fd8
            } else {
              recv_data = cseg->p;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	4a70      	ldr	r2, [pc, #448]	@ (8009af8 <tcp_receive+0xcf4>)
 8009936:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2200      	movs	r2, #0
 800993c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	899b      	ldrh	r3, [r3, #12]
 8009944:	b29b      	uxth	r3, r3
 8009946:	4618      	mov	r0, r3
 8009948:	f7fa fbc6 	bl	80040d8 <lwip_htons>
 800994c:	4603      	mov	r3, r0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009958:	4b68      	ldr	r3, [pc, #416]	@ (8009afc <tcp_receive+0xcf8>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f043 0320 	orr.w	r3, r3, #32
 8009960:	b2da      	uxtb	r2, r3
 8009962:	4b66      	ldr	r3, [pc, #408]	@ (8009afc <tcp_receive+0xcf8>)
 8009964:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7d1b      	ldrb	r3, [r3, #20]
 800996a:	2b04      	cmp	r3, #4
 800996c:	d102      	bne.n	8009974 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2207      	movs	r2, #7
 8009972:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800997c:	68b8      	ldr	r0, [r7, #8]
 800997e:	f7fd fbcc 	bl	800711a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009986:	2b00      	cmp	r3, #0
 8009988:	d008      	beq.n	800999c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009996:	429a      	cmp	r2, r3
 8009998:	f43f af43 	beq.w	8009822 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	8b5b      	ldrh	r3, [r3, #26]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00e      	beq.n	80099c6 <tcp_receive+0xbc2>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8b5b      	ldrh	r3, [r3, #26]
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	835a      	strh	r2, [r3, #26]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	8b5b      	ldrh	r3, [r3, #26]
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80099c4:	e187      	b.n	8009cd6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8b5b      	ldrh	r3, [r3, #26]
 80099ca:	f043 0301 	orr.w	r3, r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80099d4:	e17f      	b.n	8009cd6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80099de:	4848      	ldr	r0, [pc, #288]	@ (8009b00 <tcp_receive+0xcfc>)
 80099e0:	f7fd fbb4 	bl	800714c <tcp_seg_copy>
 80099e4:	4602      	mov	r2, r0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80099ea:	e16c      	b.n	8009cc6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80099f6:	e156      	b.n	8009ca6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	4b41      	ldr	r3, [pc, #260]	@ (8009b04 <tcp_receive+0xd00>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d11d      	bne.n	8009a42 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009a06:	4b3e      	ldr	r3, [pc, #248]	@ (8009b00 <tcp_receive+0xcfc>)
 8009a08:	891a      	ldrh	r2, [r3, #8]
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	891b      	ldrh	r3, [r3, #8]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	f240 814e 	bls.w	8009cb0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a14:	483a      	ldr	r0, [pc, #232]	@ (8009b00 <tcp_receive+0xcfc>)
 8009a16:	f7fd fb99 	bl	800714c <tcp_seg_copy>
 8009a1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 8148 	beq.w	8009cb4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8009a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e002      	b.n	8009a38 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009a38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009a3a:	6978      	ldr	r0, [r7, #20]
 8009a3c:	f7ff f8de 	bl	8008bfc <tcp_oos_insert_segment>
                }
                break;
 8009a40:	e138      	b.n	8009cb4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d117      	bne.n	8009a78 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009a48:	4b2e      	ldr	r3, [pc, #184]	@ (8009b04 <tcp_receive+0xd00>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	da57      	bge.n	8009b08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a58:	4829      	ldr	r0, [pc, #164]	@ (8009b00 <tcp_receive+0xcfc>)
 8009a5a:	f7fd fb77 	bl	800714c <tcp_seg_copy>
 8009a5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 8128 	beq.w	8009cb8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009a6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009a70:	69b8      	ldr	r0, [r7, #24]
 8009a72:	f7ff f8c3 	bl	8008bfc <tcp_oos_insert_segment>
                  }
                  break;
 8009a76:	e11f      	b.n	8009cb8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009a78:	4b22      	ldr	r3, [pc, #136]	@ (8009b04 <tcp_receive+0xd00>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	db3e      	blt.n	8009b08 <tcp_receive+0xd04>
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b04 <tcp_receive+0xd00>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	3301      	adds	r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc35      	bgt.n	8009b08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a9c:	4818      	ldr	r0, [pc, #96]	@ (8009b00 <tcp_receive+0xcfc>)
 8009a9e:	f7fd fb55 	bl	800714c <tcp_seg_copy>
 8009aa2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 8108 	beq.w	8009cbc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ab4:	8912      	ldrh	r2, [r2, #8]
 8009ab6:	441a      	add	r2, r3
 8009ab8:	4b12      	ldr	r3, [pc, #72]	@ (8009b04 <tcp_receive+0xd00>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dd12      	ble.n	8009ae8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009ac2:	4b10      	ldr	r3, [pc, #64]	@ (8009b04 <tcp_receive+0xd00>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ade:	891b      	ldrh	r3, [r3, #8]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fb fcd4 	bl	8005490 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aea:	69fa      	ldr	r2, [r7, #28]
 8009aec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009aee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009af0:	69f8      	ldr	r0, [r7, #28]
 8009af2:	f7ff f883 	bl	8008bfc <tcp_oos_insert_segment>
                  }
                  break;
 8009af6:	e0e1      	b.n	8009cbc <tcp_receive+0xeb8>
 8009af8:	2000834c 	.word	0x2000834c
 8009afc:	20008349 	.word	0x20008349
 8009b00:	2000831c 	.word	0x2000831c
 8009b04:	2000833c 	.word	0x2000833c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 80c5 	bne.w	8009ca0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009b16:	4b7f      	ldr	r3, [pc, #508]	@ (8009d14 <tcp_receive+0xf10>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f340 80bc 	ble.w	8009ca0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	899b      	ldrh	r3, [r3, #12]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fa fad1 	bl	80040d8 <lwip_htons>
 8009b36:	4603      	mov	r3, r0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f040 80be 	bne.w	8009cc0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009b44:	4874      	ldr	r0, [pc, #464]	@ (8009d18 <tcp_receive+0xf14>)
 8009b46:	f7fd fb01 	bl	800714c <tcp_seg_copy>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80b5 	beq.w	8009cc4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b62:	8912      	ldrh	r2, [r2, #8]
 8009b64:	441a      	add	r2, r3
 8009b66:	4b6b      	ldr	r3, [pc, #428]	@ (8009d14 <tcp_receive+0xf10>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dd12      	ble.n	8009b96 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009b70:	4b68      	ldr	r3, [pc, #416]	@ (8009d14 <tcp_receive+0xf10>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b84:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	891b      	ldrh	r3, [r3, #8]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f7fb fc7d 	bl	8005490 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009b96:	4b61      	ldr	r3, [pc, #388]	@ (8009d1c <tcp_receive+0xf18>)
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8009d14 <tcp_receive+0xf10>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	441a      	add	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009baa:	440b      	add	r3, r1
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f340 8088 	ble.w	8009cc4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	899b      	ldrh	r3, [r3, #12]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fa fa8a 	bl	80040d8 <lwip_htons>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d021      	beq.n	8009c14 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	899b      	ldrh	r3, [r3, #12]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	b21b      	sxth	r3, r3
 8009bdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009be0:	b21c      	sxth	r4, r3
 8009be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	899b      	ldrh	r3, [r3, #12]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fa fa73 	bl	80040d8 <lwip_htons>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fa fa6b 	bl	80040d8 <lwip_htons>
 8009c02:	4603      	mov	r3, r0
 8009c04:	b21b      	sxth	r3, r3
 8009c06:	4323      	orrs	r3, r4
 8009c08:	b21a      	sxth	r2, r3
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	b292      	uxth	r2, r2
 8009c12:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c1e:	4413      	add	r3, r2
 8009c20:	b299      	uxth	r1, r3
 8009c22:	4b3c      	ldr	r3, [pc, #240]	@ (8009d14 <tcp_receive+0xf10>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	1a8a      	subs	r2, r1, r2
 8009c2e:	b292      	uxth	r2, r2
 8009c30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	891b      	ldrh	r3, [r3, #8]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4610      	mov	r0, r2
 8009c42:	f7fb fc25 	bl	8005490 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	891c      	ldrh	r4, [r3, #8]
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	899b      	ldrh	r3, [r3, #12]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fa fa3e 	bl	80040d8 <lwip_htons>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <tcp_receive+0xe68>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e000      	b.n	8009c6e <tcp_receive+0xe6a>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4423      	add	r3, r4
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	4b2a      	ldr	r3, [pc, #168]	@ (8009d1c <tcp_receive+0xf18>)
 8009c74:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009c76:	4b29      	ldr	r3, [pc, #164]	@ (8009d1c <tcp_receive+0xf18>)
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	4b25      	ldr	r3, [pc, #148]	@ (8009d14 <tcp_receive+0xf10>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	441a      	add	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009c8a:	440b      	add	r3, r1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d019      	beq.n	8009cc4 <tcp_receive+0xec0>
 8009c90:	4b23      	ldr	r3, [pc, #140]	@ (8009d20 <tcp_receive+0xf1c>)
 8009c92:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009c96:	4923      	ldr	r1, [pc, #140]	@ (8009d24 <tcp_receive+0xf20>)
 8009c98:	4823      	ldr	r0, [pc, #140]	@ (8009d28 <tcp_receive+0xf24>)
 8009c9a:	f004 fee5 	bl	800ea68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009c9e:	e011      	b.n	8009cc4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f47f aea5 	bne.w	80099f8 <tcp_receive+0xbf4>
 8009cae:	e00a      	b.n	8009cc6 <tcp_receive+0xec2>
                break;
 8009cb0:	bf00      	nop
 8009cb2:	e008      	b.n	8009cc6 <tcp_receive+0xec2>
                break;
 8009cb4:	bf00      	nop
 8009cb6:	e006      	b.n	8009cc6 <tcp_receive+0xec2>
                  break;
 8009cb8:	bf00      	nop
 8009cba:	e004      	b.n	8009cc6 <tcp_receive+0xec2>
                  break;
 8009cbc:	bf00      	nop
 8009cbe:	e002      	b.n	8009cc6 <tcp_receive+0xec2>
                  break;
 8009cc0:	bf00      	nop
 8009cc2:	e000      	b.n	8009cc6 <tcp_receive+0xec2>
                break;
 8009cc4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 fe88 	bl	800b9dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009ccc:	e003      	b.n	8009cd6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 fe84 	bl	800b9dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009cd4:	e01a      	b.n	8009d0c <tcp_receive+0xf08>
 8009cd6:	e019      	b.n	8009d0c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d14 <tcp_receive+0xf10>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	db0a      	blt.n	8009cfc <tcp_receive+0xef8>
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <tcp_receive+0xf10>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009cf2:	440b      	add	r3, r1
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dd07      	ble.n	8009d0c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	8b5b      	ldrh	r3, [r3, #26]
 8009d00:	f043 0302 	orr.w	r3, r3, #2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009d0a:	e7ff      	b.n	8009d0c <tcp_receive+0xf08>
 8009d0c:	bf00      	nop
 8009d0e:	3750      	adds	r7, #80	@ 0x50
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bdb0      	pop	{r4, r5, r7, pc}
 8009d14:	2000833c 	.word	0x2000833c
 8009d18:	2000831c 	.word	0x2000831c
 8009d1c:	20008346 	.word	0x20008346
 8009d20:	08010b9c 	.word	0x08010b9c
 8009d24:	08010f44 	.word	0x08010f44
 8009d28:	08010be8 	.word	0x08010be8

08009d2c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009d32:	4b15      	ldr	r3, [pc, #84]	@ (8009d88 <tcp_get_next_optbyte+0x5c>)
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	b291      	uxth	r1, r2
 8009d3a:	4a13      	ldr	r2, [pc, #76]	@ (8009d88 <tcp_get_next_optbyte+0x5c>)
 8009d3c:	8011      	strh	r1, [r2, #0]
 8009d3e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009d40:	4b12      	ldr	r3, [pc, #72]	@ (8009d8c <tcp_get_next_optbyte+0x60>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <tcp_get_next_optbyte+0x26>
 8009d48:	4b11      	ldr	r3, [pc, #68]	@ (8009d90 <tcp_get_next_optbyte+0x64>)
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	88fa      	ldrh	r2, [r7, #6]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d208      	bcs.n	8009d64 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009d52:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <tcp_get_next_optbyte+0x68>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3314      	adds	r3, #20
 8009d58:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	4413      	add	r3, r2
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	e00b      	b.n	8009d7c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009d64:	88fb      	ldrh	r3, [r7, #6]
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <tcp_get_next_optbyte+0x64>)
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009d72:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <tcp_get_next_optbyte+0x60>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	797b      	ldrb	r3, [r7, #5]
 8009d78:	4413      	add	r3, r2
 8009d7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20008338 	.word	0x20008338
 8009d8c:	20008334 	.word	0x20008334
 8009d90:	20008332 	.word	0x20008332
 8009d94:	2000832c 	.word	0x2000832c

08009d98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d106      	bne.n	8009db4 <tcp_parseopt+0x1c>
 8009da6:	4b32      	ldr	r3, [pc, #200]	@ (8009e70 <tcp_parseopt+0xd8>)
 8009da8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009dac:	4931      	ldr	r1, [pc, #196]	@ (8009e74 <tcp_parseopt+0xdc>)
 8009dae:	4832      	ldr	r0, [pc, #200]	@ (8009e78 <tcp_parseopt+0xe0>)
 8009db0:	f004 fe5a 	bl	800ea68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009db4:	4b31      	ldr	r3, [pc, #196]	@ (8009e7c <tcp_parseopt+0xe4>)
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d056      	beq.n	8009e6a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009dbc:	4b30      	ldr	r3, [pc, #192]	@ (8009e80 <tcp_parseopt+0xe8>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	e046      	b.n	8009e52 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009dc4:	f7ff ffb2 	bl	8009d2c <tcp_get_next_optbyte>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d006      	beq.n	8009de0 <tcp_parseopt+0x48>
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	dc2a      	bgt.n	8009e2c <tcp_parseopt+0x94>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d042      	beq.n	8009e60 <tcp_parseopt+0xc8>
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d038      	beq.n	8009e50 <tcp_parseopt+0xb8>
 8009dde:	e025      	b.n	8009e2c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009de0:	f7ff ffa4 	bl	8009d2c <tcp_get_next_optbyte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d13c      	bne.n	8009e64 <tcp_parseopt+0xcc>
 8009dea:	4b25      	ldr	r3, [pc, #148]	@ (8009e80 <tcp_parseopt+0xe8>)
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	4a22      	ldr	r2, [pc, #136]	@ (8009e7c <tcp_parseopt+0xe4>)
 8009df2:	8812      	ldrh	r2, [r2, #0]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	da35      	bge.n	8009e64 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009df8:	f7ff ff98 	bl	8009d2c <tcp_get_next_optbyte>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009e02:	f7ff ff93 	bl	8009d2c <tcp_get_next_optbyte>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	89bb      	ldrh	r3, [r7, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009e10:	89bb      	ldrh	r3, [r7, #12]
 8009e12:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009e16:	d804      	bhi.n	8009e22 <tcp_parseopt+0x8a>
 8009e18:	89bb      	ldrh	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <tcp_parseopt+0x8a>
 8009e1e:	89ba      	ldrh	r2, [r7, #12]
 8009e20:	e001      	b.n	8009e26 <tcp_parseopt+0x8e>
 8009e22:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8009e2a:	e012      	b.n	8009e52 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009e2c:	f7ff ff7e 	bl	8009d2c <tcp_get_next_optbyte>
 8009e30:	4603      	mov	r3, r0
 8009e32:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d916      	bls.n	8009e68 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009e3a:	7afb      	ldrb	r3, [r7, #11]
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	4b10      	ldr	r3, [pc, #64]	@ (8009e80 <tcp_parseopt+0xe8>)
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	4413      	add	r3, r2
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	3b02      	subs	r3, #2
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <tcp_parseopt+0xe8>)
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	e000      	b.n	8009e52 <tcp_parseopt+0xba>
          break;
 8009e50:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009e52:	4b0b      	ldr	r3, [pc, #44]	@ (8009e80 <tcp_parseopt+0xe8>)
 8009e54:	881a      	ldrh	r2, [r3, #0]
 8009e56:	4b09      	ldr	r3, [pc, #36]	@ (8009e7c <tcp_parseopt+0xe4>)
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d3b2      	bcc.n	8009dc4 <tcp_parseopt+0x2c>
 8009e5e:	e004      	b.n	8009e6a <tcp_parseopt+0xd2>
          return;
 8009e60:	bf00      	nop
 8009e62:	e002      	b.n	8009e6a <tcp_parseopt+0xd2>
            return;
 8009e64:	bf00      	nop
 8009e66:	e000      	b.n	8009e6a <tcp_parseopt+0xd2>
            return;
 8009e68:	bf00      	nop
      }
    }
  }
}
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	08010b9c 	.word	0x08010b9c
 8009e74:	08011000 	.word	0x08011000
 8009e78:	08010be8 	.word	0x08010be8
 8009e7c:	20008330 	.word	0x20008330
 8009e80:	20008338 	.word	0x20008338

08009e84 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <tcp_trigger_input_pcb_close+0x1c>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f043 0310 	orr.w	r3, r3, #16
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	4b03      	ldr	r3, [pc, #12]	@ (8009ea0 <tcp_trigger_input_pcb_close+0x1c>)
 8009e94:	701a      	strb	r2, [r3, #0]
}
 8009e96:	bf00      	nop
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	20008349 	.word	0x20008349

08009ea4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <tcp_route+0x28>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	7a1b      	ldrb	r3, [r3, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d006      	beq.n	8009ecc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	7a1b      	ldrb	r3, [r3, #8]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fb f90a 	bl	80050dc <netif_get_by_index>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	e003      	b.n	8009ed4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f003 fad3 	bl	800d478 <ip4_route>
 8009ed2:	4603      	mov	r3, r0
  }
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <tcp_create_segment+0x22>
 8009ef2:	4b43      	ldr	r3, [pc, #268]	@ (800a000 <tcp_create_segment+0x124>)
 8009ef4:	22a3      	movs	r2, #163	@ 0xa3
 8009ef6:	4943      	ldr	r1, [pc, #268]	@ (800a004 <tcp_create_segment+0x128>)
 8009ef8:	4843      	ldr	r0, [pc, #268]	@ (800a008 <tcp_create_segment+0x12c>)
 8009efa:	f004 fdb5 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d105      	bne.n	8009f10 <tcp_create_segment+0x34>
 8009f04:	4b3e      	ldr	r3, [pc, #248]	@ (800a000 <tcp_create_segment+0x124>)
 8009f06:	22a4      	movs	r2, #164	@ 0xa4
 8009f08:	4940      	ldr	r1, [pc, #256]	@ (800a00c <tcp_create_segment+0x130>)
 8009f0a:	483f      	ldr	r0, [pc, #252]	@ (800a008 <tcp_create_segment+0x12c>)
 8009f0c:	f004 fdac 	bl	800ea68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009f10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f1e:	2004      	movs	r0, #4
 8009f20:	f7fa fd52 	bl	80049c8 <memp_malloc>
 8009f24:	6138      	str	r0, [r7, #16]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d104      	bne.n	8009f36 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009f2c:	68b8      	ldr	r0, [r7, #8]
 8009f2e:	f7fb fc35 	bl	800579c <pbuf_free>
    return NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e060      	b.n	8009ff8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009f3c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	891a      	ldrh	r2, [r3, #8]
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d205      	bcs.n	8009f62 <tcp_create_segment+0x86>
 8009f56:	4b2a      	ldr	r3, [pc, #168]	@ (800a000 <tcp_create_segment+0x124>)
 8009f58:	22b0      	movs	r2, #176	@ 0xb0
 8009f5a:	492d      	ldr	r1, [pc, #180]	@ (800a010 <tcp_create_segment+0x134>)
 8009f5c:	482a      	ldr	r0, [pc, #168]	@ (800a008 <tcp_create_segment+0x12c>)
 8009f5e:	f004 fd83 	bl	800ea68 <iprintf>
  seg->len = p->tot_len - optlen;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	891a      	ldrh	r2, [r3, #8]
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009f72:	2114      	movs	r1, #20
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f7fb fb7b 	bl	8005670 <pbuf_add_header>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009f80:	6938      	ldr	r0, [r7, #16]
 8009f82:	f7fd f8ca 	bl	800711a <tcp_seg_free>
    return NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e036      	b.n	8009ff8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8ada      	ldrh	r2, [r3, #22]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68dc      	ldr	r4, [r3, #12]
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fa f89b 	bl	80040d8 <lwip_htons>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8b1a      	ldrh	r2, [r3, #24]
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	68dc      	ldr	r4, [r3, #12]
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f7fa f892 	bl	80040d8 <lwip_htons>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	68dc      	ldr	r4, [r3, #12]
 8009fbc:	6838      	ldr	r0, [r7, #0]
 8009fbe:	f7fa f8a1 	bl	8004104 <lwip_htonl>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
 8009fc8:	089b      	lsrs	r3, r3, #2
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	3305      	adds	r3, #5
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	031b      	lsls	r3, r3, #12
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	79fb      	ldrb	r3, [r7, #7]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	68dc      	ldr	r4, [r3, #12]
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f7fa f879 	bl	80040d8 <lwip_htons>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	749a      	strb	r2, [r3, #18]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	74da      	strb	r2, [r3, #19]
  return seg;
 8009ff6:	693b      	ldr	r3, [r7, #16]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd90      	pop	{r4, r7, pc}
 800a000:	0801101c 	.word	0x0801101c
 800a004:	08011050 	.word	0x08011050
 800a008:	08011070 	.word	0x08011070
 800a00c:	08011098 	.word	0x08011098
 800a010:	080110bc 	.word	0x080110bc

0800a014 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	607b      	str	r3, [r7, #4]
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]
 800a020:	460b      	mov	r3, r1
 800a022:	81bb      	strh	r3, [r7, #12]
 800a024:	4613      	mov	r3, r2
 800a026:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a028:	89bb      	ldrh	r3, [r7, #12]
 800a02a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <tcp_pbuf_prealloc+0x2a>
 800a032:	4b30      	ldr	r3, [pc, #192]	@ (800a0f4 <tcp_pbuf_prealloc+0xe0>)
 800a034:	22e8      	movs	r2, #232	@ 0xe8
 800a036:	4930      	ldr	r1, [pc, #192]	@ (800a0f8 <tcp_pbuf_prealloc+0xe4>)
 800a038:	4830      	ldr	r0, [pc, #192]	@ (800a0fc <tcp_pbuf_prealloc+0xe8>)
 800a03a:	f004 fd15 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d105      	bne.n	800a050 <tcp_pbuf_prealloc+0x3c>
 800a044:	4b2b      	ldr	r3, [pc, #172]	@ (800a0f4 <tcp_pbuf_prealloc+0xe0>)
 800a046:	22e9      	movs	r2, #233	@ 0xe9
 800a048:	492d      	ldr	r1, [pc, #180]	@ (800a100 <tcp_pbuf_prealloc+0xec>)
 800a04a:	482c      	ldr	r0, [pc, #176]	@ (800a0fc <tcp_pbuf_prealloc+0xe8>)
 800a04c:	f004 fd0c 	bl	800ea68 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a050:	89ba      	ldrh	r2, [r7, #12]
 800a052:	897b      	ldrh	r3, [r7, #10]
 800a054:	429a      	cmp	r2, r3
 800a056:	d221      	bcs.n	800a09c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a058:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d111      	bne.n	800a088 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	8b5b      	ldrh	r3, [r3, #26]
 800a068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d115      	bne.n	800a09c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a070:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a074:	2b00      	cmp	r3, #0
 800a076:	d007      	beq.n	800a088 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800a084:	2b00      	cmp	r3, #0
 800a086:	d009      	beq.n	800a09c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a088:	89bb      	ldrh	r3, [r7, #12]
 800a08a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800a08e:	f023 0203 	bic.w	r2, r3, #3
 800a092:	897b      	ldrh	r3, [r7, #10]
 800a094:	4293      	cmp	r3, r2
 800a096:	bf28      	it	cs
 800a098:	4613      	movcs	r3, r2
 800a09a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a09c:	8af9      	ldrh	r1, [r7, #22]
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fb f895 	bl	80051d4 <pbuf_alloc>
 800a0aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e019      	b.n	800a0ea <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <tcp_pbuf_prealloc+0xb8>
 800a0be:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f4 <tcp_pbuf_prealloc+0xe0>)
 800a0c0:	f240 120b 	movw	r2, #267	@ 0x10b
 800a0c4:	490f      	ldr	r1, [pc, #60]	@ (800a104 <tcp_pbuf_prealloc+0xf0>)
 800a0c6:	480d      	ldr	r0, [pc, #52]	@ (800a0fc <tcp_pbuf_prealloc+0xe8>)
 800a0c8:	f004 fcce 	bl	800ea68 <iprintf>
  *oversize = p->len - length;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	895a      	ldrh	r2, [r3, #10]
 800a0d0:	89bb      	ldrh	r3, [r7, #12]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	89ba      	ldrh	r2, [r7, #12]
 800a0de:	811a      	strh	r2, [r3, #8]
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	891a      	ldrh	r2, [r3, #8]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	815a      	strh	r2, [r3, #10]
  return p;
 800a0e8:	693b      	ldr	r3, [r7, #16]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3718      	adds	r7, #24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0801101c 	.word	0x0801101c
 800a0f8:	080110d4 	.word	0x080110d4
 800a0fc:	08011070 	.word	0x08011070
 800a100:	080110f8 	.word	0x080110f8
 800a104:	08011118 	.word	0x08011118

0800a108 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <tcp_write_checks+0x20>
 800a11a:	4b33      	ldr	r3, [pc, #204]	@ (800a1e8 <tcp_write_checks+0xe0>)
 800a11c:	f240 1233 	movw	r2, #307	@ 0x133
 800a120:	4932      	ldr	r1, [pc, #200]	@ (800a1ec <tcp_write_checks+0xe4>)
 800a122:	4833      	ldr	r0, [pc, #204]	@ (800a1f0 <tcp_write_checks+0xe8>)
 800a124:	f004 fca0 	bl	800ea68 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7d1b      	ldrb	r3, [r3, #20]
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d00e      	beq.n	800a14e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a134:	2b07      	cmp	r3, #7
 800a136:	d00a      	beq.n	800a14e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d006      	beq.n	800a14e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a144:	2b03      	cmp	r3, #3
 800a146:	d002      	beq.n	800a14e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a148:	f06f 030a 	mvn.w	r3, #10
 800a14c:	e048      	b.n	800a1e0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a14e:	887b      	ldrh	r3, [r7, #2]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <tcp_write_checks+0x50>
    return ERR_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	e043      	b.n	800a1e0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a15e:	887a      	ldrh	r2, [r7, #2]
 800a160:	429a      	cmp	r2, r3
 800a162:	d909      	bls.n	800a178 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	8b5b      	ldrh	r3, [r3, #26]
 800a168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	e033      	b.n	800a1e0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d909      	bls.n	800a196 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	8b5b      	ldrh	r3, [r3, #26]
 800a186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a190:	f04f 33ff 	mov.w	r3, #4294967295
 800a194:	e024      	b.n	800a1e0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00f      	beq.n	800a1c0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d11a      	bne.n	800a1de <tcp_write_checks+0xd6>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d116      	bne.n	800a1de <tcp_write_checks+0xd6>
 800a1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e8 <tcp_write_checks+0xe0>)
 800a1b2:	f240 1255 	movw	r2, #341	@ 0x155
 800a1b6:	490f      	ldr	r1, [pc, #60]	@ (800a1f4 <tcp_write_checks+0xec>)
 800a1b8:	480d      	ldr	r0, [pc, #52]	@ (800a1f0 <tcp_write_checks+0xe8>)
 800a1ba:	f004 fc55 	bl	800ea68 <iprintf>
 800a1be:	e00e      	b.n	800a1de <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <tcp_write_checks+0xc8>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <tcp_write_checks+0xd6>
 800a1d0:	4b05      	ldr	r3, [pc, #20]	@ (800a1e8 <tcp_write_checks+0xe0>)
 800a1d2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800a1d6:	4908      	ldr	r1, [pc, #32]	@ (800a1f8 <tcp_write_checks+0xf0>)
 800a1d8:	4805      	ldr	r0, [pc, #20]	@ (800a1f0 <tcp_write_checks+0xe8>)
 800a1da:	f004 fc45 	bl	800ea68 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	0801101c 	.word	0x0801101c
 800a1ec:	0801112c 	.word	0x0801112c
 800a1f0:	08011070 	.word	0x08011070
 800a1f4:	0801114c 	.word	0x0801114c
 800a1f8:	08011188 	.word	0x08011188

0800a1fc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a1fc:	b590      	push	{r4, r7, lr}
 800a1fe:	b09b      	sub	sp, #108	@ 0x6c
 800a200:	af04      	add	r7, sp, #16
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	460b      	mov	r3, r1
 800a20c:	80fb      	strh	r3, [r7, #6]
 800a20e:	4613      	mov	r3, r2
 800a210:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a216:	2300      	movs	r3, #0
 800a218:	653b      	str	r3, [r7, #80]	@ 0x50
 800a21a:	2300      	movs	r3, #0
 800a21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a21e:	2300      	movs	r3, #0
 800a220:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a222:	2300      	movs	r3, #0
 800a224:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a226:	2300      	movs	r3, #0
 800a228:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d109      	bne.n	800a258 <tcp_write+0x5c>
 800a244:	4ba4      	ldr	r3, [pc, #656]	@ (800a4d8 <tcp_write+0x2dc>)
 800a246:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800a24a:	49a4      	ldr	r1, [pc, #656]	@ (800a4dc <tcp_write+0x2e0>)
 800a24c:	48a4      	ldr	r0, [pc, #656]	@ (800a4e0 <tcp_write+0x2e4>)
 800a24e:	f004 fc0b 	bl	800ea68 <iprintf>
 800a252:	f06f 030f 	mvn.w	r3, #15
 800a256:	e32a      	b.n	800a8ae <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a25e:	085b      	lsrs	r3, r3, #1
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a266:	4293      	cmp	r3, r2
 800a268:	bf28      	it	cs
 800a26a:	4613      	movcs	r3, r2
 800a26c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a26e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <tcp_write+0x7e>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a278:	e000      	b.n	800a27c <tcp_write+0x80>
 800a27a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a27c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <tcp_write+0x9c>
 800a284:	4b94      	ldr	r3, [pc, #592]	@ (800a4d8 <tcp_write+0x2dc>)
 800a286:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800a28a:	4996      	ldr	r1, [pc, #600]	@ (800a4e4 <tcp_write+0x2e8>)
 800a28c:	4894      	ldr	r0, [pc, #592]	@ (800a4e0 <tcp_write+0x2e4>)
 800a28e:	f004 fbeb 	bl	800ea68 <iprintf>
 800a292:	f06f 030f 	mvn.w	r3, #15
 800a296:	e30a      	b.n	800a8ae <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	4619      	mov	r1, r3
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff ff33 	bl	800a108 <tcp_write_checks>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800a2a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <tcp_write+0xba>
    return err;
 800a2b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800a2b4:	e2fb      	b.n	800a8ae <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a2bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 80f6 	beq.w	800a4bc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2d6:	e002      	b.n	800a2de <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a2d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1f8      	bne.n	800a2d8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2e8:	7a9b      	ldrb	r3, [r3, #10]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a2f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a2f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2f8:	891b      	ldrh	r3, [r3, #8]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	8c3b      	ldrh	r3, [r7, #32]
 800a2fe:	440b      	add	r3, r1
 800a300:	429a      	cmp	r2, r3
 800a302:	da06      	bge.n	800a312 <tcp_write+0x116>
 800a304:	4b74      	ldr	r3, [pc, #464]	@ (800a4d8 <tcp_write+0x2dc>)
 800a306:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a30a:	4977      	ldr	r1, [pc, #476]	@ (800a4e8 <tcp_write+0x2ec>)
 800a30c:	4874      	ldr	r0, [pc, #464]	@ (800a4e0 <tcp_write+0x2e4>)
 800a30e:	f004 fbab 	bl	800ea68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a314:	891a      	ldrh	r2, [r3, #8]
 800a316:	8c3b      	ldrh	r3, [r7, #32]
 800a318:	4413      	add	r3, r2
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a328:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a32a:	8a7b      	ldrh	r3, [r7, #18]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d026      	beq.n	800a37e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a330:	8a7b      	ldrh	r3, [r7, #18]
 800a332:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a334:	429a      	cmp	r2, r3
 800a336:	d206      	bcs.n	800a346 <tcp_write+0x14a>
 800a338:	4b67      	ldr	r3, [pc, #412]	@ (800a4d8 <tcp_write+0x2dc>)
 800a33a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800a33e:	496b      	ldr	r1, [pc, #428]	@ (800a4ec <tcp_write+0x2f0>)
 800a340:	4867      	ldr	r0, [pc, #412]	@ (800a4e0 <tcp_write+0x2e4>)
 800a342:	f004 fb91 	bl	800ea68 <iprintf>
      seg = last_unsent;
 800a346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a348:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a34a:	8a7b      	ldrh	r3, [r7, #18]
 800a34c:	88fa      	ldrh	r2, [r7, #6]
 800a34e:	4293      	cmp	r3, r2
 800a350:	bf28      	it	cs
 800a352:	4613      	movcs	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a358:	4293      	cmp	r3, r2
 800a35a:	bf28      	it	cs
 800a35c:	4613      	movcs	r3, r2
 800a35e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800a360:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a364:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a366:	4413      	add	r3, r2
 800a368:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800a36c:	8a7a      	ldrh	r2, [r7, #18]
 800a36e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a376:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a378:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a37e:	8a7b      	ldrh	r3, [r7, #18]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <tcp_write+0x1a0>
 800a384:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a388:	88fb      	ldrh	r3, [r7, #6]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d006      	beq.n	800a39c <tcp_write+0x1a0>
 800a38e:	4b52      	ldr	r3, [pc, #328]	@ (800a4d8 <tcp_write+0x2dc>)
 800a390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a394:	4956      	ldr	r1, [pc, #344]	@ (800a4f0 <tcp_write+0x2f4>)
 800a396:	4852      	ldr	r0, [pc, #328]	@ (800a4e0 <tcp_write+0x2e4>)
 800a398:	f004 fb66 	bl	800ea68 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a39c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	f080 8167 	bcs.w	800a676 <tcp_write+0x47a>
 800a3a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 8163 	beq.w	800a676 <tcp_write+0x47a>
 800a3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3b2:	891b      	ldrh	r3, [r3, #8]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 815e 	beq.w	800a676 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a3ba:	88fa      	ldrh	r2, [r7, #6]
 800a3bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfa8      	it	ge
 800a3c8:	4613      	movge	r3, r2
 800a3ca:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a3d0:	797b      	ldrb	r3, [r7, #5]
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d027      	beq.n	800a42a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a3da:	f107 0012 	add.w	r0, r7, #18
 800a3de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a3e0:	8bf9      	ldrh	r1, [r7, #30]
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	797b      	ldrb	r3, [r7, #5]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	f7ff fe0f 	bl	800a014 <tcp_pbuf_prealloc>
 800a3f6:	6578      	str	r0, [r7, #84]	@ 0x54
 800a3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 8225 	beq.w	800a84a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a402:	6858      	ldr	r0, [r3, #4]
 800a404:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	4413      	add	r3, r2
 800a40c:	8bfa      	ldrh	r2, [r7, #30]
 800a40e:	4619      	mov	r1, r3
 800a410:	f004 fc05 	bl	800ec1e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a414:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a416:	f7fb fa49 	bl	80058ac <pbuf_clen>
 800a41a:	4603      	mov	r3, r0
 800a41c:	461a      	mov	r2, r3
 800a41e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a422:	4413      	add	r3, r2
 800a424:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a428:	e041      	b.n	800a4ae <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a430:	e002      	b.n	800a438 <tcp_write+0x23c>
 800a432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
 800a438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1f8      	bne.n	800a432 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a442:	7b1b      	ldrb	r3, [r3, #12]
 800a444:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d115      	bne.n	800a478 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a452:	8952      	ldrh	r2, [r2, #10]
 800a454:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d10d      	bne.n	800a478 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a45c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a460:	2b00      	cmp	r3, #0
 800a462:	d006      	beq.n	800a472 <tcp_write+0x276>
 800a464:	4b1c      	ldr	r3, [pc, #112]	@ (800a4d8 <tcp_write+0x2dc>)
 800a466:	f240 2231 	movw	r2, #561	@ 0x231
 800a46a:	4922      	ldr	r1, [pc, #136]	@ (800a4f4 <tcp_write+0x2f8>)
 800a46c:	481c      	ldr	r0, [pc, #112]	@ (800a4e0 <tcp_write+0x2e4>)
 800a46e:	f004 fafb 	bl	800ea68 <iprintf>
          extendlen = seglen;
 800a472:	8bfb      	ldrh	r3, [r7, #30]
 800a474:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a476:	e01a      	b.n	800a4ae <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a478:	8bfb      	ldrh	r3, [r7, #30]
 800a47a:	2201      	movs	r2, #1
 800a47c:	4619      	mov	r1, r3
 800a47e:	2000      	movs	r0, #0
 800a480:	f7fa fea8 	bl	80051d4 <pbuf_alloc>
 800a484:	6578      	str	r0, [r7, #84]	@ 0x54
 800a486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 81e0 	beq.w	800a84e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a48e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	441a      	add	r2, r3
 800a496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a498:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a49a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a49c:	f7fb fa06 	bl	80058ac <pbuf_clen>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a4ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a4b2:	8bfb      	ldrh	r3, [r7, #30]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a4ba:	e0dc      	b.n	800a676 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80d7 	beq.w	800a676 <tcp_write+0x47a>
 800a4c8:	4b03      	ldr	r3, [pc, #12]	@ (800a4d8 <tcp_write+0x2dc>)
 800a4ca:	f240 224a 	movw	r2, #586	@ 0x24a
 800a4ce:	490a      	ldr	r1, [pc, #40]	@ (800a4f8 <tcp_write+0x2fc>)
 800a4d0:	4803      	ldr	r0, [pc, #12]	@ (800a4e0 <tcp_write+0x2e4>)
 800a4d2:	f004 fac9 	bl	800ea68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a4d6:	e0ce      	b.n	800a676 <tcp_write+0x47a>
 800a4d8:	0801101c 	.word	0x0801101c
 800a4dc:	080111bc 	.word	0x080111bc
 800a4e0:	08011070 	.word	0x08011070
 800a4e4:	080111d4 	.word	0x080111d4
 800a4e8:	08011208 	.word	0x08011208
 800a4ec:	08011220 	.word	0x08011220
 800a4f0:	08011240 	.word	0x08011240
 800a4f4:	08011260 	.word	0x08011260
 800a4f8:	0801128c 	.word	0x0801128c
    struct pbuf *p;
    u16_t left = len - pos;
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a506:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a512:	8b7a      	ldrh	r2, [r7, #26]
 800a514:	8bbb      	ldrh	r3, [r7, #28]
 800a516:	4293      	cmp	r3, r2
 800a518:	bf28      	it	cs
 800a51a:	4613      	movcs	r3, r2
 800a51c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a51e:	797b      	ldrb	r3, [r7, #5]
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d036      	beq.n	800a596 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a528:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	8b3b      	ldrh	r3, [r7, #24]
 800a530:	4413      	add	r3, r2
 800a532:	b299      	uxth	r1, r3
 800a534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a536:	2b00      	cmp	r3, #0
 800a538:	bf0c      	ite	eq
 800a53a:	2301      	moveq	r3, #1
 800a53c:	2300      	movne	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f107 0012 	add.w	r0, r7, #18
 800a544:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a546:	9302      	str	r3, [sp, #8]
 800a548:	797b      	ldrb	r3, [r7, #5]
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4603      	mov	r3, r0
 800a552:	2036      	movs	r0, #54	@ 0x36
 800a554:	f7ff fd5e 	bl	800a014 <tcp_pbuf_prealloc>
 800a558:	6338      	str	r0, [r7, #48]	@ 0x30
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8178 	beq.w	800a852 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	895b      	ldrh	r3, [r3, #10]
 800a566:	8b3a      	ldrh	r2, [r7, #24]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d906      	bls.n	800a57a <tcp_write+0x37e>
 800a56c:	4b8c      	ldr	r3, [pc, #560]	@ (800a7a0 <tcp_write+0x5a4>)
 800a56e:	f240 2266 	movw	r2, #614	@ 0x266
 800a572:	498c      	ldr	r1, [pc, #560]	@ (800a7a4 <tcp_write+0x5a8>)
 800a574:	488c      	ldr	r0, [pc, #560]	@ (800a7a8 <tcp_write+0x5ac>)
 800a576:	f004 fa77 	bl	800ea68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a582:	18d0      	adds	r0, r2, r3
 800a584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	4413      	add	r3, r2
 800a58c:	8b3a      	ldrh	r2, [r7, #24]
 800a58e:	4619      	mov	r1, r3
 800a590:	f004 fb45 	bl	800ec1e <memcpy>
 800a594:	e02f      	b.n	800a5f6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a596:	8a7b      	ldrh	r3, [r7, #18]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d006      	beq.n	800a5aa <tcp_write+0x3ae>
 800a59c:	4b80      	ldr	r3, [pc, #512]	@ (800a7a0 <tcp_write+0x5a4>)
 800a59e:	f240 2271 	movw	r2, #625	@ 0x271
 800a5a2:	4982      	ldr	r1, [pc, #520]	@ (800a7ac <tcp_write+0x5b0>)
 800a5a4:	4880      	ldr	r0, [pc, #512]	@ (800a7a8 <tcp_write+0x5ac>)
 800a5a6:	f004 fa5f 	bl	800ea68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a5aa:	8b3b      	ldrh	r3, [r7, #24]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	2036      	movs	r0, #54	@ 0x36
 800a5b2:	f7fa fe0f 	bl	80051d4 <pbuf_alloc>
 800a5b6:	6178      	str	r0, [r7, #20]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 814b 	beq.w	800a856 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a5c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	441a      	add	r2, r3
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a5cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	2036      	movs	r0, #54	@ 0x36
 800a5da:	f7fa fdfb 	bl	80051d4 <pbuf_alloc>
 800a5de:	6338      	str	r0, [r7, #48]	@ 0x30
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d103      	bne.n	800a5ee <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a5e6:	6978      	ldr	r0, [r7, #20]
 800a5e8:	f7fb f8d8 	bl	800579c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a5ec:	e136      	b.n	800a85c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5f2:	f7fb f995 	bl	8005920 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a5f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5f8:	f7fb f958 	bl	80058ac <pbuf_clen>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	461a      	mov	r2, r3
 800a600:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a604:	4413      	add	r3, r2
 800a606:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a60a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a60e:	2b09      	cmp	r3, #9
 800a610:	d903      	bls.n	800a61a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a614:	f7fb f8c2 	bl	800579c <pbuf_free>
      goto memerr;
 800a618:	e120      	b.n	800a85c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a61e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a622:	441a      	add	r2, r3
 800a624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4613      	mov	r3, r2
 800a62c:	2200      	movs	r2, #0
 800a62e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff fc53 	bl	8009edc <tcp_create_segment>
 800a636:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 810d 	beq.w	800a85a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <tcp_write+0x450>
      queue = seg;
 800a646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a648:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64a:	e00c      	b.n	800a666 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a64c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <tcp_write+0x464>
 800a652:	4b53      	ldr	r3, [pc, #332]	@ (800a7a0 <tcp_write+0x5a4>)
 800a654:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800a658:	4955      	ldr	r1, [pc, #340]	@ (800a7b0 <tcp_write+0x5b4>)
 800a65a:	4853      	ldr	r0, [pc, #332]	@ (800a7a8 <tcp_write+0x5ac>)
 800a65c:	f004 fa04 	bl	800ea68 <iprintf>
      prev_seg->next = seg;
 800a660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a664:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a668:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a66a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a66e:	8b3b      	ldrh	r3, [r7, #24]
 800a670:	4413      	add	r3, r2
 800a672:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800a676:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	f4ff af3d 	bcc.w	800a4fc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a682:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a684:	2b00      	cmp	r3, #0
 800a686:	d02c      	beq.n	800a6e2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a68e:	e01e      	b.n	800a6ce <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800a690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a692:	891a      	ldrh	r2, [r3, #8]
 800a694:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a696:	4413      	add	r3, r2
 800a698:	b29a      	uxth	r2, r3
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d110      	bne.n	800a6c8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6ac:	8952      	ldrh	r2, [r2, #10]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a6b2:	68b9      	ldr	r1, [r7, #8]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f004 fab2 	bl	800ec1e <memcpy>
        p->len += oversize_used;
 800a6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6bc:	895a      	ldrh	r2, [r3, #10]
 800a6be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6c0:	4413      	add	r3, r2
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1dd      	bne.n	800a690 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800a6d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6d6:	891a      	ldrh	r2, [r3, #8]
 800a6d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6da:	4413      	add	r3, r2
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6e0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a6e2:	8a7a      	ldrh	r2, [r7, #18]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a6ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d018      	beq.n	800a722 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a6f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <tcp_write+0x508>
 800a6f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a7a0 <tcp_write+0x5a4>)
 800a6f8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800a6fc:	492d      	ldr	r1, [pc, #180]	@ (800a7b4 <tcp_write+0x5b8>)
 800a6fe:	482a      	ldr	r0, [pc, #168]	@ (800a7a8 <tcp_write+0x5ac>)
 800a700:	f004 f9b2 	bl	800ea68 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fb f908 	bl	8005920 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a712:	891a      	ldrh	r2, [r3, #8]
 800a714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a716:	891b      	ldrh	r3, [r3, #8]
 800a718:	4413      	add	r3, r2
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a71e:	811a      	strh	r2, [r3, #8]
 800a720:	e037      	b.n	800a792 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800a722:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d034      	beq.n	800a792 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <tcp_write+0x53a>
 800a72e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <tcp_write+0x548>
 800a736:	4b1a      	ldr	r3, [pc, #104]	@ (800a7a0 <tcp_write+0x5a4>)
 800a738:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800a73c:	491e      	ldr	r1, [pc, #120]	@ (800a7b8 <tcp_write+0x5bc>)
 800a73e:	481a      	ldr	r0, [pc, #104]	@ (800a7a8 <tcp_write+0x5ac>)
 800a740:	f004 f992 	bl	800ea68 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a74a:	e009      	b.n	800a760 <tcp_write+0x564>
      p->tot_len += extendlen;
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	891a      	ldrh	r2, [r3, #8]
 800a750:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a752:	4413      	add	r3, r2
 800a754:	b29a      	uxth	r2, r3
 800a756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a758:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1f1      	bne.n	800a74c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800a768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76a:	891a      	ldrh	r2, [r3, #8]
 800a76c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a76e:	4413      	add	r3, r2
 800a770:	b29a      	uxth	r2, r3
 800a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a774:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a778:	895a      	ldrh	r2, [r3, #10]
 800a77a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a77c:	4413      	add	r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a786:	891a      	ldrh	r2, [r3, #8]
 800a788:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a78a:	4413      	add	r3, r2
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a790:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a794:	2b00      	cmp	r3, #0
 800a796:	d111      	bne.n	800a7bc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a79c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a79e:	e010      	b.n	800a7c2 <tcp_write+0x5c6>
 800a7a0:	0801101c 	.word	0x0801101c
 800a7a4:	080112bc 	.word	0x080112bc
 800a7a8:	08011070 	.word	0x08011070
 800a7ac:	080112fc 	.word	0x080112fc
 800a7b0:	0801130c 	.word	0x0801130c
 800a7b4:	08011320 	.word	0x08011320
 800a7b8:	08011358 	.word	0x08011358
  } else {
    last_unsent->next = queue;
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	441a      	add	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a7d4:	88fb      	ldrh	r3, [r7, #6]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a7e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00e      	beq.n	800a812 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <tcp_write+0x616>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d106      	bne.n	800a812 <tcp_write+0x616>
 800a804:	4b2c      	ldr	r3, [pc, #176]	@ (800a8b8 <tcp_write+0x6bc>)
 800a806:	f240 3212 	movw	r2, #786	@ 0x312
 800a80a:	492c      	ldr	r1, [pc, #176]	@ (800a8bc <tcp_write+0x6c0>)
 800a80c:	482c      	ldr	r0, [pc, #176]	@ (800a8c0 <tcp_write+0x6c4>)
 800a80e:	f004 f92b 	bl	800ea68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d016      	beq.n	800a846 <tcp_write+0x64a>
 800a818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d012      	beq.n	800a846 <tcp_write+0x64a>
 800a820:	797b      	ldrb	r3, [r7, #5]
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10d      	bne.n	800a846 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	899b      	ldrh	r3, [r3, #12]
 800a830:	b29c      	uxth	r4, r3
 800a832:	2008      	movs	r0, #8
 800a834:	f7f9 fc50 	bl	80040d8 <lwip_htons>
 800a838:	4603      	mov	r3, r0
 800a83a:	461a      	mov	r2, r3
 800a83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	4322      	orrs	r2, r4
 800a842:	b292      	uxth	r2, r2
 800a844:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	e031      	b.n	800a8ae <tcp_write+0x6b2>
          goto memerr;
 800a84a:	bf00      	nop
 800a84c:	e006      	b.n	800a85c <tcp_write+0x660>
            goto memerr;
 800a84e:	bf00      	nop
 800a850:	e004      	b.n	800a85c <tcp_write+0x660>
        goto memerr;
 800a852:	bf00      	nop
 800a854:	e002      	b.n	800a85c <tcp_write+0x660>
        goto memerr;
 800a856:	bf00      	nop
 800a858:	e000      	b.n	800a85c <tcp_write+0x660>
      goto memerr;
 800a85a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	8b5b      	ldrh	r3, [r3, #26]
 800a860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a864:	b29a      	uxth	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800a870:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a872:	f7fa ff93 	bl	800579c <pbuf_free>
  }
  if (queue != NULL) {
 800a876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <tcp_write+0x686>
    tcp_segs_free(queue);
 800a87c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a87e:	f7fc fc37 	bl	80070f0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00e      	beq.n	800a8aa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <tcp_write+0x6ae>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d106      	bne.n	800a8aa <tcp_write+0x6ae>
 800a89c:	4b06      	ldr	r3, [pc, #24]	@ (800a8b8 <tcp_write+0x6bc>)
 800a89e:	f240 3227 	movw	r2, #807	@ 0x327
 800a8a2:	4906      	ldr	r1, [pc, #24]	@ (800a8bc <tcp_write+0x6c0>)
 800a8a4:	4806      	ldr	r0, [pc, #24]	@ (800a8c0 <tcp_write+0x6c4>)
 800a8a6:	f004 f8df 	bl	800ea68 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a8aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	375c      	adds	r7, #92	@ 0x5c
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd90      	pop	{r4, r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0801101c 	.word	0x0801101c
 800a8bc:	08011390 	.word	0x08011390
 800a8c0:	08011070 	.word	0x08011070

0800a8c4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a8c4:	b590      	push	{r4, r7, lr}
 800a8c6:	b08b      	sub	sp, #44	@ 0x2c
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <tcp_split_unsent_seg+0x2c>
 800a8e2:	4b95      	ldr	r3, [pc, #596]	@ (800ab38 <tcp_split_unsent_seg+0x274>)
 800a8e4:	f240 324b 	movw	r2, #843	@ 0x34b
 800a8e8:	4994      	ldr	r1, [pc, #592]	@ (800ab3c <tcp_split_unsent_seg+0x278>)
 800a8ea:	4895      	ldr	r0, [pc, #596]	@ (800ab40 <tcp_split_unsent_seg+0x27c>)
 800a8ec:	f004 f8bc 	bl	800ea68 <iprintf>

  useg = pcb->unsent;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a900:	e116      	b.n	800ab30 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a902:	887b      	ldrh	r3, [r7, #2]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a908:	4b8b      	ldr	r3, [pc, #556]	@ (800ab38 <tcp_split_unsent_seg+0x274>)
 800a90a:	f240 3253 	movw	r2, #851	@ 0x353
 800a90e:	498d      	ldr	r1, [pc, #564]	@ (800ab44 <tcp_split_unsent_seg+0x280>)
 800a910:	488b      	ldr	r0, [pc, #556]	@ (800ab40 <tcp_split_unsent_seg+0x27c>)
 800a912:	f004 f8a9 	bl	800ea68 <iprintf>
    return ERR_VAL;
 800a916:	f06f 0305 	mvn.w	r3, #5
 800a91a:	e109      	b.n	800ab30 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	891b      	ldrh	r3, [r3, #8]
 800a920:	887a      	ldrh	r2, [r7, #2]
 800a922:	429a      	cmp	r2, r3
 800a924:	d301      	bcc.n	800a92a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	e102      	b.n	800ab30 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a92e:	887a      	ldrh	r2, [r7, #2]
 800a930:	429a      	cmp	r2, r3
 800a932:	d906      	bls.n	800a942 <tcp_split_unsent_seg+0x7e>
 800a934:	4b80      	ldr	r3, [pc, #512]	@ (800ab38 <tcp_split_unsent_seg+0x274>)
 800a936:	f240 325b 	movw	r2, #859	@ 0x35b
 800a93a:	4983      	ldr	r1, [pc, #524]	@ (800ab48 <tcp_split_unsent_seg+0x284>)
 800a93c:	4880      	ldr	r0, [pc, #512]	@ (800ab40 <tcp_split_unsent_seg+0x27c>)
 800a93e:	f004 f893 	bl	800ea68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	891b      	ldrh	r3, [r3, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <tcp_split_unsent_seg+0x94>
 800a94a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab38 <tcp_split_unsent_seg+0x274>)
 800a94c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a950:	497e      	ldr	r1, [pc, #504]	@ (800ab4c <tcp_split_unsent_seg+0x288>)
 800a952:	487b      	ldr	r0, [pc, #492]	@ (800ab40 <tcp_split_unsent_seg+0x27c>)
 800a954:	f004 f888 	bl	800ea68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	7a9b      	ldrb	r3, [r3, #10]
 800a95c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	891a      	ldrh	r2, [r3, #8]
 800a96e:	887b      	ldrh	r3, [r7, #2]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	b29a      	uxth	r2, r3
 800a978:	89bb      	ldrh	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a982:	4619      	mov	r1, r3
 800a984:	2036      	movs	r0, #54	@ 0x36
 800a986:	f7fa fc25 	bl	80051d4 <pbuf_alloc>
 800a98a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 80b7 	beq.w	800ab02 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	891a      	ldrh	r2, [r3, #8]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	891b      	ldrh	r3, [r3, #8]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	887b      	ldrh	r3, [r7, #2]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	6858      	ldr	r0, [r3, #4]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	18d1      	adds	r1, r2, r3
 800a9b4:	897b      	ldrh	r3, [r7, #10]
 800a9b6:	89ba      	ldrh	r2, [r7, #12]
 800a9b8:	f7fb f8da 	bl	8005b70 <pbuf_copy_partial>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	89bb      	ldrh	r3, [r7, #12]
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	f040 809f 	bne.w	800ab06 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	899b      	ldrh	r3, [r3, #12]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f9 fb81 	bl	80040d8 <lwip_htons>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a9e4:	7efb      	ldrb	r3, [r7, #27]
 800a9e6:	f003 0308 	and.w	r3, r3, #8
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a9ee:	7efb      	ldrb	r3, [r7, #27]
 800a9f0:	f023 0308 	bic.w	r3, r3, #8
 800a9f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a9f6:	7ebb      	ldrb	r3, [r7, #26]
 800a9f8:	f043 0308 	orr.w	r3, r3, #8
 800a9fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a9fe:	7efb      	ldrb	r3, [r7, #27]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800aa08:	7efb      	ldrb	r3, [r7, #27]
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800aa10:	7ebb      	ldrb	r3, [r7, #26]
 800aa12:	f043 0301 	orr.w	r3, r3, #1
 800aa16:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f9 fb70 	bl	8004104 <lwip_htonl>
 800aa24:	4602      	mov	r2, r0
 800aa26:	887b      	ldrh	r3, [r7, #2]
 800aa28:	18d1      	adds	r1, r2, r3
 800aa2a:	7eba      	ldrb	r2, [r7, #26]
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	460b      	mov	r3, r1
 800aa32:	6939      	ldr	r1, [r7, #16]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fa51 	bl	8009edc <tcp_create_segment>
 800aa3a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d063      	beq.n	800ab0a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fa ff30 	bl	80058ac <pbuf_clen>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	6858      	ldr	r0, [r3, #4]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	891a      	ldrh	r2, [r3, #8]
 800aa6a:	89bb      	ldrh	r3, [r7, #12]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4619      	mov	r1, r3
 800aa72:	f7fa fd0d 	bl	8005490 <pbuf_realloc>
  useg->len -= remainder;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	891a      	ldrh	r2, [r3, #8]
 800aa7a:	89bb      	ldrh	r3, [r7, #12]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	899b      	ldrh	r3, [r3, #12]
 800aa8a:	b29c      	uxth	r4, r3
 800aa8c:	7efb      	ldrb	r3, [r7, #27]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f9 fb21 	bl	80040d8 <lwip_htons>
 800aa96:	4603      	mov	r3, r0
 800aa98:	461a      	mov	r2, r3
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	4322      	orrs	r2, r4
 800aaa0:	b292      	uxth	r2, r2
 800aaa2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fa feff 	bl	80058ac <pbuf_clen>
 800aaae:	4603      	mov	r3, r0
 800aab0:	461a      	mov	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aab8:	4413      	add	r3, r2
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fa fef0 	bl	80058ac <pbuf_clen>
 800aacc:	4603      	mov	r3, r0
 800aace:	461a      	mov	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aad6:	4413      	add	r3, r2
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	69fa      	ldr	r2, [r7, #28]
 800aaec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	e016      	b.n	800ab30 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ab0a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d006      	beq.n	800ab20 <tcp_split_unsent_seg+0x25c>
 800ab12:	4b09      	ldr	r3, [pc, #36]	@ (800ab38 <tcp_split_unsent_seg+0x274>)
 800ab14:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ab18:	490d      	ldr	r1, [pc, #52]	@ (800ab50 <tcp_split_unsent_seg+0x28c>)
 800ab1a:	4809      	ldr	r0, [pc, #36]	@ (800ab40 <tcp_split_unsent_seg+0x27c>)
 800ab1c:	f003 ffa4 	bl	800ea68 <iprintf>
  if (p != NULL) {
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ab26:	6938      	ldr	r0, [r7, #16]
 800ab28:	f7fa fe38 	bl	800579c <pbuf_free>
  }

  return ERR_MEM;
 800ab2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3724      	adds	r7, #36	@ 0x24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd90      	pop	{r4, r7, pc}
 800ab38:	0801101c 	.word	0x0801101c
 800ab3c:	080113b0 	.word	0x080113b0
 800ab40:	08011070 	.word	0x08011070
 800ab44:	080113d4 	.word	0x080113d4
 800ab48:	080113f8 	.word	0x080113f8
 800ab4c:	08011408 	.word	0x08011408
 800ab50:	08011418 	.word	0x08011418

0800ab54 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <tcp_send_fin+0x1c>
 800ab62:	4b21      	ldr	r3, [pc, #132]	@ (800abe8 <tcp_send_fin+0x94>)
 800ab64:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ab68:	4920      	ldr	r1, [pc, #128]	@ (800abec <tcp_send_fin+0x98>)
 800ab6a:	4821      	ldr	r0, [pc, #132]	@ (800abf0 <tcp_send_fin+0x9c>)
 800ab6c:	f003 ff7c 	bl	800ea68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d02e      	beq.n	800abd6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e002      	b.n	800ab86 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f8      	bne.n	800ab80 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	899b      	ldrh	r3, [r3, #12]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f9 fa9e 	bl	80040d8 <lwip_htons>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f003 0307 	and.w	r3, r3, #7
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d116      	bne.n	800abd6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	899b      	ldrh	r3, [r3, #12]
 800abae:	b29c      	uxth	r4, r3
 800abb0:	2001      	movs	r0, #1
 800abb2:	f7f9 fa91 	bl	80040d8 <lwip_htons>
 800abb6:	4603      	mov	r3, r0
 800abb8:	461a      	mov	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	4322      	orrs	r2, r4
 800abc0:	b292      	uxth	r2, r2
 800abc2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	8b5b      	ldrh	r3, [r3, #26]
 800abc8:	f043 0320 	orr.w	r3, r3, #32
 800abcc:	b29a      	uxth	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e004      	b.n	800abe0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800abd6:	2101      	movs	r1, #1
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f80b 	bl	800abf4 <tcp_enqueue_flags>
 800abde:	4603      	mov	r3, r0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd90      	pop	{r4, r7, pc}
 800abe8:	0801101c 	.word	0x0801101c
 800abec:	08011424 	.word	0x08011424
 800abf0:	08011070 	.word	0x08011070

0800abf4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	@ 0x28
 800abf8:	af02      	add	r7, sp, #8
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <tcp_enqueue_flags+0x2c>
 800ac12:	4b67      	ldr	r3, [pc, #412]	@ (800adb0 <tcp_enqueue_flags+0x1bc>)
 800ac14:	f240 4211 	movw	r2, #1041	@ 0x411
 800ac18:	4966      	ldr	r1, [pc, #408]	@ (800adb4 <tcp_enqueue_flags+0x1c0>)
 800ac1a:	4867      	ldr	r0, [pc, #412]	@ (800adb8 <tcp_enqueue_flags+0x1c4>)
 800ac1c:	f003 ff24 	bl	800ea68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <tcp_enqueue_flags+0x40>
 800ac26:	4b62      	ldr	r3, [pc, #392]	@ (800adb0 <tcp_enqueue_flags+0x1bc>)
 800ac28:	f240 4213 	movw	r2, #1043	@ 0x413
 800ac2c:	4963      	ldr	r1, [pc, #396]	@ (800adbc <tcp_enqueue_flags+0x1c8>)
 800ac2e:	4862      	ldr	r0, [pc, #392]	@ (800adb8 <tcp_enqueue_flags+0x1c4>)
 800ac30:	f003 ff1a 	bl	800ea68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac42:	7ffb      	ldrb	r3, [r7, #31]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ac56:	4619      	mov	r1, r3
 800ac58:	2036      	movs	r0, #54	@ 0x36
 800ac5a:	f7fa fabb 	bl	80051d4 <pbuf_alloc>
 800ac5e:	6138      	str	r0, [r7, #16]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	8b5b      	ldrh	r3, [r3, #26]
 800ac6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	e095      	b.n	800ada6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	895a      	ldrh	r2, [r3, #10]
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d206      	bcs.n	800ac94 <tcp_enqueue_flags+0xa0>
 800ac86:	4b4a      	ldr	r3, [pc, #296]	@ (800adb0 <tcp_enqueue_flags+0x1bc>)
 800ac88:	f240 4239 	movw	r2, #1081	@ 0x439
 800ac8c:	494c      	ldr	r1, [pc, #304]	@ (800adc0 <tcp_enqueue_flags+0x1cc>)
 800ac8e:	484a      	ldr	r0, [pc, #296]	@ (800adb8 <tcp_enqueue_flags+0x1c4>)
 800ac90:	f003 feea 	bl	800ea68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ac98:	78fa      	ldrb	r2, [r7, #3]
 800ac9a:	7ffb      	ldrb	r3, [r7, #31]
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	6939      	ldr	r1, [r7, #16]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff f91a 	bl	8009edc <tcp_create_segment>
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	8b5b      	ldrh	r3, [r3, #26]
 800acb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb8:	b29a      	uxth	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800acbe:	f04f 33ff 	mov.w	r3, #4294967295
 800acc2:	e070      	b.n	800ada6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f003 0303 	and.w	r3, r3, #3
 800accc:	2b00      	cmp	r3, #0
 800acce:	d006      	beq.n	800acde <tcp_enqueue_flags+0xea>
 800acd0:	4b37      	ldr	r3, [pc, #220]	@ (800adb0 <tcp_enqueue_flags+0x1bc>)
 800acd2:	f240 4242 	movw	r2, #1090	@ 0x442
 800acd6:	493b      	ldr	r1, [pc, #236]	@ (800adc4 <tcp_enqueue_flags+0x1d0>)
 800acd8:	4837      	ldr	r0, [pc, #220]	@ (800adb8 <tcp_enqueue_flags+0x1c4>)
 800acda:	f003 fec5 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	891b      	ldrh	r3, [r3, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d006      	beq.n	800acf4 <tcp_enqueue_flags+0x100>
 800ace6:	4b32      	ldr	r3, [pc, #200]	@ (800adb0 <tcp_enqueue_flags+0x1bc>)
 800ace8:	f240 4243 	movw	r2, #1091	@ 0x443
 800acec:	4936      	ldr	r1, [pc, #216]	@ (800adc8 <tcp_enqueue_flags+0x1d4>)
 800acee:	4832      	ldr	r0, [pc, #200]	@ (800adb8 <tcp_enqueue_flags+0x1c4>)
 800acf0:	f003 feba 	bl	800ea68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ad02:	e00d      	b.n	800ad20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	e002      	b.n	800ad12 <tcp_enqueue_flags+0x11e>
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	61bb      	str	r3, [r7, #24]
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f8      	bne.n	800ad0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ad28:	78fb      	ldrb	r3, [r7, #3]
 800ad2a:	f003 0302 	and.w	r3, r3, #2
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d104      	bne.n	800ad3c <tcp_enqueue_flags+0x148>
 800ad32:	78fb      	ldrb	r3, [r7, #3]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	8b5b      	ldrh	r3, [r3, #26]
 800ad54:	f043 0320 	orr.w	r3, r3, #32
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fa fda2 	bl	80058ac <pbuf_clen>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad72:	4413      	add	r3, r2
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00e      	beq.n	800ada4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <tcp_enqueue_flags+0x1b0>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <tcp_enqueue_flags+0x1b0>
 800ad96:	4b06      	ldr	r3, [pc, #24]	@ (800adb0 <tcp_enqueue_flags+0x1bc>)
 800ad98:	f240 4265 	movw	r2, #1125	@ 0x465
 800ad9c:	490b      	ldr	r1, [pc, #44]	@ (800adcc <tcp_enqueue_flags+0x1d8>)
 800ad9e:	4806      	ldr	r0, [pc, #24]	@ (800adb8 <tcp_enqueue_flags+0x1c4>)
 800ada0:	f003 fe62 	bl	800ea68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	0801101c 	.word	0x0801101c
 800adb4:	08011440 	.word	0x08011440
 800adb8:	08011070 	.word	0x08011070
 800adbc:	08011498 	.word	0x08011498
 800adc0:	080114b8 	.word	0x080114b8
 800adc4:	080114f4 	.word	0x080114f4
 800adc8:	0801150c 	.word	0x0801150c
 800adcc:	08011538 	.word	0x08011538

0800add0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800add0:	b5b0      	push	{r4, r5, r7, lr}
 800add2:	b08a      	sub	sp, #40	@ 0x28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <tcp_output+0x1c>
 800adde:	4b8a      	ldr	r3, [pc, #552]	@ (800b008 <tcp_output+0x238>)
 800ade0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ade4:	4989      	ldr	r1, [pc, #548]	@ (800b00c <tcp_output+0x23c>)
 800ade6:	488a      	ldr	r0, [pc, #552]	@ (800b010 <tcp_output+0x240>)
 800ade8:	f003 fe3e 	bl	800ea68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	7d1b      	ldrb	r3, [r3, #20]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d106      	bne.n	800ae02 <tcp_output+0x32>
 800adf4:	4b84      	ldr	r3, [pc, #528]	@ (800b008 <tcp_output+0x238>)
 800adf6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800adfa:	4986      	ldr	r1, [pc, #536]	@ (800b014 <tcp_output+0x244>)
 800adfc:	4884      	ldr	r0, [pc, #528]	@ (800b010 <tcp_output+0x240>)
 800adfe:	f003 fe33 	bl	800ea68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ae02:	4b85      	ldr	r3, [pc, #532]	@ (800b018 <tcp_output+0x248>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d101      	bne.n	800ae10 <tcp_output+0x40>
    return ERR_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e1ce      	b.n	800b1ae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	bf28      	it	cs
 800ae20:	4613      	movcs	r3, r2
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10b      	bne.n	800ae4a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	8b5b      	ldrh	r3, [r3, #26]
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 81aa 	beq.w	800b194 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fdcb 	bl	800b9dc <tcp_send_empty_ack>
 800ae46:	4603      	mov	r3, r0
 800ae48:	e1b1      	b.n	800b1ae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	461a      	mov	r2, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff f826 	bl	8009ea4 <tcp_route>
 800ae58:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <tcp_output+0x96>
    return ERR_RTE;
 800ae60:	f06f 0303 	mvn.w	r3, #3
 800ae64:	e1a3      	b.n	800b1ae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <tcp_output+0xa4>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d111      	bne.n	800ae98 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <tcp_output+0xb0>
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	e000      	b.n	800ae82 <tcp_output+0xb2>
 800ae80:	2300      	movs	r3, #0
 800ae82:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <tcp_output+0xc0>
      return ERR_RTE;
 800ae8a:	f06f 0303 	mvn.w	r3, #3
 800ae8e:	e18e      	b.n	800b1ae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f9 f930 	bl	8004104 <lwip_htonl>
 800aea4:	4602      	mov	r2, r0
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeae:	8912      	ldrh	r2, [r2, #8]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	69ba      	ldr	r2, [r7, #24]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d227      	bcs.n	800af08 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aebe:	461a      	mov	r2, r3
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d114      	bne.n	800aef0 <tcp_output+0x120>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d110      	bne.n	800aef0 <tcp_output+0x120>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10b      	bne.n	800aef0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	8b5b      	ldrh	r3, [r3, #26]
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 814d 	beq.w	800b198 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fd6c 	bl	800b9dc <tcp_send_empty_ack>
 800af04:	4603      	mov	r3, r0
 800af06:	e152      	b.n	800b1ae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af14:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 811c 	beq.w	800b156 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800af1e:	e002      	b.n	800af26 <tcp_output+0x156>
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	623b      	str	r3, [r7, #32]
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f8      	bne.n	800af20 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800af2e:	e112      	b.n	800b156 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	899b      	ldrh	r3, [r3, #12]
 800af36:	b29b      	uxth	r3, r3
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f9 f8cd 	bl	80040d8 <lwip_htons>
 800af3e:	4603      	mov	r3, r0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b00      	cmp	r3, #0
 800af48:	d006      	beq.n	800af58 <tcp_output+0x188>
 800af4a:	4b2f      	ldr	r3, [pc, #188]	@ (800b008 <tcp_output+0x238>)
 800af4c:	f240 5236 	movw	r2, #1334	@ 0x536
 800af50:	4932      	ldr	r1, [pc, #200]	@ (800b01c <tcp_output+0x24c>)
 800af52:	482f      	ldr	r0, [pc, #188]	@ (800b010 <tcp_output+0x240>)
 800af54:	f003 fd88 	bl	800ea68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01f      	beq.n	800afa0 <tcp_output+0x1d0>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	8b5b      	ldrh	r3, [r3, #26]
 800af64:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d119      	bne.n	800afa0 <tcp_output+0x1d0>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00b      	beq.n	800af8c <tcp_output+0x1bc>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d110      	bne.n	800afa0 <tcp_output+0x1d0>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af82:	891a      	ldrh	r2, [r3, #8]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af88:	429a      	cmp	r2, r3
 800af8a:	d209      	bcs.n	800afa0 <tcp_output+0x1d0>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <tcp_output+0x1d0>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800af9c:	2b08      	cmp	r3, #8
 800af9e:	d901      	bls.n	800afa4 <tcp_output+0x1d4>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e000      	b.n	800afa6 <tcp_output+0x1d6>
 800afa4:	2300      	movs	r3, #0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8b5b      	ldrh	r3, [r3, #26]
 800afae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 80e4 	beq.w	800b180 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	7d1b      	ldrb	r3, [r3, #20]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d00d      	beq.n	800afdc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	899b      	ldrh	r3, [r3, #12]
 800afc6:	b29c      	uxth	r4, r3
 800afc8:	2010      	movs	r0, #16
 800afca:	f7f9 f885 	bl	80040d8 <lwip_htons>
 800afce:	4603      	mov	r3, r0
 800afd0:	461a      	mov	r2, r3
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	4322      	orrs	r2, r4
 800afd8:	b292      	uxth	r2, r2
 800afda:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afe2:	f000 f909 	bl	800b1f8 <tcp_output_segment>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800afea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d016      	beq.n	800b020 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8b5b      	ldrh	r3, [r3, #26]
 800aff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800affa:	b29a      	uxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	835a      	strh	r2, [r3, #26]
      return err;
 800b000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b004:	e0d3      	b.n	800b1ae <tcp_output+0x3de>
 800b006:	bf00      	nop
 800b008:	0801101c 	.word	0x0801101c
 800b00c:	08011560 	.word	0x08011560
 800b010:	08011070 	.word	0x08011070
 800b014:	08011578 	.word	0x08011578
 800b018:	20008350 	.word	0x20008350
 800b01c:	080115a0 	.word	0x080115a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7d1b      	ldrb	r3, [r3, #20]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d006      	beq.n	800b03e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	8b5b      	ldrh	r3, [r3, #26]
 800b034:	f023 0303 	bic.w	r3, r3, #3
 800b038:	b29a      	uxth	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	4618      	mov	r0, r3
 800b046:	f7f9 f85d 	bl	8004104 <lwip_htonl>
 800b04a:	4604      	mov	r4, r0
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	891b      	ldrh	r3, [r3, #8]
 800b050:	461d      	mov	r5, r3
 800b052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	899b      	ldrh	r3, [r3, #12]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f9 f83c 	bl	80040d8 <lwip_htons>
 800b060:	4603      	mov	r3, r0
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 0303 	and.w	r3, r3, #3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <tcp_output+0x2a0>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e000      	b.n	800b072 <tcp_output+0x2a2>
 800b070:	2300      	movs	r3, #0
 800b072:	442b      	add	r3, r5
 800b074:	4423      	add	r3, r4
 800b076:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	da02      	bge.n	800b08a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	891b      	ldrh	r3, [r3, #8]
 800b08e:	461c      	mov	r4, r3
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	899b      	ldrh	r3, [r3, #12]
 800b096:	b29b      	uxth	r3, r3
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f9 f81d 	bl	80040d8 <lwip_htons>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <tcp_output+0x2de>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e000      	b.n	800b0b0 <tcp_output+0x2e0>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4423      	add	r3, r4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d049      	beq.n	800b14a <tcp_output+0x37a>
      seg->next = NULL;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d105      	bne.n	800b0d0 <tcp_output+0x300>
        pcb->unacked = seg;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0c8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	623b      	str	r3, [r7, #32]
 800b0ce:	e03f      	b.n	800b150 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7f9 f814 	bl	8004104 <lwip_htonl>
 800b0dc:	4604      	mov	r4, r0
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f9 f80d 	bl	8004104 <lwip_htonl>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	1ae3      	subs	r3, r4, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	da24      	bge.n	800b13c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3370      	adds	r3, #112	@ 0x70
 800b0f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0f8:	e002      	b.n	800b100 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d011      	beq.n	800b12c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	f7f8 fff7 	bl	8004104 <lwip_htonl>
 800b116:	4604      	mov	r4, r0
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f8 fff0 	bl	8004104 <lwip_htonl>
 800b124:	4603      	mov	r3, r0
 800b126:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b128:	2b00      	cmp	r3, #0
 800b12a:	dbe6      	blt.n	800b0fa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	e009      	b.n	800b150 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b140:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	623b      	str	r3, [r7, #32]
 800b148:	e002      	b.n	800b150 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b14a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b14c:	f7fb ffe5 	bl	800711a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b154:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d012      	beq.n	800b182 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	4618      	mov	r0, r3
 800b164:	f7f8 ffce 	bl	8004104 <lwip_htonl>
 800b168:	4602      	mov	r2, r0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b172:	8912      	ldrh	r2, [r2, #8]
 800b174:	4413      	add	r3, r2
  while (seg != NULL &&
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	429a      	cmp	r2, r3
 800b17a:	f4bf aed9 	bcs.w	800af30 <tcp_output+0x160>
 800b17e:	e000      	b.n	800b182 <tcp_output+0x3b2>
      break;
 800b180:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d108      	bne.n	800b19c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b192:	e004      	b.n	800b19e <tcp_output+0x3ce>
    goto output_done;
 800b194:	bf00      	nop
 800b196:	e002      	b.n	800b19e <tcp_output+0x3ce>
    goto output_done;
 800b198:	bf00      	nop
 800b19a:	e000      	b.n	800b19e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b19c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	8b5b      	ldrh	r3, [r3, #26]
 800b1a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3728      	adds	r7, #40	@ 0x28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b1b6:	bf00      	nop

0800b1b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <tcp_output_segment_busy+0x1c>
 800b1c6:	4b09      	ldr	r3, [pc, #36]	@ (800b1ec <tcp_output_segment_busy+0x34>)
 800b1c8:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b1cc:	4908      	ldr	r1, [pc, #32]	@ (800b1f0 <tcp_output_segment_busy+0x38>)
 800b1ce:	4809      	ldr	r0, [pc, #36]	@ (800b1f4 <tcp_output_segment_busy+0x3c>)
 800b1d0:	f003 fc4a 	bl	800ea68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	7b9b      	ldrb	r3, [r3, #14]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d001      	beq.n	800b1e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	0801101c 	.word	0x0801101c
 800b1f0:	080115b8 	.word	0x080115b8
 800b1f4:	08011070 	.word	0x08011070

0800b1f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b1f8:	b5b0      	push	{r4, r5, r7, lr}
 800b1fa:	b08c      	sub	sp, #48	@ 0x30
 800b1fc:	af04      	add	r7, sp, #16
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <tcp_output_segment+0x20>
 800b20a:	4b64      	ldr	r3, [pc, #400]	@ (800b39c <tcp_output_segment+0x1a4>)
 800b20c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b210:	4963      	ldr	r1, [pc, #396]	@ (800b3a0 <tcp_output_segment+0x1a8>)
 800b212:	4864      	ldr	r0, [pc, #400]	@ (800b3a4 <tcp_output_segment+0x1ac>)
 800b214:	f003 fc28 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <tcp_output_segment+0x34>
 800b21e:	4b5f      	ldr	r3, [pc, #380]	@ (800b39c <tcp_output_segment+0x1a4>)
 800b220:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b224:	4960      	ldr	r1, [pc, #384]	@ (800b3a8 <tcp_output_segment+0x1b0>)
 800b226:	485f      	ldr	r0, [pc, #380]	@ (800b3a4 <tcp_output_segment+0x1ac>)
 800b228:	f003 fc1e 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <tcp_output_segment+0x48>
 800b232:	4b5a      	ldr	r3, [pc, #360]	@ (800b39c <tcp_output_segment+0x1a4>)
 800b234:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b238:	495c      	ldr	r1, [pc, #368]	@ (800b3ac <tcp_output_segment+0x1b4>)
 800b23a:	485a      	ldr	r0, [pc, #360]	@ (800b3a4 <tcp_output_segment+0x1ac>)
 800b23c:	f003 fc14 	bl	800ea68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff ffb9 	bl	800b1b8 <tcp_output_segment_busy>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e0a1      	b.n	800b394 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68dc      	ldr	r4, [r3, #12]
 800b258:	4610      	mov	r0, r2
 800b25a:	f7f8 ff53 	bl	8004104 <lwip_htonl>
 800b25e:	4603      	mov	r3, r0
 800b260:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68dc      	ldr	r4, [r3, #12]
 800b26a:	4610      	mov	r0, r2
 800b26c:	f7f8 ff34 	bl	80040d8 <lwip_htons>
 800b270:	4603      	mov	r3, r0
 800b272:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b27c:	441a      	add	r2, r3
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	3314      	adds	r3, #20
 800b288:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	7a9b      	ldrb	r3, [r3, #10]
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d015      	beq.n	800b2c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3304      	adds	r3, #4
 800b29a:	461a      	mov	r2, r3
 800b29c:	6879      	ldr	r1, [r7, #4]
 800b29e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b2a2:	f7fc fa39 	bl	8007718 <tcp_eff_send_mss_netif>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b2aa:	8b7b      	ldrh	r3, [r7, #26]
 800b2ac:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f8 ff27 	bl	8004104 <lwip_htonl>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	da02      	bge.n	800b2d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10c      	bne.n	800b2f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b2da:	4b35      	ldr	r3, [pc, #212]	@ (800b3b0 <tcp_output_segment+0x1b8>)
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7f8 ff0b 	bl	8004104 <lwip_htonl>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	8959      	ldrh	r1, [r3, #10]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	8b3a      	ldrh	r2, [r7, #24]
 800b30e:	1a8a      	subs	r2, r1, r2
 800b310:	b292      	uxth	r2, r2
 800b312:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	8919      	ldrh	r1, [r3, #8]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	8b3a      	ldrh	r2, [r7, #24]
 800b320:	1a8a      	subs	r2, r1, r2
 800b322:	b292      	uxth	r2, r2
 800b324:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	68d2      	ldr	r2, [r2, #12]
 800b32e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	741a      	strb	r2, [r3, #16]
 800b338:	2200      	movs	r2, #0
 800b33a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	7a9b      	ldrb	r3, [r3, #10]
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <tcp_output_segment+0x158>
 800b34c:	2318      	movs	r3, #24
 800b34e:	e000      	b.n	800b352 <tcp_output_segment+0x15a>
 800b350:	2314      	movs	r3, #20
 800b352:	4413      	add	r3, r2
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	429a      	cmp	r2, r3
 800b358:	d006      	beq.n	800b368 <tcp_output_segment+0x170>
 800b35a:	4b10      	ldr	r3, [pc, #64]	@ (800b39c <tcp_output_segment+0x1a4>)
 800b35c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b360:	4914      	ldr	r1, [pc, #80]	@ (800b3b4 <tcp_output_segment+0x1bc>)
 800b362:	4810      	ldr	r0, [pc, #64]	@ (800b3a4 <tcp_output_segment+0x1ac>)
 800b364:	f003 fb80 	bl	800ea68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6858      	ldr	r0, [r3, #4]
 800b36c:	68b9      	ldr	r1, [r7, #8]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	1d1c      	adds	r4, r3, #4
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	7add      	ldrb	r5, [r3, #11]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	7a9b      	ldrb	r3, [r3, #10]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	9202      	str	r2, [sp, #8]
 800b37e:	2206      	movs	r2, #6
 800b380:	9201      	str	r2, [sp, #4]
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	462b      	mov	r3, r5
 800b386:	4622      	mov	r2, r4
 800b388:	f002 fa40 	bl	800d80c <ip4_output_if>
 800b38c:	4603      	mov	r3, r0
 800b38e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bdb0      	pop	{r4, r5, r7, pc}
 800b39c:	0801101c 	.word	0x0801101c
 800b3a0:	080115e0 	.word	0x080115e0
 800b3a4:	08011070 	.word	0x08011070
 800b3a8:	08011600 	.word	0x08011600
 800b3ac:	08011620 	.word	0x08011620
 800b3b0:	20008304 	.word	0x20008304
 800b3b4:	08011644 	.word	0x08011644

0800b3b8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b3b8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d106      	bne.n	800b3d4 <tcp_rexmit_rto_prepare+0x1c>
 800b3c6:	4b31      	ldr	r3, [pc, #196]	@ (800b48c <tcp_rexmit_rto_prepare+0xd4>)
 800b3c8:	f240 6263 	movw	r2, #1635	@ 0x663
 800b3cc:	4930      	ldr	r1, [pc, #192]	@ (800b490 <tcp_rexmit_rto_prepare+0xd8>)
 800b3ce:	4831      	ldr	r0, [pc, #196]	@ (800b494 <tcp_rexmit_rto_prepare+0xdc>)
 800b3d0:	f003 fb4a 	bl	800ea68 <iprintf>

  if (pcb->unacked == NULL) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b3dc:	f06f 0305 	mvn.w	r3, #5
 800b3e0:	e050      	b.n	800b484 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e00b      	b.n	800b402 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f7ff fee4 	bl	800b1b8 <tcp_output_segment_busy>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b3f6:	f06f 0305 	mvn.w	r3, #5
 800b3fa:	e043      	b.n	800b484 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1ef      	bne.n	800b3ea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fed4 	bl	800b1b8 <tcp_output_segment_busy>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b416:	f06f 0305 	mvn.w	r3, #5
 800b41a:	e033      	b.n	800b484 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	8b5b      	ldrh	r3, [r3, #26]
 800b436:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	4618      	mov	r0, r3
 800b448:	f7f8 fe5c 	bl	8004104 <lwip_htonl>
 800b44c:	4604      	mov	r4, r0
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	891b      	ldrh	r3, [r3, #8]
 800b452:	461d      	mov	r5, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	899b      	ldrh	r3, [r3, #12]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f8 fe3b 	bl	80040d8 <lwip_htons>
 800b462:	4603      	mov	r3, r0
 800b464:	b2db      	uxtb	r3, r3
 800b466:	f003 0303 	and.w	r3, r3, #3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <tcp_rexmit_rto_prepare+0xba>
 800b46e:	2301      	movs	r3, #1
 800b470:	e000      	b.n	800b474 <tcp_rexmit_rto_prepare+0xbc>
 800b472:	2300      	movs	r3, #0
 800b474:	442b      	add	r3, r5
 800b476:	18e2      	adds	r2, r4, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bdb0      	pop	{r4, r5, r7, pc}
 800b48c:	0801101c 	.word	0x0801101c
 800b490:	08011658 	.word	0x08011658
 800b494:	08011070 	.word	0x08011070

0800b498 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d106      	bne.n	800b4b4 <tcp_rexmit_rto_commit+0x1c>
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4dc <tcp_rexmit_rto_commit+0x44>)
 800b4a8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b4ac:	490c      	ldr	r1, [pc, #48]	@ (800b4e0 <tcp_rexmit_rto_commit+0x48>)
 800b4ae:	480d      	ldr	r0, [pc, #52]	@ (800b4e4 <tcp_rexmit_rto_commit+0x4c>)
 800b4b0:	f003 fada 	bl	800ea68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4ba:	2bff      	cmp	r3, #255	@ 0xff
 800b4bc:	d007      	beq.n	800b4ce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fc7e 	bl	800add0 <tcp_output>
}
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	0801101c 	.word	0x0801101c
 800b4e0:	0801167c 	.word	0x0801167c
 800b4e4:	08011070 	.word	0x08011070

0800b4e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d106      	bne.n	800b504 <tcp_rexmit_rto+0x1c>
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <tcp_rexmit_rto+0x38>)
 800b4f8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b4fc:	4909      	ldr	r1, [pc, #36]	@ (800b524 <tcp_rexmit_rto+0x3c>)
 800b4fe:	480a      	ldr	r0, [pc, #40]	@ (800b528 <tcp_rexmit_rto+0x40>)
 800b500:	f003 fab2 	bl	800ea68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7ff ff57 	bl	800b3b8 <tcp_rexmit_rto_prepare>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff ffc1 	bl	800b498 <tcp_rexmit_rto_commit>
  }
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	0801101c 	.word	0x0801101c
 800b524:	080116a0 	.word	0x080116a0
 800b528:	08011070 	.word	0x08011070

0800b52c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b52c:	b590      	push	{r4, r7, lr}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d106      	bne.n	800b548 <tcp_rexmit+0x1c>
 800b53a:	4b2f      	ldr	r3, [pc, #188]	@ (800b5f8 <tcp_rexmit+0xcc>)
 800b53c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b540:	492e      	ldr	r1, [pc, #184]	@ (800b5fc <tcp_rexmit+0xd0>)
 800b542:	482f      	ldr	r0, [pc, #188]	@ (800b600 <tcp_rexmit+0xd4>)
 800b544:	f003 fa90 	bl	800ea68 <iprintf>

  if (pcb->unacked == NULL) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b550:	f06f 0305 	mvn.w	r3, #5
 800b554:	e04c      	b.n	800b5f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b55a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f7ff fe2b 	bl	800b1b8 <tcp_output_segment_busy>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b568:	f06f 0305 	mvn.w	r3, #5
 800b56c:	e040      	b.n	800b5f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	336c      	adds	r3, #108	@ 0x6c
 800b57a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b57c:	e002      	b.n	800b584 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d011      	beq.n	800b5b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	f7f8 fdb5 	bl	8004104 <lwip_htonl>
 800b59a:	4604      	mov	r4, r0
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7f8 fdae 	bl	8004104 <lwip_htonl>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	dbe6      	blt.n	800b57e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d103      	bne.n	800b5ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5d4:	2bff      	cmp	r3, #255	@ 0xff
 800b5d6:	d007      	beq.n	800b5e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5de:	3301      	adds	r3, #1
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd90      	pop	{r4, r7, pc}
 800b5f8:	0801101c 	.word	0x0801101c
 800b5fc:	080116bc 	.word	0x080116bc
 800b600:	08011070 	.word	0x08011070

0800b604 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d106      	bne.n	800b620 <tcp_rexmit_fast+0x1c>
 800b612:	4b2a      	ldr	r3, [pc, #168]	@ (800b6bc <tcp_rexmit_fast+0xb8>)
 800b614:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b618:	4929      	ldr	r1, [pc, #164]	@ (800b6c0 <tcp_rexmit_fast+0xbc>)
 800b61a:	482a      	ldr	r0, [pc, #168]	@ (800b6c4 <tcp_rexmit_fast+0xc0>)
 800b61c:	f003 fa24 	bl	800ea68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b624:	2b00      	cmp	r3, #0
 800b626:	d044      	beq.n	800b6b2 <tcp_rexmit_fast+0xae>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8b5b      	ldrh	r3, [r3, #26]
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d13e      	bne.n	800b6b2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7ff ff79 	bl	800b52c <tcp_rexmit>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d138      	bne.n	800b6b2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b64c:	4293      	cmp	r3, r2
 800b64e:	bf28      	it	cs
 800b650:	4613      	movcs	r3, r2
 800b652:	b29b      	uxth	r3, r3
 800b654:	0fda      	lsrs	r2, r3, #31
 800b656:	4413      	add	r3, r2
 800b658:	105b      	asrs	r3, r3, #1
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b668:	461a      	mov	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	429a      	cmp	r2, r3
 800b672:	d206      	bcs.n	800b682 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b68c:	4619      	mov	r1, r3
 800b68e:	0049      	lsls	r1, r1, #1
 800b690:	440b      	add	r3, r1
 800b692:	b29b      	uxth	r3, r3
 800b694:	4413      	add	r3, r2
 800b696:	b29a      	uxth	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	8b5b      	ldrh	r3, [r3, #26]
 800b6a2:	f043 0304 	orr.w	r3, r3, #4
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	0801101c 	.word	0x0801101c
 800b6c0:	080116d4 	.word	0x080116d4
 800b6c4:	08011070 	.word	0x08011070

0800b6c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	817b      	strh	r3, [r7, #10]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b6da:	897a      	ldrh	r2, [r7, #10]
 800b6dc:	893b      	ldrh	r3, [r7, #8]
 800b6de:	4413      	add	r3, r2
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3314      	adds	r3, #20
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	2022      	movs	r0, #34	@ 0x22
 800b6ee:	f7f9 fd71 	bl	80051d4 <pbuf_alloc>
 800b6f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d04d      	beq.n	800b796 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b6fa:	897b      	ldrh	r3, [r7, #10]
 800b6fc:	3313      	adds	r3, #19
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	8952      	ldrh	r2, [r2, #10]
 800b702:	4293      	cmp	r3, r2
 800b704:	db06      	blt.n	800b714 <tcp_output_alloc_header_common+0x4c>
 800b706:	4b26      	ldr	r3, [pc, #152]	@ (800b7a0 <tcp_output_alloc_header_common+0xd8>)
 800b708:	f240 7223 	movw	r2, #1827	@ 0x723
 800b70c:	4925      	ldr	r1, [pc, #148]	@ (800b7a4 <tcp_output_alloc_header_common+0xdc>)
 800b70e:	4826      	ldr	r0, [pc, #152]	@ (800b7a8 <tcp_output_alloc_header_common+0xe0>)
 800b710:	f003 f9aa 	bl	800ea68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b71a:	8c3b      	ldrh	r3, [r7, #32]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f8 fcdb 	bl	80040d8 <lwip_htons>
 800b722:	4603      	mov	r3, r0
 800b724:	461a      	mov	r2, r3
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b72a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f8 fcd3 	bl	80040d8 <lwip_htons>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7f8 fcdf 	bl	8004104 <lwip_htonl>
 800b746:	4602      	mov	r2, r0
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b74c:	897b      	ldrh	r3, [r7, #10]
 800b74e:	089b      	lsrs	r3, r3, #2
 800b750:	b29b      	uxth	r3, r3
 800b752:	3305      	adds	r3, #5
 800b754:	b29b      	uxth	r3, r3
 800b756:	031b      	lsls	r3, r3, #12
 800b758:	b29a      	uxth	r2, r3
 800b75a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b75e:	b29b      	uxth	r3, r3
 800b760:	4313      	orrs	r3, r2
 800b762:	b29b      	uxth	r3, r3
 800b764:	4618      	mov	r0, r3
 800b766:	f7f8 fcb7 	bl	80040d8 <lwip_htons>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b772:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b774:	4618      	mov	r0, r3
 800b776:	f7f8 fcaf 	bl	80040d8 <lwip_htons>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2200      	movs	r2, #0
 800b786:	741a      	strb	r2, [r3, #16]
 800b788:	2200      	movs	r2, #0
 800b78a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2200      	movs	r2, #0
 800b790:	749a      	strb	r2, [r3, #18]
 800b792:	2200      	movs	r2, #0
 800b794:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b796:	697b      	ldr	r3, [r7, #20]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	0801101c 	.word	0x0801101c
 800b7a4:	080116f4 	.word	0x080116f4
 800b7a8:	08011070 	.word	0x08011070

0800b7ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b7ac:	b5b0      	push	{r4, r5, r7, lr}
 800b7ae:	b08a      	sub	sp, #40	@ 0x28
 800b7b0:	af04      	add	r7, sp, #16
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	817b      	strh	r3, [r7, #10]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <tcp_output_alloc_header+0x26>
 800b7c4:	4b15      	ldr	r3, [pc, #84]	@ (800b81c <tcp_output_alloc_header+0x70>)
 800b7c6:	f240 7242 	movw	r2, #1858	@ 0x742
 800b7ca:	4915      	ldr	r1, [pc, #84]	@ (800b820 <tcp_output_alloc_header+0x74>)
 800b7cc:	4815      	ldr	r0, [pc, #84]	@ (800b824 <tcp_output_alloc_header+0x78>)
 800b7ce:	f003 f94b 	bl	800ea68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	8adb      	ldrh	r3, [r3, #22]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	8b12      	ldrh	r2, [r2, #24]
 800b7de:	68f9      	ldr	r1, [r7, #12]
 800b7e0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800b7e2:	893d      	ldrh	r5, [r7, #8]
 800b7e4:	897c      	ldrh	r4, [r7, #10]
 800b7e6:	9103      	str	r1, [sp, #12]
 800b7e8:	2110      	movs	r1, #16
 800b7ea:	9102      	str	r1, [sp, #8]
 800b7ec:	9201      	str	r2, [sp, #4]
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	f7ff ff67 	bl	800b6c8 <tcp_output_alloc_header_common>
 800b7fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d006      	beq.n	800b810 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b80a:	441a      	add	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800b810:	697b      	ldr	r3, [r7, #20]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bdb0      	pop	{r4, r5, r7, pc}
 800b81a:	bf00      	nop
 800b81c:	0801101c 	.word	0x0801101c
 800b820:	08011724 	.word	0x08011724
 800b824:	08011070 	.word	0x08011070

0800b828 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	4611      	mov	r1, r2
 800b834:	461a      	mov	r2, r3
 800b836:	460b      	mov	r3, r1
 800b838:	71fb      	strb	r3, [r7, #7]
 800b83a:	4613      	mov	r3, r2
 800b83c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d106      	bne.n	800b856 <tcp_output_fill_options+0x2e>
 800b848:	4b12      	ldr	r3, [pc, #72]	@ (800b894 <tcp_output_fill_options+0x6c>)
 800b84a:	f240 7256 	movw	r2, #1878	@ 0x756
 800b84e:	4912      	ldr	r1, [pc, #72]	@ (800b898 <tcp_output_fill_options+0x70>)
 800b850:	4812      	ldr	r0, [pc, #72]	@ (800b89c <tcp_output_fill_options+0x74>)
 800b852:	f003 f909 	bl	800ea68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	3314      	adds	r3, #20
 800b860:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b862:	8bfb      	ldrh	r3, [r7, #30]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	461a      	mov	r2, r3
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	4413      	add	r3, r2
 800b872:	3314      	adds	r3, #20
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	4413      	add	r3, r2
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d006      	beq.n	800b88c <tcp_output_fill_options+0x64>
 800b87e:	4b05      	ldr	r3, [pc, #20]	@ (800b894 <tcp_output_fill_options+0x6c>)
 800b880:	f240 7275 	movw	r2, #1909	@ 0x775
 800b884:	4906      	ldr	r1, [pc, #24]	@ (800b8a0 <tcp_output_fill_options+0x78>)
 800b886:	4805      	ldr	r0, [pc, #20]	@ (800b89c <tcp_output_fill_options+0x74>)
 800b888:	f003 f8ee 	bl	800ea68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b88c:	bf00      	nop
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	0801101c 	.word	0x0801101c
 800b898:	0801174c 	.word	0x0801174c
 800b89c:	08011070 	.word	0x08011070
 800b8a0:	08011644 	.word	0x08011644

0800b8a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08a      	sub	sp, #40	@ 0x28
 800b8a8:	af04      	add	r7, sp, #16
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <tcp_output_control_segment+0x22>
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b92c <tcp_output_control_segment+0x88>)
 800b8ba:	f240 7287 	movw	r2, #1927	@ 0x787
 800b8be:	491c      	ldr	r1, [pc, #112]	@ (800b930 <tcp_output_control_segment+0x8c>)
 800b8c0:	481c      	ldr	r0, [pc, #112]	@ (800b934 <tcp_output_control_segment+0x90>)
 800b8c2:	f003 f8d1 	bl	800ea68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	6879      	ldr	r1, [r7, #4]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7fe faea 	bl	8009ea4 <tcp_route>
 800b8d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b8d8:	23fc      	movs	r3, #252	@ 0xfc
 800b8da:	75fb      	strb	r3, [r7, #23]
 800b8dc:	e01c      	b.n	800b918 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	7adb      	ldrb	r3, [r3, #11]
 800b8e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	7a9b      	ldrb	r3, [r3, #10]
 800b8ee:	757b      	strb	r3, [r7, #21]
 800b8f0:	e003      	b.n	800b8fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b8f2:	23ff      	movs	r3, #255	@ 0xff
 800b8f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b8fa:	7dba      	ldrb	r2, [r7, #22]
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	9302      	str	r3, [sp, #8]
 800b900:	2306      	movs	r3, #6
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	7d7b      	ldrb	r3, [r7, #21]
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	4613      	mov	r3, r2
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	68b8      	ldr	r0, [r7, #8]
 800b910:	f001 ff7c 	bl	800d80c <ip4_output_if>
 800b914:	4603      	mov	r3, r0
 800b916:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b918:	68b8      	ldr	r0, [r7, #8]
 800b91a:	f7f9 ff3f 	bl	800579c <pbuf_free>
  return err;
 800b91e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	0801101c 	.word	0x0801101c
 800b930:	08011774 	.word	0x08011774
 800b934:	08011070 	.word	0x08011070

0800b938 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b08b      	sub	sp, #44	@ 0x2c
 800b93c:	af04      	add	r7, sp, #16
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d106      	bne.n	800b95a <tcp_rst+0x22>
 800b94c:	4b1f      	ldr	r3, [pc, #124]	@ (800b9cc <tcp_rst+0x94>)
 800b94e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b952:	491f      	ldr	r1, [pc, #124]	@ (800b9d0 <tcp_rst+0x98>)
 800b954:	481f      	ldr	r0, [pc, #124]	@ (800b9d4 <tcp_rst+0x9c>)
 800b956:	f003 f887 	bl	800ea68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <tcp_rst+0x36>
 800b960:	4b1a      	ldr	r3, [pc, #104]	@ (800b9cc <tcp_rst+0x94>)
 800b962:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b966:	491c      	ldr	r1, [pc, #112]	@ (800b9d8 <tcp_rst+0xa0>)
 800b968:	481a      	ldr	r0, [pc, #104]	@ (800b9d4 <tcp_rst+0x9c>)
 800b96a:	f003 f87d 	bl	800ea68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b96e:	2300      	movs	r3, #0
 800b970:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b972:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b976:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	b29c      	uxth	r4, r3
 800b97c:	68b8      	ldr	r0, [r7, #8]
 800b97e:	f7f8 fbc1 	bl	8004104 <lwip_htonl>
 800b982:	4602      	mov	r2, r0
 800b984:	8abb      	ldrh	r3, [r7, #20]
 800b986:	9303      	str	r3, [sp, #12]
 800b988:	2314      	movs	r3, #20
 800b98a:	9302      	str	r3, [sp, #8]
 800b98c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	4613      	mov	r3, r2
 800b996:	2200      	movs	r2, #0
 800b998:	4621      	mov	r1, r4
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff fe94 	bl	800b6c8 <tcp_output_alloc_header_common>
 800b9a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00c      	beq.n	800b9c2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	6939      	ldr	r1, [r7, #16]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f7ff ff3a 	bl	800b828 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	6939      	ldr	r1, [r7, #16]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff ff72 	bl	800b8a4 <tcp_output_control_segment>
 800b9c0:	e000      	b.n	800b9c4 <tcp_rst+0x8c>
    return;
 800b9c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b9c4:	371c      	adds	r7, #28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd90      	pop	{r4, r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0801101c 	.word	0x0801101c
 800b9d0:	080117a0 	.word	0x080117a0
 800b9d4:	08011070 	.word	0x08011070
 800b9d8:	080117bc 	.word	0x080117bc

0800b9dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b9dc:	b590      	push	{r4, r7, lr}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <tcp_send_empty_ack+0x24>
 800b9f2:	4b28      	ldr	r3, [pc, #160]	@ (800ba94 <tcp_send_empty_ack+0xb8>)
 800b9f4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b9f8:	4927      	ldr	r1, [pc, #156]	@ (800ba98 <tcp_send_empty_ack+0xbc>)
 800b9fa:	4828      	ldr	r0, [pc, #160]	@ (800ba9c <tcp_send_empty_ack+0xc0>)
 800b9fc:	f003 f834 	bl	800ea68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	f003 0304 	and.w	r3, r3, #4
 800ba0a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ba0c:	7d7b      	ldrb	r3, [r7, #21]
 800ba0e:	b29c      	uxth	r4, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7f8 fb75 	bl	8004104 <lwip_htonl>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4621      	mov	r1, r4
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff fec3 	bl	800b7ac <tcp_output_alloc_header>
 800ba26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d109      	bne.n	800ba42 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8b5b      	ldrh	r3, [r3, #26]
 800ba32:	f043 0303 	orr.w	r3, r3, #3
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ba3c:	f06f 0301 	mvn.w	r3, #1
 800ba40:	e023      	b.n	800ba8a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ba42:	7dbb      	ldrb	r3, [r7, #22]
 800ba44:	7dfa      	ldrb	r2, [r7, #23]
 800ba46:	6939      	ldr	r1, [r7, #16]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff feed 	bl	800b828 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3304      	adds	r3, #4
 800ba54:	6939      	ldr	r1, [r7, #16]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff ff24 	bl	800b8a4 <tcp_output_control_segment>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ba60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d007      	beq.n	800ba78 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	8b5b      	ldrh	r3, [r3, #26]
 800ba6c:	f043 0303 	orr.w	r3, r3, #3
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	835a      	strh	r2, [r3, #26]
 800ba76:	e006      	b.n	800ba86 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8b5b      	ldrh	r3, [r3, #26]
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ba86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	371c      	adds	r7, #28
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd90      	pop	{r4, r7, pc}
 800ba92:	bf00      	nop
 800ba94:	0801101c 	.word	0x0801101c
 800ba98:	080117d8 	.word	0x080117d8
 800ba9c:	08011070 	.word	0x08011070

0800baa0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800baa0:	b590      	push	{r4, r7, lr}
 800baa2:	b087      	sub	sp, #28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800baa8:	2300      	movs	r3, #0
 800baaa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <tcp_keepalive+0x20>
 800bab2:	4b18      	ldr	r3, [pc, #96]	@ (800bb14 <tcp_keepalive+0x74>)
 800bab4:	f640 0224 	movw	r2, #2084	@ 0x824
 800bab8:	4917      	ldr	r1, [pc, #92]	@ (800bb18 <tcp_keepalive+0x78>)
 800baba:	4818      	ldr	r0, [pc, #96]	@ (800bb1c <tcp_keepalive+0x7c>)
 800babc:	f002 ffd4 	bl	800ea68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
 800bac2:	b29c      	uxth	r4, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac8:	3b01      	subs	r3, #1
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f8 fb1a 	bl	8004104 <lwip_htonl>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2200      	movs	r2, #0
 800bad4:	4621      	mov	r1, r4
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7ff fe68 	bl	800b7ac <tcp_output_alloc_header>
 800badc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bae4:	f04f 33ff 	mov.w	r3, #4294967295
 800bae8:	e010      	b.n	800bb0c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800baea:	7dfb      	ldrb	r3, [r7, #23]
 800baec:	2200      	movs	r2, #0
 800baee:	6939      	ldr	r1, [r7, #16]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff fe99 	bl	800b828 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3304      	adds	r3, #4
 800bafc:	6939      	ldr	r1, [r7, #16]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fed0 	bl	800b8a4 <tcp_output_control_segment>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	371c      	adds	r7, #28
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd90      	pop	{r4, r7, pc}
 800bb14:	0801101c 	.word	0x0801101c
 800bb18:	080117f8 	.word	0x080117f8
 800bb1c:	08011070 	.word	0x08011070

0800bb20 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b08b      	sub	sp, #44	@ 0x2c
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <tcp_zero_window_probe+0x22>
 800bb34:	4b4c      	ldr	r3, [pc, #304]	@ (800bc68 <tcp_zero_window_probe+0x148>)
 800bb36:	f640 024f 	movw	r2, #2127	@ 0x84f
 800bb3a:	494c      	ldr	r1, [pc, #304]	@ (800bc6c <tcp_zero_window_probe+0x14c>)
 800bb3c:	484c      	ldr	r0, [pc, #304]	@ (800bc70 <tcp_zero_window_probe+0x150>)
 800bb3e:	f002 ff93 	bl	800ea68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb46:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	e086      	b.n	800bc60 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bb58:	2bff      	cmp	r3, #255	@ 0xff
 800bb5a:	d007      	beq.n	800bb6c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bb62:	3301      	adds	r3, #1
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	899b      	ldrh	r3, [r3, #12]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f8 faaf 	bl	80040d8 <lwip_htons>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d005      	beq.n	800bb92 <tcp_zero_window_probe+0x72>
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	891b      	ldrh	r3, [r3, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <tcp_zero_window_probe+0x72>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <tcp_zero_window_probe+0x74>
 800bb92:	2300      	movs	r3, #0
 800bb94:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bb96:	7ffb      	ldrb	r3, [r7, #31]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2301      	moveq	r3, #1
 800bb9e:	2300      	movne	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bba8:	b299      	uxth	r1, r3
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	8bba      	ldrh	r2, [r7, #28]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7ff fdfa 	bl	800b7ac <tcp_output_alloc_header>
 800bbb8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc4:	e04c      	b.n	800bc60 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bbcc:	7ffb      	ldrb	r3, [r7, #31]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d011      	beq.n	800bbf6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	899b      	ldrh	r3, [r3, #12]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	b21b      	sxth	r3, r3
 800bbda:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbde:	b21c      	sxth	r4, r3
 800bbe0:	2011      	movs	r0, #17
 800bbe2:	f7f8 fa79 	bl	80040d8 <lwip_htons>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	b21b      	sxth	r3, r3
 800bbea:	4323      	orrs	r3, r4
 800bbec:	b21b      	sxth	r3, r3
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	819a      	strh	r2, [r3, #12]
 800bbf4:	e010      	b.n	800bc18 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	3314      	adds	r3, #20
 800bbfc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	6858      	ldr	r0, [r3, #4]
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	891a      	ldrh	r2, [r3, #8]
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	891b      	ldrh	r3, [r3, #8]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	2201      	movs	r2, #1
 800bc12:	6939      	ldr	r1, [r7, #16]
 800bc14:	f7f9 ffac 	bl	8005b70 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f8 fa70 	bl	8004104 <lwip_htonl>
 800bc24:	4603      	mov	r3, r0
 800bc26:	3301      	adds	r3, #1
 800bc28:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	da02      	bge.n	800bc3c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc40:	2200      	movs	r2, #0
 800bc42:	69b9      	ldr	r1, [r7, #24]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fdef 	bl	800b828 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	69b9      	ldr	r1, [r7, #24]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fe26 	bl	800b8a4 <tcp_output_control_segment>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bc5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	372c      	adds	r7, #44	@ 0x2c
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd90      	pop	{r4, r7, pc}
 800bc68:	0801101c 	.word	0x0801101c
 800bc6c:	08011814 	.word	0x08011814
 800bc70:	08011070 	.word	0x08011070

0800bc74 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bc7c:	f7fa f952 	bl	8005f24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bc80:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <tcpip_tcp_timer+0x38>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <tcpip_tcp_timer+0x1c>
 800bc88:	4b09      	ldr	r3, [pc, #36]	@ (800bcb0 <tcpip_tcp_timer+0x3c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bc90:	2200      	movs	r2, #0
 800bc92:	4908      	ldr	r1, [pc, #32]	@ (800bcb4 <tcpip_tcp_timer+0x40>)
 800bc94:	20fa      	movs	r0, #250	@ 0xfa
 800bc96:	f000 f8f3 	bl	800be80 <sys_timeout>
 800bc9a:	e003      	b.n	800bca4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bc9c:	4b06      	ldr	r3, [pc, #24]	@ (800bcb8 <tcpip_tcp_timer+0x44>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	601a      	str	r2, [r3, #0]
  }
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	20008310 	.word	0x20008310
 800bcb0:	20008314 	.word	0x20008314
 800bcb4:	0800bc75 	.word	0x0800bc75
 800bcb8:	2000835c 	.word	0x2000835c

0800bcbc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <tcp_timer_needed+0x30>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10f      	bne.n	800bce8 <tcp_timer_needed+0x2c>
 800bcc8:	4b09      	ldr	r3, [pc, #36]	@ (800bcf0 <tcp_timer_needed+0x34>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d103      	bne.n	800bcd8 <tcp_timer_needed+0x1c>
 800bcd0:	4b08      	ldr	r3, [pc, #32]	@ (800bcf4 <tcp_timer_needed+0x38>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d007      	beq.n	800bce8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bcd8:	4b04      	ldr	r3, [pc, #16]	@ (800bcec <tcp_timer_needed+0x30>)
 800bcda:	2201      	movs	r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bcde:	2200      	movs	r2, #0
 800bce0:	4905      	ldr	r1, [pc, #20]	@ (800bcf8 <tcp_timer_needed+0x3c>)
 800bce2:	20fa      	movs	r0, #250	@ 0xfa
 800bce4:	f000 f8cc 	bl	800be80 <sys_timeout>
  }
}
 800bce8:	bf00      	nop
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	2000835c 	.word	0x2000835c
 800bcf0:	20008310 	.word	0x20008310
 800bcf4:	20008314 	.word	0x20008314
 800bcf8:	0800bc75 	.word	0x0800bc75

0800bcfc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bd08:	2007      	movs	r0, #7
 800bd0a:	f7f8 fe5d 	bl	80049c8 <memp_malloc>
 800bd0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d109      	bne.n	800bd2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d151      	bne.n	800bdc0 <sys_timeout_abs+0xc4>
 800bd1c:	4b2a      	ldr	r3, [pc, #168]	@ (800bdc8 <sys_timeout_abs+0xcc>)
 800bd1e:	22be      	movs	r2, #190	@ 0xbe
 800bd20:	492a      	ldr	r1, [pc, #168]	@ (800bdcc <sys_timeout_abs+0xd0>)
 800bd22:	482b      	ldr	r0, [pc, #172]	@ (800bdd0 <sys_timeout_abs+0xd4>)
 800bd24:	f002 fea0 	bl	800ea68 <iprintf>
    return;
 800bd28:	e04a      	b.n	800bdc0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bd42:	4b24      	ldr	r3, [pc, #144]	@ (800bdd4 <sys_timeout_abs+0xd8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d103      	bne.n	800bd52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bd4a:	4a22      	ldr	r2, [pc, #136]	@ (800bdd4 <sys_timeout_abs+0xd8>)
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6013      	str	r3, [r2, #0]
    return;
 800bd50:	e037      	b.n	800bdc2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	4b1f      	ldr	r3, [pc, #124]	@ (800bdd4 <sys_timeout_abs+0xd8>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	0fdb      	lsrs	r3, r3, #31
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d007      	beq.n	800bd7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bd6a:	4b1a      	ldr	r3, [pc, #104]	@ (800bdd4 <sys_timeout_abs+0xd8>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bd72:	4a18      	ldr	r2, [pc, #96]	@ (800bdd4 <sys_timeout_abs+0xd8>)
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	e023      	b.n	800bdc2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bd7a:	4b16      	ldr	r3, [pc, #88]	@ (800bdd4 <sys_timeout_abs+0xd8>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	e01a      	b.n	800bdb8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00b      	beq.n	800bda2 <sys_timeout_abs+0xa6>
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	0fdb      	lsrs	r3, r3, #31
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d007      	beq.n	800bdb2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	601a      	str	r2, [r3, #0]
        break;
 800bdb0:	e007      	b.n	800bdc2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1e1      	bne.n	800bd82 <sys_timeout_abs+0x86>
 800bdbe:	e000      	b.n	800bdc2 <sys_timeout_abs+0xc6>
    return;
 800bdc0:	bf00      	nop
      }
    }
  }
}
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	08011838 	.word	0x08011838
 800bdcc:	0801186c 	.word	0x0801186c
 800bdd0:	080118ac 	.word	0x080118ac
 800bdd4:	20008354 	.word	0x20008354

0800bdd8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	4798      	blx	r3

  now = sys_now();
 800bdea:	f7f7 ff5d 	bl	8003ca8 <sys_now>
 800bdee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	@ (800be34 <lwip_cyclic_timer+0x5c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	0fdb      	lsrs	r3, r3, #31
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d009      	beq.n	800be22 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	4413      	add	r3, r2
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	4907      	ldr	r1, [pc, #28]	@ (800be38 <lwip_cyclic_timer+0x60>)
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff ff6e 	bl	800bcfc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800be20:	e004      	b.n	800be2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	4904      	ldr	r1, [pc, #16]	@ (800be38 <lwip_cyclic_timer+0x60>)
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff ff68 	bl	800bcfc <sys_timeout_abs>
}
 800be2c:	bf00      	nop
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20008358 	.word	0x20008358
 800be38:	0800bdd9 	.word	0x0800bdd9

0800be3c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be42:	2301      	movs	r3, #1
 800be44:	607b      	str	r3, [r7, #4]
 800be46:	e00e      	b.n	800be66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800be48:	4a0b      	ldr	r2, [pc, #44]	@ (800be78 <sys_timeouts_init+0x3c>)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	4a08      	ldr	r2, [pc, #32]	@ (800be78 <sys_timeouts_init+0x3c>)
 800be56:	4413      	add	r3, r2
 800be58:	461a      	mov	r2, r3
 800be5a:	4908      	ldr	r1, [pc, #32]	@ (800be7c <sys_timeouts_init+0x40>)
 800be5c:	f000 f810 	bl	800be80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3301      	adds	r3, #1
 800be64:	607b      	str	r3, [r7, #4]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d9ed      	bls.n	800be48 <sys_timeouts_init+0xc>
  }
}
 800be6c:	bf00      	nop
 800be6e:	bf00      	nop
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	08012434 	.word	0x08012434
 800be7c:	0800bdd9 	.word	0x0800bdd9

0800be80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be92:	d306      	bcc.n	800bea2 <sys_timeout+0x22>
 800be94:	4b0a      	ldr	r3, [pc, #40]	@ (800bec0 <sys_timeout+0x40>)
 800be96:	f240 1229 	movw	r2, #297	@ 0x129
 800be9a:	490a      	ldr	r1, [pc, #40]	@ (800bec4 <sys_timeout+0x44>)
 800be9c:	480a      	ldr	r0, [pc, #40]	@ (800bec8 <sys_timeout+0x48>)
 800be9e:	f002 fde3 	bl	800ea68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bea2:	f7f7 ff01 	bl	8003ca8 <sys_now>
 800bea6:	4602      	mov	r2, r0
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	68b9      	ldr	r1, [r7, #8]
 800beb2:	6978      	ldr	r0, [r7, #20]
 800beb4:	f7ff ff22 	bl	800bcfc <sys_timeout_abs>
#endif
}
 800beb8:	bf00      	nop
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	08011838 	.word	0x08011838
 800bec4:	080118d4 	.word	0x080118d4
 800bec8:	080118ac 	.word	0x080118ac

0800becc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bed2:	f7f7 fee9 	bl	8003ca8 <sys_now>
 800bed6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bed8:	4b1a      	ldr	r3, [pc, #104]	@ (800bf44 <sys_check_timeouts+0x78>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <sys_check_timeouts+0x1a>
 800bee2:	f7f9 f921 	bl	8005128 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bee6:	4b18      	ldr	r3, [pc, #96]	@ (800bf48 <sys_check_timeouts+0x7c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d022      	beq.n	800bf38 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	0fdb      	lsrs	r3, r3, #31
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d11a      	bne.n	800bf3c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a0f      	ldr	r2, [pc, #60]	@ (800bf48 <sys_check_timeouts+0x7c>)
 800bf0c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	4a0b      	ldr	r2, [pc, #44]	@ (800bf4c <sys_check_timeouts+0x80>)
 800bf20:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bf22:	68b9      	ldr	r1, [r7, #8]
 800bf24:	2007      	movs	r0, #7
 800bf26:	f7f8 fdbf 	bl	8004aa8 <memp_free>
    if (handler != NULL) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0d3      	beq.n	800bed8 <sys_check_timeouts+0xc>
      handler(arg);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6838      	ldr	r0, [r7, #0]
 800bf34:	4798      	blx	r3
  do {
 800bf36:	e7cf      	b.n	800bed8 <sys_check_timeouts+0xc>
      return;
 800bf38:	bf00      	nop
 800bf3a:	e000      	b.n	800bf3e <sys_check_timeouts+0x72>
      return;
 800bf3c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	200082fd 	.word	0x200082fd
 800bf48:	20008354 	.word	0x20008354
 800bf4c:	20008358 	.word	0x20008358

0800bf50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf54:	f002 fc88 	bl	800e868 <rand>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	4b01      	ldr	r3, [pc, #4]	@ (800bf70 <udp_init+0x20>)
 800bf6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf6c:	bf00      	nop
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000028 	.word	0x20000028

0800bf74 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d105      	bne.n	800bf94 <udp_input_local_match+0x20>
 800bf88:	4b27      	ldr	r3, [pc, #156]	@ (800c028 <udp_input_local_match+0xb4>)
 800bf8a:	2287      	movs	r2, #135	@ 0x87
 800bf8c:	4927      	ldr	r1, [pc, #156]	@ (800c02c <udp_input_local_match+0xb8>)
 800bf8e:	4828      	ldr	r0, [pc, #160]	@ (800c030 <udp_input_local_match+0xbc>)
 800bf90:	f002 fd6a 	bl	800ea68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <udp_input_local_match+0x32>
 800bf9a:	4b23      	ldr	r3, [pc, #140]	@ (800c028 <udp_input_local_match+0xb4>)
 800bf9c:	2288      	movs	r2, #136	@ 0x88
 800bf9e:	4925      	ldr	r1, [pc, #148]	@ (800c034 <udp_input_local_match+0xc0>)
 800bfa0:	4823      	ldr	r0, [pc, #140]	@ (800c030 <udp_input_local_match+0xbc>)
 800bfa2:	f002 fd61 	bl	800ea68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	7a1b      	ldrb	r3, [r3, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	7a1a      	ldrb	r2, [r3, #8]
 800bfb2:	4b21      	ldr	r3, [pc, #132]	@ (800c038 <udp_input_local_match+0xc4>)
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfba:	3301      	adds	r3, #1
 800bfbc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d001      	beq.n	800bfc6 <udp_input_local_match+0x52>
    return 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e02b      	b.n	800c01e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d018      	beq.n	800bffe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d013      	beq.n	800bffa <udp_input_local_match+0x86>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00f      	beq.n	800bffa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bfda:	4b17      	ldr	r3, [pc, #92]	@ (800c038 <udp_input_local_match+0xc4>)
 800bfdc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe2:	d00a      	beq.n	800bffa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	4b13      	ldr	r3, [pc, #76]	@ (800c038 <udp_input_local_match+0xc4>)
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	405a      	eors	r2, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	3308      	adds	r3, #8
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d110      	bne.n	800c01c <udp_input_local_match+0xa8>
          return 1;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e00f      	b.n	800c01e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <udp_input_local_match+0xa4>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <udp_input_local_match+0xa4>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	4b09      	ldr	r3, [pc, #36]	@ (800c038 <udp_input_local_match+0xc4>)
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	429a      	cmp	r2, r3
 800c016:	d101      	bne.n	800c01c <udp_input_local_match+0xa8>
        return 1;
 800c018:	2301      	movs	r3, #1
 800c01a:	e000      	b.n	800c01e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	08011920 	.word	0x08011920
 800c02c:	08011950 	.word	0x08011950
 800c030:	08011974 	.word	0x08011974
 800c034:	0801199c 	.word	0x0801199c
 800c038:	20004d18 	.word	0x20004d18

0800c03c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c03c:	b590      	push	{r4, r7, lr}
 800c03e:	b08d      	sub	sp, #52	@ 0x34
 800c040:	af02      	add	r7, sp, #8
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d105      	bne.n	800c05c <udp_input+0x20>
 800c050:	4b7c      	ldr	r3, [pc, #496]	@ (800c244 <udp_input+0x208>)
 800c052:	22cf      	movs	r2, #207	@ 0xcf
 800c054:	497c      	ldr	r1, [pc, #496]	@ (800c248 <udp_input+0x20c>)
 800c056:	487d      	ldr	r0, [pc, #500]	@ (800c24c <udp_input+0x210>)
 800c058:	f002 fd06 	bl	800ea68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d105      	bne.n	800c06e <udp_input+0x32>
 800c062:	4b78      	ldr	r3, [pc, #480]	@ (800c244 <udp_input+0x208>)
 800c064:	22d0      	movs	r2, #208	@ 0xd0
 800c066:	497a      	ldr	r1, [pc, #488]	@ (800c250 <udp_input+0x214>)
 800c068:	4878      	ldr	r0, [pc, #480]	@ (800c24c <udp_input+0x210>)
 800c06a:	f002 fcfd 	bl	800ea68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	895b      	ldrh	r3, [r3, #10]
 800c072:	2b07      	cmp	r3, #7
 800c074:	d803      	bhi.n	800c07e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7f9 fb90 	bl	800579c <pbuf_free>
    goto end;
 800c07c:	e0de      	b.n	800c23c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c084:	4b73      	ldr	r3, [pc, #460]	@ (800c254 <udp_input+0x218>)
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	4a72      	ldr	r2, [pc, #456]	@ (800c254 <udp_input+0x218>)
 800c08a:	6812      	ldr	r2, [r2, #0]
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f001 fc94 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800c094:	4603      	mov	r3, r0
 800c096:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f8 f81a 	bl	80040d8 <lwip_htons>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	885b      	ldrh	r3, [r3, #2]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7f8 f812 	bl	80040d8 <lwip_htons>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0c4:	4b64      	ldr	r3, [pc, #400]	@ (800c258 <udp_input+0x21c>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0ca:	e054      	b.n	800c176 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	8a5b      	ldrh	r3, [r3, #18]
 800c0d0:	89fa      	ldrh	r2, [r7, #14]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d14a      	bne.n	800c16c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c0d6:	7cfb      	ldrb	r3, [r7, #19]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0de:	f7ff ff49 	bl	800bf74 <udp_input_local_match>
 800c0e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d041      	beq.n	800c16c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ea:	7c1b      	ldrb	r3, [r3, #16]
 800c0ec:	f003 0304 	and.w	r3, r3, #4
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d11d      	bne.n	800c130 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	61fb      	str	r3, [r7, #28]
 800c0fe:	e017      	b.n	800c130 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c100:	7cfb      	ldrb	r3, [r7, #19]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d014      	beq.n	800c130 <udp_input+0xf4>
 800c106:	4b53      	ldr	r3, [pc, #332]	@ (800c254 <udp_input+0x218>)
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d10f      	bne.n	800c130 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	3304      	adds	r3, #4
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d008      	beq.n	800c130 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	3304      	adds	r3, #4
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d101      	bne.n	800c130 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c132:	8a9b      	ldrh	r3, [r3, #20]
 800c134:	8a3a      	ldrh	r2, [r7, #16]
 800c136:	429a      	cmp	r2, r3
 800c138:	d118      	bne.n	800c16c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d005      	beq.n	800c14e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	4b43      	ldr	r3, [pc, #268]	@ (800c254 <udp_input+0x218>)
 800c148:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d10e      	bne.n	800c16c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d014      	beq.n	800c17e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	68da      	ldr	r2, [r3, #12]
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c15c:	4b3e      	ldr	r3, [pc, #248]	@ (800c258 <udp_input+0x21c>)
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c164:	4a3c      	ldr	r2, [pc, #240]	@ (800c258 <udp_input+0x21c>)
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c16a:	e008      	b.n	800c17e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	627b      	str	r3, [r7, #36]	@ 0x24
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1a7      	bne.n	800c0cc <udp_input+0x90>
 800c17c:	e000      	b.n	800c180 <udp_input+0x144>
        break;
 800c17e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <udp_input+0x15a>
    for_us = 1;
 800c190:	2301      	movs	r3, #1
 800c192:	76fb      	strb	r3, [r7, #27]
 800c194:	e00a      	b.n	800c1ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	3304      	adds	r3, #4
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	4b2d      	ldr	r3, [pc, #180]	@ (800c254 <udp_input+0x218>)
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	bf0c      	ite	eq
 800c1a4:	2301      	moveq	r3, #1
 800c1a6:	2300      	movne	r3, #0
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c1ac:	7efb      	ldrb	r3, [r7, #27]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d041      	beq.n	800c236 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c1b2:	2108      	movs	r1, #8
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7f9 fa6b 	bl	8005690 <pbuf_remove_header>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00a      	beq.n	800c1d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c1c0:	4b20      	ldr	r3, [pc, #128]	@ (800c244 <udp_input+0x208>)
 800c1c2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c1c6:	4925      	ldr	r1, [pc, #148]	@ (800c25c <udp_input+0x220>)
 800c1c8:	4820      	ldr	r0, [pc, #128]	@ (800c24c <udp_input+0x210>)
 800c1ca:	f002 fc4d 	bl	800ea68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7f9 fae4 	bl	800579c <pbuf_free>
      goto end;
 800c1d4:	e032      	b.n	800c23c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d012      	beq.n	800c202 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e6:	699c      	ldr	r4, [r3, #24]
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ea:	69d8      	ldr	r0, [r3, #28]
 800c1ec:	8a3b      	ldrh	r3, [r7, #16]
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4b1b      	ldr	r3, [pc, #108]	@ (800c260 <udp_input+0x224>)
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c1f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c1f8:	e021      	b.n	800c23e <udp_input+0x202>
        pbuf_free(p);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7f9 face 	bl	800579c <pbuf_free>
        goto end;
 800c200:	e01c      	b.n	800c23c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c202:	7cfb      	ldrb	r3, [r7, #19]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d112      	bne.n	800c22e <udp_input+0x1f2>
 800c208:	4b12      	ldr	r3, [pc, #72]	@ (800c254 <udp_input+0x218>)
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c210:	2be0      	cmp	r3, #224	@ 0xe0
 800c212:	d00c      	beq.n	800c22e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c214:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <udp_input+0x218>)
 800c216:	899b      	ldrh	r3, [r3, #12]
 800c218:	3308      	adds	r3, #8
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	b21b      	sxth	r3, r3
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7f9 faa8 	bl	8005776 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c226:	2103      	movs	r1, #3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 f89b 	bl	800d364 <icmp_dest_unreach>
      pbuf_free(p);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7f9 fab4 	bl	800579c <pbuf_free>
  return;
 800c234:	e003      	b.n	800c23e <udp_input+0x202>
    pbuf_free(p);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7f9 fab0 	bl	800579c <pbuf_free>
  return;
 800c23c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c23e:	372c      	adds	r7, #44	@ 0x2c
 800c240:	46bd      	mov	sp, r7
 800c242:	bd90      	pop	{r4, r7, pc}
 800c244:	08011920 	.word	0x08011920
 800c248:	080119c4 	.word	0x080119c4
 800c24c:	08011974 	.word	0x08011974
 800c250:	080119dc 	.word	0x080119dc
 800c254:	20004d18 	.word	0x20004d18
 800c258:	20008360 	.word	0x20008360
 800c25c:	080119f8 	.word	0x080119f8
 800c260:	20004d28 	.word	0x20004d28

0800c264 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d01e      	beq.n	800c2b2 <udp_netif_ip_addr_changed+0x4e>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01a      	beq.n	800c2b2 <udp_netif_ip_addr_changed+0x4e>
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d017      	beq.n	800c2b2 <udp_netif_ip_addr_changed+0x4e>
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d013      	beq.n	800c2b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c28a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c0 <udp_netif_ip_addr_changed+0x5c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	e00c      	b.n	800c2ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d103      	bne.n	800c2a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1ef      	bne.n	800c292 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c2b2:	bf00      	nop
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	20008360 	.word	0x20008360

0800c2c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c2cc:	4915      	ldr	r1, [pc, #84]	@ (800c324 <etharp_free_entry+0x60>)
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	440b      	add	r3, r1
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d013      	beq.n	800c308 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c2e0:	4910      	ldr	r1, [pc, #64]	@ (800c324 <etharp_free_entry+0x60>)
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	4413      	add	r3, r2
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	440b      	add	r3, r1
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7f9 fa53 	bl	800579c <pbuf_free>
    arp_table[i].q = NULL;
 800c2f6:	490b      	ldr	r1, [pc, #44]	@ (800c324 <etharp_free_entry+0x60>)
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	005b      	lsls	r3, r3, #1
 800c2fe:	4413      	add	r3, r2
 800c300:	00db      	lsls	r3, r3, #3
 800c302:	440b      	add	r3, r1
 800c304:	2200      	movs	r2, #0
 800c306:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c308:	4906      	ldr	r1, [pc, #24]	@ (800c324 <etharp_free_entry+0x60>)
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	4613      	mov	r3, r2
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	4413      	add	r3, r2
 800c312:	00db      	lsls	r3, r3, #3
 800c314:	440b      	add	r3, r1
 800c316:	3314      	adds	r3, #20
 800c318:	2200      	movs	r2, #0
 800c31a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	20008364 	.word	0x20008364

0800c328 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c32e:	2300      	movs	r3, #0
 800c330:	607b      	str	r3, [r7, #4]
 800c332:	e096      	b.n	800c462 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c334:	494f      	ldr	r1, [pc, #316]	@ (800c474 <etharp_tmr+0x14c>)
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	4613      	mov	r3, r2
 800c33a:	005b      	lsls	r3, r3, #1
 800c33c:	4413      	add	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	440b      	add	r3, r1
 800c342:	3314      	adds	r3, #20
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f000 8086 	beq.w	800c45c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c350:	4948      	ldr	r1, [pc, #288]	@ (800c474 <etharp_tmr+0x14c>)
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	4613      	mov	r3, r2
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	4413      	add	r3, r2
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	440b      	add	r3, r1
 800c35e:	3312      	adds	r3, #18
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	3301      	adds	r3, #1
 800c364:	b298      	uxth	r0, r3
 800c366:	4943      	ldr	r1, [pc, #268]	@ (800c474 <etharp_tmr+0x14c>)
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	440b      	add	r3, r1
 800c374:	3312      	adds	r3, #18
 800c376:	4602      	mov	r2, r0
 800c378:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c37a:	493e      	ldr	r1, [pc, #248]	@ (800c474 <etharp_tmr+0x14c>)
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	4613      	mov	r3, r2
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	4413      	add	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	440b      	add	r3, r1
 800c388:	3312      	adds	r3, #18
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c390:	d215      	bcs.n	800c3be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c392:	4938      	ldr	r1, [pc, #224]	@ (800c474 <etharp_tmr+0x14c>)
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	440b      	add	r3, r1
 800c3a0:	3314      	adds	r3, #20
 800c3a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d10e      	bne.n	800c3c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c3a8:	4932      	ldr	r1, [pc, #200]	@ (800c474 <etharp_tmr+0x14c>)
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	4413      	add	r3, r2
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	440b      	add	r3, r1
 800c3b6:	3312      	adds	r3, #18
 800c3b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c3ba:	2b04      	cmp	r3, #4
 800c3bc:	d903      	bls.n	800c3c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff ff80 	bl	800c2c4 <etharp_free_entry>
 800c3c4:	e04a      	b.n	800c45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c3c6:	492b      	ldr	r1, [pc, #172]	@ (800c474 <etharp_tmr+0x14c>)
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	4413      	add	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3314      	adds	r3, #20
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d10a      	bne.n	800c3f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c3dc:	4925      	ldr	r1, [pc, #148]	@ (800c474 <etharp_tmr+0x14c>)
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	440b      	add	r3, r1
 800c3ea:	3314      	adds	r3, #20
 800c3ec:	2204      	movs	r2, #4
 800c3ee:	701a      	strb	r2, [r3, #0]
 800c3f0:	e034      	b.n	800c45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c3f2:	4920      	ldr	r1, [pc, #128]	@ (800c474 <etharp_tmr+0x14c>)
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	440b      	add	r3, r1
 800c400:	3314      	adds	r3, #20
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b04      	cmp	r3, #4
 800c406:	d10a      	bne.n	800c41e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c408:	491a      	ldr	r1, [pc, #104]	@ (800c474 <etharp_tmr+0x14c>)
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	4613      	mov	r3, r2
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	3314      	adds	r3, #20
 800c418:	2202      	movs	r2, #2
 800c41a:	701a      	strb	r2, [r3, #0]
 800c41c:	e01e      	b.n	800c45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c41e:	4915      	ldr	r1, [pc, #84]	@ (800c474 <etharp_tmr+0x14c>)
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	440b      	add	r3, r1
 800c42c:	3314      	adds	r3, #20
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d113      	bne.n	800c45c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c434:	490f      	ldr	r1, [pc, #60]	@ (800c474 <etharp_tmr+0x14c>)
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	4613      	mov	r3, r2
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	440b      	add	r3, r1
 800c442:	3308      	adds	r3, #8
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	4613      	mov	r3, r2
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	4413      	add	r3, r2
 800c44e:	00db      	lsls	r3, r3, #3
 800c450:	4a08      	ldr	r2, [pc, #32]	@ (800c474 <etharp_tmr+0x14c>)
 800c452:	4413      	add	r3, r2
 800c454:	3304      	adds	r3, #4
 800c456:	4619      	mov	r1, r3
 800c458:	f000 fe6e 	bl	800d138 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	3301      	adds	r3, #1
 800c460:	607b      	str	r3, [r7, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b09      	cmp	r3, #9
 800c466:	f77f af65 	ble.w	800c334 <etharp_tmr+0xc>
      }
    }
  }
}
 800c46a:	bf00      	nop
 800c46c:	bf00      	nop
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20008364 	.word	0x20008364

0800c478 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	@ 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	460b      	mov	r3, r1
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c486:	230a      	movs	r3, #10
 800c488:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c48a:	230a      	movs	r3, #10
 800c48c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c48e:	230a      	movs	r3, #10
 800c490:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c496:	230a      	movs	r3, #10
 800c498:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	83bb      	strh	r3, [r7, #28]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	837b      	strh	r3, [r7, #26]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	843b      	strh	r3, [r7, #32]
 800c4aa:	e0ae      	b.n	800c60a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c4ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4b0:	49a6      	ldr	r1, [pc, #664]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	4413      	add	r3, r2
 800c4b8:	00db      	lsls	r3, r3, #3
 800c4ba:	440b      	add	r3, r1
 800c4bc:	3314      	adds	r3, #20
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c4c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c4c6:	2b0a      	cmp	r3, #10
 800c4c8:	d105      	bne.n	800c4d6 <etharp_find_entry+0x5e>
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d102      	bne.n	800c4d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c4d0:	8c3b      	ldrh	r3, [r7, #32]
 800c4d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c4d4:	e095      	b.n	800c602 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 8092 	beq.w	800c602 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d009      	beq.n	800c4f8 <etharp_find_entry+0x80>
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d806      	bhi.n	800c4f8 <etharp_find_entry+0x80>
 800c4ea:	4b99      	ldr	r3, [pc, #612]	@ (800c750 <etharp_find_entry+0x2d8>)
 800c4ec:	f240 1223 	movw	r2, #291	@ 0x123
 800c4f0:	4998      	ldr	r1, [pc, #608]	@ (800c754 <etharp_find_entry+0x2dc>)
 800c4f2:	4899      	ldr	r0, [pc, #612]	@ (800c758 <etharp_find_entry+0x2e0>)
 800c4f4:	f002 fab8 	bl	800ea68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d020      	beq.n	800c540 <etharp_find_entry+0xc8>
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6819      	ldr	r1, [r3, #0]
 800c502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c506:	4891      	ldr	r0, [pc, #580]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c508:	4613      	mov	r3, r2
 800c50a:	005b      	lsls	r3, r3, #1
 800c50c:	4413      	add	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	4403      	add	r3, r0
 800c512:	3304      	adds	r3, #4
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4299      	cmp	r1, r3
 800c518:	d112      	bne.n	800c540 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00c      	beq.n	800c53a <etharp_find_entry+0xc2>
 800c520:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c524:	4989      	ldr	r1, [pc, #548]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c526:	4613      	mov	r3, r2
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4413      	add	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	440b      	add	r3, r1
 800c530:	3308      	adds	r3, #8
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	429a      	cmp	r2, r3
 800c538:	d102      	bne.n	800c540 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c53a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c53e:	e100      	b.n	800c742 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d140      	bne.n	800c5c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c54a:	4980      	ldr	r1, [pc, #512]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c54c:	4613      	mov	r3, r2
 800c54e:	005b      	lsls	r3, r3, #1
 800c550:	4413      	add	r3, r2
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	440b      	add	r3, r1
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01a      	beq.n	800c592 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c55c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c560:	497a      	ldr	r1, [pc, #488]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c562:	4613      	mov	r3, r2
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	4413      	add	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	440b      	add	r3, r1
 800c56c:	3312      	adds	r3, #18
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	8bba      	ldrh	r2, [r7, #28]
 800c572:	429a      	cmp	r2, r3
 800c574:	d845      	bhi.n	800c602 <etharp_find_entry+0x18a>
            old_queue = i;
 800c576:	8c3b      	ldrh	r3, [r7, #32]
 800c578:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c57a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c57e:	4973      	ldr	r1, [pc, #460]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c580:	4613      	mov	r3, r2
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	4413      	add	r3, r2
 800c586:	00db      	lsls	r3, r3, #3
 800c588:	440b      	add	r3, r1
 800c58a:	3312      	adds	r3, #18
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	83bb      	strh	r3, [r7, #28]
 800c590:	e037      	b.n	800c602 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c596:	496d      	ldr	r1, [pc, #436]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c598:	4613      	mov	r3, r2
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4413      	add	r3, r2
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	440b      	add	r3, r1
 800c5a2:	3312      	adds	r3, #18
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	8b7a      	ldrh	r2, [r7, #26]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d82a      	bhi.n	800c602 <etharp_find_entry+0x18a>
            old_pending = i;
 800c5ac:	8c3b      	ldrh	r3, [r7, #32]
 800c5ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c5b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5b4:	4965      	ldr	r1, [pc, #404]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4413      	add	r3, r2
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	440b      	add	r3, r1
 800c5c0:	3312      	adds	r3, #18
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	837b      	strh	r3, [r7, #26]
 800c5c6:	e01c      	b.n	800c602 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d919      	bls.n	800c602 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c5ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5d2:	495e      	ldr	r1, [pc, #376]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	4413      	add	r3, r2
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	440b      	add	r3, r1
 800c5de:	3312      	adds	r3, #18
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	8b3a      	ldrh	r2, [r7, #24]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d80c      	bhi.n	800c602 <etharp_find_entry+0x18a>
            old_stable = i;
 800c5e8:	8c3b      	ldrh	r3, [r7, #32]
 800c5ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800c5ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5f0:	4956      	ldr	r1, [pc, #344]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	4413      	add	r3, r2
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	440b      	add	r3, r1
 800c5fc:	3312      	adds	r3, #18
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c602:	8c3b      	ldrh	r3, [r7, #32]
 800c604:	3301      	adds	r3, #1
 800c606:	b29b      	uxth	r3, r3
 800c608:	843b      	strh	r3, [r7, #32]
 800c60a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c60e:	2b09      	cmp	r3, #9
 800c610:	f77f af4c 	ble.w	800c4ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c614:	7afb      	ldrb	r3, [r7, #11]
 800c616:	f003 0302 	and.w	r3, r3, #2
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d108      	bne.n	800c630 <etharp_find_entry+0x1b8>
 800c61e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c622:	2b0a      	cmp	r3, #10
 800c624:	d107      	bne.n	800c636 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d102      	bne.n	800c636 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c630:	f04f 33ff 	mov.w	r3, #4294967295
 800c634:	e085      	b.n	800c742 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c636:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c63a:	2b09      	cmp	r3, #9
 800c63c:	dc02      	bgt.n	800c644 <etharp_find_entry+0x1cc>
    i = empty;
 800c63e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c640:	843b      	strh	r3, [r7, #32]
 800c642:	e039      	b.n	800c6b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c644:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c648:	2b09      	cmp	r3, #9
 800c64a:	dc14      	bgt.n	800c676 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c64c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c64e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c654:	493d      	ldr	r1, [pc, #244]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c656:	4613      	mov	r3, r2
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	4413      	add	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	440b      	add	r3, r1
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d018      	beq.n	800c698 <etharp_find_entry+0x220>
 800c666:	4b3a      	ldr	r3, [pc, #232]	@ (800c750 <etharp_find_entry+0x2d8>)
 800c668:	f240 126d 	movw	r2, #365	@ 0x16d
 800c66c:	493b      	ldr	r1, [pc, #236]	@ (800c75c <etharp_find_entry+0x2e4>)
 800c66e:	483a      	ldr	r0, [pc, #232]	@ (800c758 <etharp_find_entry+0x2e0>)
 800c670:	f002 f9fa 	bl	800ea68 <iprintf>
 800c674:	e010      	b.n	800c698 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c676:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	dc02      	bgt.n	800c684 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c67e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c680:	843b      	strh	r3, [r7, #32]
 800c682:	e009      	b.n	800c698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c688:	2b09      	cmp	r3, #9
 800c68a:	dc02      	bgt.n	800c692 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c68c:	8bfb      	ldrh	r3, [r7, #30]
 800c68e:	843b      	strh	r3, [r7, #32]
 800c690:	e002      	b.n	800c698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	e054      	b.n	800c742 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c698:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c69c:	2b09      	cmp	r3, #9
 800c69e:	dd06      	ble.n	800c6ae <etharp_find_entry+0x236>
 800c6a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c750 <etharp_find_entry+0x2d8>)
 800c6a2:	f240 127f 	movw	r2, #383	@ 0x17f
 800c6a6:	492e      	ldr	r1, [pc, #184]	@ (800c760 <etharp_find_entry+0x2e8>)
 800c6a8:	482b      	ldr	r0, [pc, #172]	@ (800c758 <etharp_find_entry+0x2e0>)
 800c6aa:	f002 f9dd 	bl	800ea68 <iprintf>
    etharp_free_entry(i);
 800c6ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff fe06 	bl	800c2c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c6b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6bc:	2b09      	cmp	r3, #9
 800c6be:	dd06      	ble.n	800c6ce <etharp_find_entry+0x256>
 800c6c0:	4b23      	ldr	r3, [pc, #140]	@ (800c750 <etharp_find_entry+0x2d8>)
 800c6c2:	f240 1283 	movw	r2, #387	@ 0x183
 800c6c6:	4926      	ldr	r1, [pc, #152]	@ (800c760 <etharp_find_entry+0x2e8>)
 800c6c8:	4823      	ldr	r0, [pc, #140]	@ (800c758 <etharp_find_entry+0x2e0>)
 800c6ca:	f002 f9cd 	bl	800ea68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c6ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6d2:	491e      	ldr	r1, [pc, #120]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	4413      	add	r3, r2
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	440b      	add	r3, r1
 800c6de:	3314      	adds	r3, #20
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <etharp_find_entry+0x27c>
 800c6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c750 <etharp_find_entry+0x2d8>)
 800c6e8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c6ec:	491d      	ldr	r1, [pc, #116]	@ (800c764 <etharp_find_entry+0x2ec>)
 800c6ee:	481a      	ldr	r0, [pc, #104]	@ (800c758 <etharp_find_entry+0x2e0>)
 800c6f0:	f002 f9ba 	bl	800ea68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00b      	beq.n	800c712 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c6fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6819      	ldr	r1, [r3, #0]
 800c702:	4812      	ldr	r0, [pc, #72]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	4403      	add	r3, r0
 800c70e:	3304      	adds	r3, #4
 800c710:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c716:	490d      	ldr	r1, [pc, #52]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c718:	4613      	mov	r3, r2
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	4413      	add	r3, r2
 800c71e:	00db      	lsls	r3, r3, #3
 800c720:	440b      	add	r3, r1
 800c722:	3312      	adds	r3, #18
 800c724:	2200      	movs	r2, #0
 800c726:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c728:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c72c:	4907      	ldr	r1, [pc, #28]	@ (800c74c <etharp_find_entry+0x2d4>)
 800c72e:	4613      	mov	r3, r2
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	4413      	add	r3, r2
 800c734:	00db      	lsls	r3, r3, #3
 800c736:	440b      	add	r3, r1
 800c738:	3308      	adds	r3, #8
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c73e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3728      	adds	r7, #40	@ 0x28
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20008364 	.word	0x20008364
 800c750:	08011c84 	.word	0x08011c84
 800c754:	08011cbc 	.word	0x08011cbc
 800c758:	08011cfc 	.word	0x08011cfc
 800c75c:	08011d24 	.word	0x08011d24
 800c760:	08011d3c 	.word	0x08011d3c
 800c764:	08011d50 	.word	0x08011d50

0800c768 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b088      	sub	sp, #32
 800c76c:	af02      	add	r7, sp, #8
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c77c:	2b06      	cmp	r3, #6
 800c77e:	d006      	beq.n	800c78e <etharp_update_arp_entry+0x26>
 800c780:	4b48      	ldr	r3, [pc, #288]	@ (800c8a4 <etharp_update_arp_entry+0x13c>)
 800c782:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800c786:	4948      	ldr	r1, [pc, #288]	@ (800c8a8 <etharp_update_arp_entry+0x140>)
 800c788:	4848      	ldr	r0, [pc, #288]	@ (800c8ac <etharp_update_arp_entry+0x144>)
 800c78a:	f002 f96d 	bl	800ea68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d012      	beq.n	800c7ba <etharp_update_arp_entry+0x52>
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00e      	beq.n	800c7ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68f9      	ldr	r1, [r7, #12]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f001 f90a 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800c7a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d105      	bne.n	800c7ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c7b6:	2be0      	cmp	r3, #224	@ 0xe0
 800c7b8:	d102      	bne.n	800c7c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c7ba:	f06f 030f 	mvn.w	r3, #15
 800c7be:	e06c      	b.n	800c89a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	68b8      	ldr	r0, [r7, #8]
 800c7c8:	f7ff fe56 	bl	800c478 <etharp_find_entry>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c7d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	da02      	bge.n	800c7de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c7d8:	8afb      	ldrh	r3, [r7, #22]
 800c7da:	b25b      	sxtb	r3, r3
 800c7dc:	e05d      	b.n	800c89a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c7de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7e2:	4933      	ldr	r1, [pc, #204]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	4413      	add	r3, r2
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	440b      	add	r3, r1
 800c7ee:	3314      	adds	r3, #20
 800c7f0:	2202      	movs	r2, #2
 800c7f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c7f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7f8:	492d      	ldr	r1, [pc, #180]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	4413      	add	r3, r2
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	440b      	add	r3, r1
 800c804:	3308      	adds	r3, #8
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c80a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	3308      	adds	r3, #8
 800c818:	4a25      	ldr	r2, [pc, #148]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c81a:	4413      	add	r3, r2
 800c81c:	3304      	adds	r3, #4
 800c81e:	2206      	movs	r2, #6
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	f002 f9fb 	bl	800ec1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c828:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c82c:	4920      	ldr	r1, [pc, #128]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c82e:	4613      	mov	r3, r2
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	440b      	add	r3, r1
 800c838:	3312      	adds	r3, #18
 800c83a:	2200      	movs	r2, #0
 800c83c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c83e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c842:	491b      	ldr	r1, [pc, #108]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c844:	4613      	mov	r3, r2
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	4413      	add	r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	440b      	add	r3, r1
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d021      	beq.n	800c898 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c854:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c858:	4915      	ldr	r1, [pc, #84]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c85a:	4613      	mov	r3, r2
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	4413      	add	r3, r2
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	440b      	add	r3, r1
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c868:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c86c:	4910      	ldr	r1, [pc, #64]	@ (800c8b0 <etharp_update_arp_entry+0x148>)
 800c86e:	4613      	mov	r3, r2
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	4413      	add	r3, r2
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	440b      	add	r3, r1
 800c878:	2200      	movs	r2, #0
 800c87a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c882:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6939      	ldr	r1, [r7, #16]
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f001 ffa3 	bl	800e7d8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c892:	6938      	ldr	r0, [r7, #16]
 800c894:	f7f8 ff82 	bl	800579c <pbuf_free>
  }
  return ERR_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	08011c84 	.word	0x08011c84
 800c8a8:	08011d7c 	.word	0x08011d7c
 800c8ac:	08011cfc 	.word	0x08011cfc
 800c8b0:	20008364 	.word	0x20008364

0800c8b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	e01e      	b.n	800c900 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c8c2:	4913      	ldr	r1, [pc, #76]	@ (800c910 <etharp_cleanup_netif+0x5c>)
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c8d6:	7afb      	ldrb	r3, [r7, #11]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00e      	beq.n	800c8fa <etharp_cleanup_netif+0x46>
 800c8dc:	490c      	ldr	r1, [pc, #48]	@ (800c910 <etharp_cleanup_netif+0x5c>)
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	4413      	add	r3, r2
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	440b      	add	r3, r1
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d102      	bne.n	800c8fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7ff fce5 	bl	800c2c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2b09      	cmp	r3, #9
 800c904:	dddd      	ble.n	800c8c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20008364 	.word	0x20008364

0800c914 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c914:	b5b0      	push	{r4, r5, r7, lr}
 800c916:	b08a      	sub	sp, #40	@ 0x28
 800c918:	af04      	add	r7, sp, #16
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d107      	bne.n	800c934 <etharp_input+0x20>
 800c924:	4b3d      	ldr	r3, [pc, #244]	@ (800ca1c <etharp_input+0x108>)
 800c926:	f240 228a 	movw	r2, #650	@ 0x28a
 800c92a:	493d      	ldr	r1, [pc, #244]	@ (800ca20 <etharp_input+0x10c>)
 800c92c:	483d      	ldr	r0, [pc, #244]	@ (800ca24 <etharp_input+0x110>)
 800c92e:	f002 f89b 	bl	800ea68 <iprintf>
 800c932:	e06f      	b.n	800ca14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c944:	d10c      	bne.n	800c960 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c94a:	2b06      	cmp	r3, #6
 800c94c:	d108      	bne.n	800c960 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c952:	2b04      	cmp	r3, #4
 800c954:	d104      	bne.n	800c960 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	885b      	ldrh	r3, [r3, #2]
 800c95a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c95c:	2b08      	cmp	r3, #8
 800c95e:	d003      	beq.n	800c968 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7f8 ff1b 	bl	800579c <pbuf_free>
    return;
 800c966:	e055      	b.n	800ca14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	330e      	adds	r3, #14
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	3318      	adds	r3, #24
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	3304      	adds	r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <etharp_input+0x74>
    for_us = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	75fb      	strb	r3, [r7, #23]
 800c986:	e009      	b.n	800c99c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	3304      	adds	r3, #4
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	bf0c      	ite	eq
 800c994:	2301      	moveq	r3, #1
 800c996:	2300      	movne	r3, #0
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f103 0208 	add.w	r2, r3, #8
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <etharp_input+0x98>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e000      	b.n	800c9ae <etharp_input+0x9a>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	f107 010c 	add.w	r1, r7, #12
 800c9b2:	6838      	ldr	r0, [r7, #0]
 800c9b4:	f7ff fed8 	bl	800c768 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	88db      	ldrh	r3, [r3, #6]
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9c2:	d003      	beq.n	800c9cc <etharp_input+0xb8>
 800c9c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9c8:	d01e      	beq.n	800ca08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c9ca:	e020      	b.n	800ca0e <etharp_input+0xfa>
      if (for_us) {
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d01c      	beq.n	800ca0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c9ec:	2102      	movs	r1, #2
 800c9ee:	9103      	str	r1, [sp, #12]
 800c9f0:	f107 010c 	add.w	r1, r7, #12
 800c9f4:	9102      	str	r1, [sp, #8]
 800c9f6:	9201      	str	r2, [sp, #4]
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6838      	ldr	r0, [r7, #0]
 800ca02:	f000 faeb 	bl	800cfdc <etharp_raw>
      break;
 800ca06:	e001      	b.n	800ca0c <etharp_input+0xf8>
      break;
 800ca08:	bf00      	nop
 800ca0a:	e000      	b.n	800ca0e <etharp_input+0xfa>
      break;
 800ca0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7f8 fec4 	bl	800579c <pbuf_free>
}
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bdb0      	pop	{r4, r5, r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	08011c84 	.word	0x08011c84
 800ca20:	08011dd4 	.word	0x08011dd4
 800ca24:	08011cfc 	.word	0x08011cfc

0800ca28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af02      	add	r7, sp, #8
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	4613      	mov	r3, r2
 800ca34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ca36:	79fa      	ldrb	r2, [r7, #7]
 800ca38:	4944      	ldr	r1, [pc, #272]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	440b      	add	r3, r1
 800ca44:	3314      	adds	r3, #20
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d806      	bhi.n	800ca5a <etharp_output_to_arp_index+0x32>
 800ca4c:	4b40      	ldr	r3, [pc, #256]	@ (800cb50 <etharp_output_to_arp_index+0x128>)
 800ca4e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ca52:	4940      	ldr	r1, [pc, #256]	@ (800cb54 <etharp_output_to_arp_index+0x12c>)
 800ca54:	4840      	ldr	r0, [pc, #256]	@ (800cb58 <etharp_output_to_arp_index+0x130>)
 800ca56:	f002 f807 	bl	800ea68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ca5a:	79fa      	ldrb	r2, [r7, #7]
 800ca5c:	493b      	ldr	r1, [pc, #236]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800ca5e:	4613      	mov	r3, r2
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	4413      	add	r3, r2
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	440b      	add	r3, r1
 800ca68:	3314      	adds	r3, #20
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d153      	bne.n	800cb18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ca70:	79fa      	ldrb	r2, [r7, #7]
 800ca72:	4936      	ldr	r1, [pc, #216]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800ca74:	4613      	mov	r3, r2
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	4413      	add	r3, r2
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	440b      	add	r3, r1
 800ca7e:	3312      	adds	r3, #18
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800ca86:	d919      	bls.n	800cabc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ca88:	79fa      	ldrb	r2, [r7, #7]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	4413      	add	r3, r2
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	4a2e      	ldr	r2, [pc, #184]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800ca94:	4413      	add	r3, r2
 800ca96:	3304      	adds	r3, #4
 800ca98:	4619      	mov	r1, r3
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 fb4c 	bl	800d138 <etharp_request>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d138      	bne.n	800cb18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800caa6:	79fa      	ldrb	r2, [r7, #7]
 800caa8:	4928      	ldr	r1, [pc, #160]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800caaa:	4613      	mov	r3, r2
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	4413      	add	r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	440b      	add	r3, r1
 800cab4:	3314      	adds	r3, #20
 800cab6:	2203      	movs	r2, #3
 800cab8:	701a      	strb	r2, [r3, #0]
 800caba:	e02d      	b.n	800cb18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cabc:	79fa      	ldrb	r2, [r7, #7]
 800cabe:	4923      	ldr	r1, [pc, #140]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800cac0:	4613      	mov	r3, r2
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	4413      	add	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	440b      	add	r3, r1
 800caca:	3312      	adds	r3, #18
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800cad2:	d321      	bcc.n	800cb18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cad4:	79fa      	ldrb	r2, [r7, #7]
 800cad6:	4613      	mov	r3, r2
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	4413      	add	r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	4a1b      	ldr	r2, [pc, #108]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800cae0:	4413      	add	r3, r2
 800cae2:	1d19      	adds	r1, r3, #4
 800cae4:	79fa      	ldrb	r2, [r7, #7]
 800cae6:	4613      	mov	r3, r2
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	4413      	add	r3, r2
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	3308      	adds	r3, #8
 800caf0:	4a16      	ldr	r2, [pc, #88]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800caf2:	4413      	add	r3, r2
 800caf4:	3304      	adds	r3, #4
 800caf6:	461a      	mov	r2, r3
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 fafb 	bl	800d0f4 <etharp_request_dst>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb04:	79fa      	ldrb	r2, [r7, #7]
 800cb06:	4911      	ldr	r1, [pc, #68]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800cb08:	4613      	mov	r3, r2
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	4413      	add	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	440b      	add	r3, r1
 800cb12:	3314      	adds	r3, #20
 800cb14:	2203      	movs	r2, #3
 800cb16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800cb1e:	79fa      	ldrb	r2, [r7, #7]
 800cb20:	4613      	mov	r3, r2
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	4413      	add	r3, r2
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	3308      	adds	r3, #8
 800cb2a:	4a08      	ldr	r2, [pc, #32]	@ (800cb4c <etharp_output_to_arp_index+0x124>)
 800cb2c:	4413      	add	r3, r2
 800cb2e:	3304      	adds	r3, #4
 800cb30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb34:	9200      	str	r2, [sp, #0]
 800cb36:	460a      	mov	r2, r1
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f001 fe4c 	bl	800e7d8 <ethernet_output>
 800cb40:	4603      	mov	r3, r0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20008364 	.word	0x20008364
 800cb50:	08011c84 	.word	0x08011c84
 800cb54:	08011df4 	.word	0x08011df4
 800cb58:	08011cfc 	.word	0x08011cfc

0800cb5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	@ 0x28
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <etharp_output+0x24>
 800cb72:	4b73      	ldr	r3, [pc, #460]	@ (800cd40 <etharp_output+0x1e4>)
 800cb74:	f240 321e 	movw	r2, #798	@ 0x31e
 800cb78:	4972      	ldr	r1, [pc, #456]	@ (800cd44 <etharp_output+0x1e8>)
 800cb7a:	4873      	ldr	r0, [pc, #460]	@ (800cd48 <etharp_output+0x1ec>)
 800cb7c:	f001 ff74 	bl	800ea68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d106      	bne.n	800cb94 <etharp_output+0x38>
 800cb86:	4b6e      	ldr	r3, [pc, #440]	@ (800cd40 <etharp_output+0x1e4>)
 800cb88:	f240 321f 	movw	r2, #799	@ 0x31f
 800cb8c:	496f      	ldr	r1, [pc, #444]	@ (800cd4c <etharp_output+0x1f0>)
 800cb8e:	486e      	ldr	r0, [pc, #440]	@ (800cd48 <etharp_output+0x1ec>)
 800cb90:	f001 ff6a 	bl	800ea68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <etharp_output+0x4c>
 800cb9a:	4b69      	ldr	r3, [pc, #420]	@ (800cd40 <etharp_output+0x1e4>)
 800cb9c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800cba0:	496b      	ldr	r1, [pc, #428]	@ (800cd50 <etharp_output+0x1f4>)
 800cba2:	4869      	ldr	r0, [pc, #420]	@ (800cd48 <etharp_output+0x1ec>)
 800cba4:	f001 ff60 	bl	800ea68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68f9      	ldr	r1, [r7, #12]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 ff04 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d002      	beq.n	800cbc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cbba:	4b66      	ldr	r3, [pc, #408]	@ (800cd54 <etharp_output+0x1f8>)
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	e0af      	b.n	800cd20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cbc8:	2be0      	cmp	r3, #224	@ 0xe0
 800cbca:	d118      	bne.n	800cbfe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cbd4:	235e      	movs	r3, #94	@ 0x5e
 800cbd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3302      	adds	r3, #2
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3303      	adds	r3, #3
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cbf6:	f107 0310 	add.w	r3, r7, #16
 800cbfa:	61fb      	str	r3, [r7, #28]
 800cbfc:	e090      	b.n	800cd20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3304      	adds	r3, #4
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	405a      	eors	r2, r3
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4013      	ands	r3, r2
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d012      	beq.n	800cc3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc1c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d00b      	beq.n	800cc3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	330c      	adds	r3, #12
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d003      	beq.n	800cc36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	330c      	adds	r3, #12
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	e002      	b.n	800cc3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cc36:	f06f 0303 	mvn.w	r3, #3
 800cc3a:	e07d      	b.n	800cd38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc3c:	4b46      	ldr	r3, [pc, #280]	@ (800cd58 <etharp_output+0x1fc>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	4619      	mov	r1, r3
 800cc42:	4a46      	ldr	r2, [pc, #280]	@ (800cd5c <etharp_output+0x200>)
 800cc44:	460b      	mov	r3, r1
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	440b      	add	r3, r1
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	4413      	add	r3, r2
 800cc4e:	3314      	adds	r3, #20
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d925      	bls.n	800cca2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cc56:	4b40      	ldr	r3, [pc, #256]	@ (800cd58 <etharp_output+0x1fc>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd5c <etharp_output+0x200>)
 800cc5e:	460b      	mov	r3, r1
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	440b      	add	r3, r1
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	4413      	add	r3, r2
 800cc68:	3308      	adds	r3, #8
 800cc6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d117      	bne.n	800cca2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b38      	ldr	r3, [pc, #224]	@ (800cd58 <etharp_output+0x1fc>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	4937      	ldr	r1, [pc, #220]	@ (800cd5c <etharp_output+0x200>)
 800cc7e:	4603      	mov	r3, r0
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4403      	add	r3, r0
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	3304      	adds	r3, #4
 800cc8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d108      	bne.n	800cca2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cc90:	4b31      	ldr	r3, [pc, #196]	@ (800cd58 <etharp_output+0x1fc>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	461a      	mov	r2, r3
 800cc96:	68b9      	ldr	r1, [r7, #8]
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f7ff fec5 	bl	800ca28 <etharp_output_to_arp_index>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	e04a      	b.n	800cd38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cca2:	2300      	movs	r3, #0
 800cca4:	75fb      	strb	r3, [r7, #23]
 800cca6:	e031      	b.n	800cd0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cca8:	7dfa      	ldrb	r2, [r7, #23]
 800ccaa:	492c      	ldr	r1, [pc, #176]	@ (800cd5c <etharp_output+0x200>)
 800ccac:	4613      	mov	r3, r2
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	4413      	add	r3, r2
 800ccb2:	00db      	lsls	r3, r3, #3
 800ccb4:	440b      	add	r3, r1
 800ccb6:	3314      	adds	r3, #20
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d923      	bls.n	800cd06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ccbe:	7dfa      	ldrb	r2, [r7, #23]
 800ccc0:	4926      	ldr	r1, [pc, #152]	@ (800cd5c <etharp_output+0x200>)
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	4413      	add	r3, r2
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	440b      	add	r3, r1
 800cccc:	3308      	adds	r3, #8
 800ccce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d117      	bne.n	800cd06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	6819      	ldr	r1, [r3, #0]
 800ccda:	7dfa      	ldrb	r2, [r7, #23]
 800ccdc:	481f      	ldr	r0, [pc, #124]	@ (800cd5c <etharp_output+0x200>)
 800ccde:	4613      	mov	r3, r2
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4413      	add	r3, r2
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	4403      	add	r3, r0
 800cce8:	3304      	adds	r3, #4
 800ccea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ccec:	4299      	cmp	r1, r3
 800ccee:	d10a      	bne.n	800cd06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ccf0:	4a19      	ldr	r2, [pc, #100]	@ (800cd58 <etharp_output+0x1fc>)
 800ccf2:	7dfb      	ldrb	r3, [r7, #23]
 800ccf4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7ff fe93 	bl	800ca28 <etharp_output_to_arp_index>
 800cd02:	4603      	mov	r3, r0
 800cd04:	e018      	b.n	800cd38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	75fb      	strb	r3, [r7, #23]
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	2b09      	cmp	r3, #9
 800cd10:	d9ca      	bls.n	800cca8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	69b9      	ldr	r1, [r7, #24]
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 f822 	bl	800cd60 <etharp_query>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	e00b      	b.n	800cd38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cd26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	68b9      	ldr	r1, [r7, #8]
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f001 fd51 	bl	800e7d8 <ethernet_output>
 800cd36:	4603      	mov	r3, r0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3720      	adds	r7, #32
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	08011c84 	.word	0x08011c84
 800cd44:	08011dd4 	.word	0x08011dd4
 800cd48:	08011cfc 	.word	0x08011cfc
 800cd4c:	08011e24 	.word	0x08011e24
 800cd50:	08011dc4 	.word	0x08011dc4
 800cd54:	08012450 	.word	0x08012450
 800cd58:	20008454 	.word	0x20008454
 800cd5c:	20008364 	.word	0x20008364

0800cd60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b08c      	sub	sp, #48	@ 0x30
 800cd64:	af02      	add	r7, sp, #8
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3326      	adds	r3, #38	@ 0x26
 800cd70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cd72:	23ff      	movs	r3, #255	@ 0xff
 800cd74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68f9      	ldr	r1, [r7, #12]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fe1a 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10c      	bne.n	800cda8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd96:	2be0      	cmp	r3, #224	@ 0xe0
 800cd98:	d006      	beq.n	800cda8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d003      	beq.n	800cda8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cda8:	f06f 030f 	mvn.w	r3, #15
 800cdac:	e101      	b.n	800cfb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	68b8      	ldr	r0, [r7, #8]
 800cdb4:	f7ff fb60 	bl	800c478 <etharp_find_entry>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cdbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	da02      	bge.n	800cdca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cdc4:	8a7b      	ldrh	r3, [r7, #18]
 800cdc6:	b25b      	sxtb	r3, r3
 800cdc8:	e0f3      	b.n	800cfb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cdca:	8a7b      	ldrh	r3, [r7, #18]
 800cdcc:	2b7e      	cmp	r3, #126	@ 0x7e
 800cdce:	d906      	bls.n	800cdde <etharp_query+0x7e>
 800cdd0:	4b7a      	ldr	r3, [pc, #488]	@ (800cfbc <etharp_query+0x25c>)
 800cdd2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800cdd6:	497a      	ldr	r1, [pc, #488]	@ (800cfc0 <etharp_query+0x260>)
 800cdd8:	487a      	ldr	r0, [pc, #488]	@ (800cfc4 <etharp_query+0x264>)
 800cdda:	f001 fe45 	bl	800ea68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cdde:	8a7b      	ldrh	r3, [r7, #18]
 800cde0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cde2:	7c7a      	ldrb	r2, [r7, #17]
 800cde4:	4978      	ldr	r1, [pc, #480]	@ (800cfc8 <etharp_query+0x268>)
 800cde6:	4613      	mov	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4413      	add	r3, r2
 800cdec:	00db      	lsls	r3, r3, #3
 800cdee:	440b      	add	r3, r1
 800cdf0:	3314      	adds	r3, #20
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d115      	bne.n	800ce24 <etharp_query+0xc4>
    is_new_entry = 1;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cdfc:	7c7a      	ldrb	r2, [r7, #17]
 800cdfe:	4972      	ldr	r1, [pc, #456]	@ (800cfc8 <etharp_query+0x268>)
 800ce00:	4613      	mov	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4413      	add	r3, r2
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	440b      	add	r3, r1
 800ce0a:	3314      	adds	r3, #20
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ce10:	7c7a      	ldrb	r2, [r7, #17]
 800ce12:	496d      	ldr	r1, [pc, #436]	@ (800cfc8 <etharp_query+0x268>)
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	440b      	add	r3, r1
 800ce1e:	3308      	adds	r3, #8
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ce24:	7c7a      	ldrb	r2, [r7, #17]
 800ce26:	4968      	ldr	r1, [pc, #416]	@ (800cfc8 <etharp_query+0x268>)
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3314      	adds	r3, #20
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d011      	beq.n	800ce5e <etharp_query+0xfe>
 800ce3a:	7c7a      	ldrb	r2, [r7, #17]
 800ce3c:	4962      	ldr	r1, [pc, #392]	@ (800cfc8 <etharp_query+0x268>)
 800ce3e:	4613      	mov	r3, r2
 800ce40:	005b      	lsls	r3, r3, #1
 800ce42:	4413      	add	r3, r2
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	440b      	add	r3, r1
 800ce48:	3314      	adds	r3, #20
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d806      	bhi.n	800ce5e <etharp_query+0xfe>
 800ce50:	4b5a      	ldr	r3, [pc, #360]	@ (800cfbc <etharp_query+0x25c>)
 800ce52:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ce56:	495d      	ldr	r1, [pc, #372]	@ (800cfcc <etharp_query+0x26c>)
 800ce58:	485a      	ldr	r0, [pc, #360]	@ (800cfc4 <etharp_query+0x264>)
 800ce5a:	f001 fe05 	bl	800ea68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d102      	bne.n	800ce6a <etharp_query+0x10a>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10c      	bne.n	800ce84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ce6a:	68b9      	ldr	r1, [r7, #8]
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 f963 	bl	800d138 <etharp_request>
 800ce72:	4603      	mov	r3, r0
 800ce74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d102      	bne.n	800ce84 <etharp_query+0x124>
      return result;
 800ce7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce82:	e096      	b.n	800cfb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d106      	bne.n	800ce98 <etharp_query+0x138>
 800ce8a:	4b4c      	ldr	r3, [pc, #304]	@ (800cfbc <etharp_query+0x25c>)
 800ce8c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ce90:	494f      	ldr	r1, [pc, #316]	@ (800cfd0 <etharp_query+0x270>)
 800ce92:	484c      	ldr	r0, [pc, #304]	@ (800cfc4 <etharp_query+0x264>)
 800ce94:	f001 fde8 	bl	800ea68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ce98:	7c7a      	ldrb	r2, [r7, #17]
 800ce9a:	494b      	ldr	r1, [pc, #300]	@ (800cfc8 <etharp_query+0x268>)
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	4413      	add	r3, r2
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	440b      	add	r3, r1
 800cea6:	3314      	adds	r3, #20
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d917      	bls.n	800cede <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ceae:	4a49      	ldr	r2, [pc, #292]	@ (800cfd4 <etharp_query+0x274>)
 800ceb0:	7c7b      	ldrb	r3, [r7, #17]
 800ceb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ceb4:	7c7a      	ldrb	r2, [r7, #17]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	4413      	add	r3, r2
 800cebc:	00db      	lsls	r3, r3, #3
 800cebe:	3308      	adds	r3, #8
 800cec0:	4a41      	ldr	r2, [pc, #260]	@ (800cfc8 <etharp_query+0x268>)
 800cec2:	4413      	add	r3, r2
 800cec4:	3304      	adds	r3, #4
 800cec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ceca:	9200      	str	r2, [sp, #0]
 800cecc:	697a      	ldr	r2, [r7, #20]
 800cece:	6879      	ldr	r1, [r7, #4]
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f001 fc81 	bl	800e7d8 <ethernet_output>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cedc:	e067      	b.n	800cfae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cede:	7c7a      	ldrb	r2, [r7, #17]
 800cee0:	4939      	ldr	r1, [pc, #228]	@ (800cfc8 <etharp_query+0x268>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4413      	add	r3, r2
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	440b      	add	r3, r1
 800ceec:	3314      	adds	r3, #20
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d15c      	bne.n	800cfae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cefc:	e01c      	b.n	800cf38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	895a      	ldrh	r2, [r3, #10]
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	891b      	ldrh	r3, [r3, #8]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d10a      	bne.n	800cf20 <etharp_query+0x1c0>
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d006      	beq.n	800cf20 <etharp_query+0x1c0>
 800cf12:	4b2a      	ldr	r3, [pc, #168]	@ (800cfbc <etharp_query+0x25c>)
 800cf14:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800cf18:	492f      	ldr	r1, [pc, #188]	@ (800cfd8 <etharp_query+0x278>)
 800cf1a:	482a      	ldr	r0, [pc, #168]	@ (800cfc4 <etharp_query+0x264>)
 800cf1c:	f001 fda4 	bl	800ea68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	7b1b      	ldrb	r3, [r3, #12]
 800cf24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <etharp_query+0x1d2>
        copy_needed = 1;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	61bb      	str	r3, [r7, #24]
        break;
 800cf30:	e005      	b.n	800cf3e <etharp_query+0x1de>
      }
      p = p->next;
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1df      	bne.n	800cefe <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d007      	beq.n	800cf54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800cf4a:	200e      	movs	r0, #14
 800cf4c:	f7f8 fe82 	bl	8005c54 <pbuf_clone>
 800cf50:	61f8      	str	r0, [r7, #28]
 800cf52:	e004      	b.n	800cf5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cf58:	69f8      	ldr	r0, [r7, #28]
 800cf5a:	f7f8 fcbf 	bl	80058dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d021      	beq.n	800cfa8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cf64:	7c7a      	ldrb	r2, [r7, #17]
 800cf66:	4918      	ldr	r1, [pc, #96]	@ (800cfc8 <etharp_query+0x268>)
 800cf68:	4613      	mov	r3, r2
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	4413      	add	r3, r2
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	440b      	add	r3, r1
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00a      	beq.n	800cf8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cf78:	7c7a      	ldrb	r2, [r7, #17]
 800cf7a:	4913      	ldr	r1, [pc, #76]	@ (800cfc8 <etharp_query+0x268>)
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	4413      	add	r3, r2
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	440b      	add	r3, r1
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7f8 fc07 	bl	800579c <pbuf_free>
      }
      arp_table[i].q = p;
 800cf8e:	7c7a      	ldrb	r2, [r7, #17]
 800cf90:	490d      	ldr	r1, [pc, #52]	@ (800cfc8 <etharp_query+0x268>)
 800cf92:	4613      	mov	r3, r2
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	4413      	add	r3, r2
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	440b      	add	r3, r1
 800cf9c:	69fa      	ldr	r2, [r7, #28]
 800cf9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfa6:	e002      	b.n	800cfae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cfa8:	23ff      	movs	r3, #255	@ 0xff
 800cfaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800cfae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3728      	adds	r7, #40	@ 0x28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	08011c84 	.word	0x08011c84
 800cfc0:	08011e30 	.word	0x08011e30
 800cfc4:	08011cfc 	.word	0x08011cfc
 800cfc8:	20008364 	.word	0x20008364
 800cfcc:	08011e40 	.word	0x08011e40
 800cfd0:	08011e24 	.word	0x08011e24
 800cfd4:	20008454 	.word	0x20008454
 800cfd8:	08011e68 	.word	0x08011e68

0800cfdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	@ 0x28
 800cfe0:	af02      	add	r7, sp, #8
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d106      	bne.n	800d002 <etharp_raw+0x26>
 800cff4:	4b3a      	ldr	r3, [pc, #232]	@ (800d0e0 <etharp_raw+0x104>)
 800cff6:	f240 4257 	movw	r2, #1111	@ 0x457
 800cffa:	493a      	ldr	r1, [pc, #232]	@ (800d0e4 <etharp_raw+0x108>)
 800cffc:	483a      	ldr	r0, [pc, #232]	@ (800d0e8 <etharp_raw+0x10c>)
 800cffe:	f001 fd33 	bl	800ea68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d002:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d006:	211c      	movs	r1, #28
 800d008:	200e      	movs	r0, #14
 800d00a:	f7f8 f8e3 	bl	80051d4 <pbuf_alloc>
 800d00e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d102      	bne.n	800d01c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d016:	f04f 33ff 	mov.w	r3, #4294967295
 800d01a:	e05d      	b.n	800d0d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	895b      	ldrh	r3, [r3, #10]
 800d020:	2b1b      	cmp	r3, #27
 800d022:	d806      	bhi.n	800d032 <etharp_raw+0x56>
 800d024:	4b2e      	ldr	r3, [pc, #184]	@ (800d0e0 <etharp_raw+0x104>)
 800d026:	f240 4262 	movw	r2, #1122	@ 0x462
 800d02a:	4930      	ldr	r1, [pc, #192]	@ (800d0ec <etharp_raw+0x110>)
 800d02c:	482e      	ldr	r0, [pc, #184]	@ (800d0e8 <etharp_raw+0x10c>)
 800d02e:	f001 fd1b 	bl	800ea68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d038:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7f7 f84c 	bl	80040d8 <lwip_htons>
 800d040:	4603      	mov	r3, r0
 800d042:	461a      	mov	r2, r3
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d04e:	2b06      	cmp	r3, #6
 800d050:	d006      	beq.n	800d060 <etharp_raw+0x84>
 800d052:	4b23      	ldr	r3, [pc, #140]	@ (800d0e0 <etharp_raw+0x104>)
 800d054:	f240 4269 	movw	r2, #1129	@ 0x469
 800d058:	4925      	ldr	r1, [pc, #148]	@ (800d0f0 <etharp_raw+0x114>)
 800d05a:	4823      	ldr	r0, [pc, #140]	@ (800d0e8 <etharp_raw+0x10c>)
 800d05c:	f001 fd04 	bl	800ea68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	3308      	adds	r3, #8
 800d064:	2206      	movs	r2, #6
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f001 fdd8 	bl	800ec1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	3312      	adds	r3, #18
 800d072:	2206      	movs	r2, #6
 800d074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d076:	4618      	mov	r0, r3
 800d078:	f001 fdd1 	bl	800ec1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	330e      	adds	r3, #14
 800d080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d082:	6812      	ldr	r2, [r2, #0]
 800d084:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	3318      	adds	r3, #24
 800d08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d08c:	6812      	ldr	r2, [r2, #0]
 800d08e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2200      	movs	r2, #0
 800d094:	701a      	strb	r2, [r3, #0]
 800d096:	2200      	movs	r2, #0
 800d098:	f042 0201 	orr.w	r2, r2, #1
 800d09c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f042 0208 	orr.w	r2, r2, #8
 800d0a6:	709a      	strb	r2, [r3, #2]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2206      	movs	r2, #6
 800d0b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2204      	movs	r2, #4
 800d0b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d0b8:	f640 0306 	movw	r3, #2054	@ 0x806
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	69b9      	ldr	r1, [r7, #24]
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f001 fb87 	bl	800e7d8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d0ca:	69b8      	ldr	r0, [r7, #24]
 800d0cc:	f7f8 fb66 	bl	800579c <pbuf_free>
  p = NULL;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d0d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	08011c84 	.word	0x08011c84
 800d0e4:	08011dd4 	.word	0x08011dd4
 800d0e8:	08011cfc 	.word	0x08011cfc
 800d0ec:	08011e84 	.word	0x08011e84
 800d0f0:	08011eb8 	.word	0x08011eb8

0800d0f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af04      	add	r7, sp, #16
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d110:	2201      	movs	r2, #1
 800d112:	9203      	str	r2, [sp, #12]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	9202      	str	r2, [sp, #8]
 800d118:	4a06      	ldr	r2, [pc, #24]	@ (800d134 <etharp_request_dst+0x40>)
 800d11a:	9201      	str	r2, [sp, #4]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	4603      	mov	r3, r0
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f7ff ff5a 	bl	800cfdc <etharp_raw>
 800d128:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	08012458 	.word	0x08012458

0800d138 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d142:	4a05      	ldr	r2, [pc, #20]	@ (800d158 <etharp_request+0x20>)
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7ff ffd4 	bl	800d0f4 <etharp_request_dst>
 800d14c:	4603      	mov	r3, r0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	08012450 	.word	0x08012450

0800d15c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08e      	sub	sp, #56	@ 0x38
 800d160:	af04      	add	r7, sp, #16
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d166:	4b79      	ldr	r3, [pc, #484]	@ (800d34c <icmp_input+0x1f0>)
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	f003 030f 	and.w	r3, r3, #15
 800d174:	b2db      	uxtb	r3, r3
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d17c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d17e:	2b13      	cmp	r3, #19
 800d180:	f240 80cd 	bls.w	800d31e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	895b      	ldrh	r3, [r3, #10]
 800d188:	2b03      	cmp	r3, #3
 800d18a:	f240 80ca 	bls.w	800d322 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d198:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 80b7 	beq.w	800d310 <icmp_input+0x1b4>
 800d1a2:	2b08      	cmp	r3, #8
 800d1a4:	f040 80b7 	bne.w	800d316 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d1a8:	4b69      	ldr	r3, [pc, #420]	@ (800d350 <icmp_input+0x1f4>)
 800d1aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d1ac:	4b67      	ldr	r3, [pc, #412]	@ (800d34c <icmp_input+0x1f0>)
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1b4:	2be0      	cmp	r3, #224	@ 0xe0
 800d1b6:	f000 80bb 	beq.w	800d330 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d1ba:	4b64      	ldr	r3, [pc, #400]	@ (800d34c <icmp_input+0x1f0>)
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	4a63      	ldr	r2, [pc, #396]	@ (800d34c <icmp_input+0x1f0>)
 800d1c0:	6812      	ldr	r2, [r2, #0]
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fbf9 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f040 80b1 	bne.w	800d334 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	891b      	ldrh	r3, [r3, #8]
 800d1d6:	2b07      	cmp	r3, #7
 800d1d8:	f240 80a5 	bls.w	800d326 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d1dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d1de:	330e      	adds	r3, #14
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7f8 fa44 	bl	8005670 <pbuf_add_header>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d04b      	beq.n	800d286 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	891a      	ldrh	r2, [r3, #8]
 800d1f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d1f4:	4413      	add	r3, r2
 800d1f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	891b      	ldrh	r3, [r3, #8]
 800d1fc:	8b7a      	ldrh	r2, [r7, #26]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	f0c0 809a 	bcc.w	800d338 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d204:	8b7b      	ldrh	r3, [r7, #26]
 800d206:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d20a:	4619      	mov	r1, r3
 800d20c:	200e      	movs	r0, #14
 800d20e:	f7f7 ffe1 	bl	80051d4 <pbuf_alloc>
 800d212:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 8090 	beq.w	800d33c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	895b      	ldrh	r3, [r3, #10]
 800d220:	461a      	mov	r2, r3
 800d222:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d224:	3308      	adds	r3, #8
 800d226:	429a      	cmp	r2, r3
 800d228:	d203      	bcs.n	800d232 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d22a:	6978      	ldr	r0, [r7, #20]
 800d22c:	f7f8 fab6 	bl	800579c <pbuf_free>
          goto icmperr;
 800d230:	e085      	b.n	800d33e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d23a:	4618      	mov	r0, r3
 800d23c:	f001 fcef 	bl	800ec1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d240:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d242:	4619      	mov	r1, r3
 800d244:	6978      	ldr	r0, [r7, #20]
 800d246:	f7f8 fa23 	bl	8005690 <pbuf_remove_header>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d009      	beq.n	800d264 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d250:	4b40      	ldr	r3, [pc, #256]	@ (800d354 <icmp_input+0x1f8>)
 800d252:	22b6      	movs	r2, #182	@ 0xb6
 800d254:	4940      	ldr	r1, [pc, #256]	@ (800d358 <icmp_input+0x1fc>)
 800d256:	4841      	ldr	r0, [pc, #260]	@ (800d35c <icmp_input+0x200>)
 800d258:	f001 fc06 	bl	800ea68 <iprintf>
          pbuf_free(r);
 800d25c:	6978      	ldr	r0, [r7, #20]
 800d25e:	f7f8 fa9d 	bl	800579c <pbuf_free>
          goto icmperr;
 800d262:	e06c      	b.n	800d33e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	6978      	ldr	r0, [r7, #20]
 800d268:	f7f8 fbb0 	bl	80059cc <pbuf_copy>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d272:	6978      	ldr	r0, [r7, #20]
 800d274:	f7f8 fa92 	bl	800579c <pbuf_free>
          goto icmperr;
 800d278:	e061      	b.n	800d33e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7f8 fa8e 	bl	800579c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	607b      	str	r3, [r7, #4]
 800d284:	e00f      	b.n	800d2a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d286:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d288:	330e      	adds	r3, #14
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7f8 f9ff 	bl	8005690 <pbuf_remove_header>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d298:	4b2e      	ldr	r3, [pc, #184]	@ (800d354 <icmp_input+0x1f8>)
 800d29a:	22c7      	movs	r2, #199	@ 0xc7
 800d29c:	4930      	ldr	r1, [pc, #192]	@ (800d360 <icmp_input+0x204>)
 800d29e:	482f      	ldr	r0, [pc, #188]	@ (800d35c <icmp_input+0x200>)
 800d2a0:	f001 fbe2 	bl	800ea68 <iprintf>
          goto icmperr;
 800d2a4:	e04b      	b.n	800d33e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d2ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7f8 f9dd 	bl	8005670 <pbuf_add_header>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d12b      	bne.n	800d314 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d2ca:	4b20      	ldr	r3, [pc, #128]	@ (800d34c <icmp_input+0x1f0>)
 800d2cc:	691a      	ldr	r2, [r3, #16]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	709a      	strb	r2, [r3, #2]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	22ff      	movs	r2, #255	@ 0xff
 800d2e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	729a      	strb	r2, [r3, #10]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	9302      	str	r3, [sp, #8]
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	23ff      	movs	r3, #255	@ 0xff
 800d300:	2200      	movs	r2, #0
 800d302:	69f9      	ldr	r1, [r7, #28]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fa81 	bl	800d80c <ip4_output_if>
 800d30a:	4603      	mov	r3, r0
 800d30c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d30e:	e001      	b.n	800d314 <icmp_input+0x1b8>
      break;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <icmp_input+0x1ba>
      break;
 800d314:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7f8 fa40 	bl	800579c <pbuf_free>
  return;
 800d31c:	e013      	b.n	800d346 <icmp_input+0x1ea>
    goto lenerr;
 800d31e:	bf00      	nop
 800d320:	e002      	b.n	800d328 <icmp_input+0x1cc>
    goto lenerr;
 800d322:	bf00      	nop
 800d324:	e000      	b.n	800d328 <icmp_input+0x1cc>
        goto lenerr;
 800d326:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7f8 fa37 	bl	800579c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d32e:	e00a      	b.n	800d346 <icmp_input+0x1ea>
        goto icmperr;
 800d330:	bf00      	nop
 800d332:	e004      	b.n	800d33e <icmp_input+0x1e2>
        goto icmperr;
 800d334:	bf00      	nop
 800d336:	e002      	b.n	800d33e <icmp_input+0x1e2>
          goto icmperr;
 800d338:	bf00      	nop
 800d33a:	e000      	b.n	800d33e <icmp_input+0x1e2>
          goto icmperr;
 800d33c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7f8 fa2c 	bl	800579c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d344:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d346:	3728      	adds	r7, #40	@ 0x28
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20004d18 	.word	0x20004d18
 800d350:	20004d2c 	.word	0x20004d2c
 800d354:	08011efc 	.word	0x08011efc
 800d358:	08011f34 	.word	0x08011f34
 800d35c:	08011f6c 	.word	0x08011f6c
 800d360:	08011f94 	.word	0x08011f94

0800d364 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	461a      	mov	r2, r3
 800d374:	2103      	movs	r1, #3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f814 	bl	800d3a4 <icmp_send_response>
}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	461a      	mov	r2, r3
 800d394:	210b      	movs	r1, #11
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f804 	bl	800d3a4 <icmp_send_response>
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08c      	sub	sp, #48	@ 0x30
 800d3a8:	af04      	add	r7, sp, #16
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d3b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d3b8:	2124      	movs	r1, #36	@ 0x24
 800d3ba:	2022      	movs	r0, #34	@ 0x22
 800d3bc:	f7f7 ff0a 	bl	80051d4 <pbuf_alloc>
 800d3c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d04c      	beq.n	800d462 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	895b      	ldrh	r3, [r3, #10]
 800d3cc:	2b23      	cmp	r3, #35	@ 0x23
 800d3ce:	d806      	bhi.n	800d3de <icmp_send_response+0x3a>
 800d3d0:	4b26      	ldr	r3, [pc, #152]	@ (800d46c <icmp_send_response+0xc8>)
 800d3d2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d3d6:	4926      	ldr	r1, [pc, #152]	@ (800d470 <icmp_send_response+0xcc>)
 800d3d8:	4826      	ldr	r0, [pc, #152]	@ (800d474 <icmp_send_response+0xd0>)
 800d3da:	f001 fb45 	bl	800ea68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	78fa      	ldrb	r2, [r7, #3]
 800d3ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	78ba      	ldrb	r2, [r7, #2]
 800d3f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	711a      	strb	r2, [r3, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2200      	movs	r2, #0
 800d404:	719a      	strb	r2, [r3, #6]
 800d406:	2200      	movs	r2, #0
 800d408:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f103 0008 	add.w	r0, r3, #8
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	221c      	movs	r2, #28
 800d418:	4619      	mov	r1, r3
 800d41a:	f001 fc00 	bl	800ec1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d424:	f107 030c 	add.w	r3, r7, #12
 800d428:	4618      	mov	r0, r3
 800d42a:	f000 f825 	bl	800d478 <ip4_route>
 800d42e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d011      	beq.n	800d45a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2200      	movs	r2, #0
 800d43a:	709a      	strb	r2, [r3, #2]
 800d43c:	2200      	movs	r2, #0
 800d43e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d440:	f107 020c 	add.w	r2, r7, #12
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	9302      	str	r3, [sp, #8]
 800d448:	2301      	movs	r3, #1
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	2300      	movs	r3, #0
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	23ff      	movs	r3, #255	@ 0xff
 800d452:	2100      	movs	r1, #0
 800d454:	69f8      	ldr	r0, [r7, #28]
 800d456:	f000 f9d9 	bl	800d80c <ip4_output_if>
  }
  pbuf_free(q);
 800d45a:	69f8      	ldr	r0, [r7, #28]
 800d45c:	f7f8 f99e 	bl	800579c <pbuf_free>
 800d460:	e000      	b.n	800d464 <icmp_send_response+0xc0>
    return;
 800d462:	bf00      	nop
}
 800d464:	3720      	adds	r7, #32
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	08011efc 	.word	0x08011efc
 800d470:	08011fc8 	.word	0x08011fc8
 800d474:	08011f6c 	.word	0x08011f6c

0800d478 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d480:	4b33      	ldr	r3, [pc, #204]	@ (800d550 <ip4_route+0xd8>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	e036      	b.n	800d4f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d02b      	beq.n	800d4f0 <ip4_route+0x78>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d49e:	089b      	lsrs	r3, r3, #2
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d022      	beq.n	800d4f0 <ip4_route+0x78>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d01d      	beq.n	800d4f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	405a      	eors	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	e038      	b.n	800d542 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d108      	bne.n	800d4f0 <ip4_route+0x78>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	330c      	adds	r3, #12
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d101      	bne.n	800d4f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	e028      	b.n	800d542 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1c5      	bne.n	800d488 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d4fc:	4b15      	ldr	r3, [pc, #84]	@ (800d554 <ip4_route+0xdc>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01a      	beq.n	800d53a <ip4_route+0xc2>
 800d504:	4b13      	ldr	r3, [pc, #76]	@ (800d554 <ip4_route+0xdc>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d012      	beq.n	800d53a <ip4_route+0xc2>
 800d514:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <ip4_route+0xdc>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d51c:	f003 0304 	and.w	r3, r3, #4
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00a      	beq.n	800d53a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d524:	4b0b      	ldr	r3, [pc, #44]	@ (800d554 <ip4_route+0xdc>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3304      	adds	r3, #4
 800d52a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b7f      	cmp	r3, #127	@ 0x7f
 800d538:	d101      	bne.n	800d53e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e001      	b.n	800d542 <ip4_route+0xca>
  }

  return netif_default;
 800d53e:	4b05      	ldr	r3, [pc, #20]	@ (800d554 <ip4_route+0xdc>)
 800d540:	681b      	ldr	r3, [r3, #0]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	200082f4 	.word	0x200082f4
 800d554:	200082f8 	.word	0x200082f8

0800d558 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d016      	beq.n	800d59e <ip4_input_accept+0x46>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3304      	adds	r3, #4
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d011      	beq.n	800d59e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d57a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a8 <ip4_input_accept+0x50>)
 800d57c:	695a      	ldr	r2, [r3, #20]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	3304      	adds	r3, #4
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	429a      	cmp	r2, r3
 800d586:	d008      	beq.n	800d59a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d588:	4b07      	ldr	r3, [pc, #28]	@ (800d5a8 <ip4_input_accept+0x50>)
 800d58a:	695b      	ldr	r3, [r3, #20]
 800d58c:	6879      	ldr	r1, [r7, #4]
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fa14 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800d594:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e000      	b.n	800d5a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	20004d18 	.word	0x20004d18

0800d5ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	091b      	lsrs	r3, r3, #4
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d004      	beq.n	800d5d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f8 f8e7 	bl	800579c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e113      	b.n	800d7fa <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	885b      	ldrh	r3, [r3, #2]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7f6 fd75 	bl	80040d8 <lwip_htons>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	891b      	ldrh	r3, [r3, #8]
 800d5f6:	89ba      	ldrh	r2, [r7, #12]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d204      	bcs.n	800d606 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d5fc:	89bb      	ldrh	r3, [r7, #12]
 800d5fe:	4619      	mov	r1, r3
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7f7 ff45 	bl	8005490 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	895b      	ldrh	r3, [r3, #10]
 800d60a:	89fa      	ldrh	r2, [r7, #14]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d807      	bhi.n	800d620 <ip4_input+0x74>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	891b      	ldrh	r3, [r3, #8]
 800d614:	89ba      	ldrh	r2, [r7, #12]
 800d616:	429a      	cmp	r2, r3
 800d618:	d802      	bhi.n	800d620 <ip4_input+0x74>
 800d61a:	89fb      	ldrh	r3, [r7, #14]
 800d61c:	2b13      	cmp	r3, #19
 800d61e:	d804      	bhi.n	800d62a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7f8 f8bb 	bl	800579c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	e0e7      	b.n	800d7fa <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	4a75      	ldr	r2, [pc, #468]	@ (800d804 <ip4_input+0x258>)
 800d630:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	4a73      	ldr	r2, [pc, #460]	@ (800d804 <ip4_input+0x258>)
 800d638:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d63a:	4b72      	ldr	r3, [pc, #456]	@ (800d804 <ip4_input+0x258>)
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d642:	2be0      	cmp	r3, #224	@ 0xe0
 800d644:	d112      	bne.n	800d66c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d64c:	f003 0301 	and.w	r3, r3, #1
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <ip4_input+0xba>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	3304      	adds	r3, #4
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <ip4_input+0xba>
      netif = inp;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	613b      	str	r3, [r7, #16]
 800d664:	e02a      	b.n	800d6bc <ip4_input+0x110>
    } else {
      netif = NULL;
 800d666:	2300      	movs	r3, #0
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	e027      	b.n	800d6bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d66c:	6838      	ldr	r0, [r7, #0]
 800d66e:	f7ff ff73 	bl	800d558 <ip4_input_accept>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <ip4_input+0xd2>
      netif = inp;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	613b      	str	r3, [r7, #16]
 800d67c:	e01e      	b.n	800d6bc <ip4_input+0x110>
    } else {
      netif = NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d682:	4b60      	ldr	r3, [pc, #384]	@ (800d804 <ip4_input+0x258>)
 800d684:	695b      	ldr	r3, [r3, #20]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b7f      	cmp	r3, #127	@ 0x7f
 800d68a:	d017      	beq.n	800d6bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d68c:	4b5e      	ldr	r3, [pc, #376]	@ (800d808 <ip4_input+0x25c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	613b      	str	r3, [r7, #16]
 800d692:	e00e      	b.n	800d6b2 <ip4_input+0x106>
          if (netif == inp) {
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d006      	beq.n	800d6aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d69c:	6938      	ldr	r0, [r7, #16]
 800d69e:	f7ff ff5b 	bl	800d558 <ip4_input_accept>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d108      	bne.n	800d6ba <ip4_input+0x10e>
 800d6a8:	e000      	b.n	800d6ac <ip4_input+0x100>
            continue;
 800d6aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	613b      	str	r3, [r7, #16]
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1ed      	bne.n	800d694 <ip4_input+0xe8>
 800d6b8:	e000      	b.n	800d6bc <ip4_input+0x110>
            break;
 800d6ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d6bc:	4b51      	ldr	r3, [pc, #324]	@ (800d804 <ip4_input+0x258>)
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	6839      	ldr	r1, [r7, #0]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 f97a 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d105      	bne.n	800d6da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d6ce:	4b4d      	ldr	r3, [pc, #308]	@ (800d804 <ip4_input+0x258>)
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d6d6:	2be0      	cmp	r3, #224	@ 0xe0
 800d6d8:	d104      	bne.n	800d6e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7f8 f85e 	bl	800579c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	e08a      	b.n	800d7fa <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d104      	bne.n	800d6f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7f8 f856 	bl	800579c <pbuf_free>
    return ERR_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e082      	b.n	800d7fa <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	88db      	ldrh	r3, [r3, #6]
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800d700:	4013      	ands	r3, r2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00b      	beq.n	800d71e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fc9e 	bl	800e048 <ip4_reass>
 800d70c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <ip4_input+0x16c>
      return ERR_OK;
 800d714:	2300      	movs	r3, #0
 800d716:	e070      	b.n	800d7fa <ip4_input+0x24e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d71e:	4a39      	ldr	r2, [pc, #228]	@ (800d804 <ip4_input+0x258>)
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d724:	4a37      	ldr	r2, [pc, #220]	@ (800d804 <ip4_input+0x258>)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d72a:	4a36      	ldr	r2, [pc, #216]	@ (800d804 <ip4_input+0x258>)
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	f003 030f 	and.w	r3, r3, #15
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	461a      	mov	r2, r3
 800d740:	4b30      	ldr	r3, [pc, #192]	@ (800d804 <ip4_input+0x258>)
 800d742:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7f8 faf0 	bl	8005d2c <raw_input>
 800d74c:	4603      	mov	r3, r0
 800d74e:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800d750:	7afb      	ldrb	r3, [r7, #11]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d03e      	beq.n	800d7d4 <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d756:	89fb      	ldrh	r3, [r7, #14]
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7f7 ff98 	bl	8005690 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	7a5b      	ldrb	r3, [r3, #9]
 800d764:	2b11      	cmp	r3, #17
 800d766:	d006      	beq.n	800d776 <ip4_input+0x1ca>
 800d768:	2b11      	cmp	r3, #17
 800d76a:	dc13      	bgt.n	800d794 <ip4_input+0x1e8>
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d00c      	beq.n	800d78a <ip4_input+0x1de>
 800d770:	2b06      	cmp	r3, #6
 800d772:	d005      	beq.n	800d780 <ip4_input+0x1d4>
 800d774:	e00e      	b.n	800d794 <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7fe fc5f 	bl	800c03c <udp_input>
        break;
 800d77e:	e029      	b.n	800d7d4 <ip4_input+0x228>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7fa f886 	bl	8007894 <tcp_input>
        break;
 800d788:	e024      	b.n	800d7d4 <ip4_input+0x228>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff fce5 	bl	800d15c <icmp_input>
        break;
 800d792:	e01f      	b.n	800d7d4 <ip4_input+0x228>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	2b02      	cmp	r3, #2
 800d798:	d018      	beq.n	800d7cc <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d79a:	4b1a      	ldr	r3, [pc, #104]	@ (800d804 <ip4_input+0x258>)
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	6939      	ldr	r1, [r7, #16]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f90b 	bl	800d9bc <ip4_addr_isbroadcast_u32>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10f      	bne.n	800d7cc <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d7ac:	4b15      	ldr	r3, [pc, #84]	@ (800d804 <ip4_input+0x258>)
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d7b4:	2be0      	cmp	r3, #224	@ 0xe0
 800d7b6:	d009      	beq.n	800d7cc <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d7b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7f7 ffd9 	bl	8005776 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d7c4:	2102      	movs	r1, #2
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff fdcc 	bl	800d364 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7f7 ffe5 	bl	800579c <pbuf_free>
        break;
 800d7d2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d7d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d804 <ip4_input+0x258>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d7da:	4b0a      	ldr	r3, [pc, #40]	@ (800d804 <ip4_input+0x258>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d7e0:	4b08      	ldr	r3, [pc, #32]	@ (800d804 <ip4_input+0x258>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d7e6:	4b07      	ldr	r3, [pc, #28]	@ (800d804 <ip4_input+0x258>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d7ec:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <ip4_input+0x258>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d7f2:	4b04      	ldr	r3, [pc, #16]	@ (800d804 <ip4_input+0x258>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20004d18 	.word	0x20004d18
 800d808:	200082f4 	.word	0x200082f4

0800d80c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08a      	sub	sp, #40	@ 0x28
 800d810:	af04      	add	r7, sp, #16
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d009      	beq.n	800d838 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <ip4_output_if+0x26>
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d834:	3304      	adds	r3, #4
 800d836:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d838:	78fa      	ldrb	r2, [r7, #3]
 800d83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d842:	9301      	str	r3, [sp, #4]
 800d844:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	4613      	mov	r3, r2
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	6979      	ldr	r1, [r7, #20]
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 f805 	bl	800d860 <ip4_output_if_src>
 800d856:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	7b9b      	ldrb	r3, [r3, #14]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d006      	beq.n	800d884 <ip4_output_if_src+0x24>
 800d876:	4b4b      	ldr	r3, [pc, #300]	@ (800d9a4 <ip4_output_if_src+0x144>)
 800d878:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800d87c:	494a      	ldr	r1, [pc, #296]	@ (800d9a8 <ip4_output_if_src+0x148>)
 800d87e:	484b      	ldr	r0, [pc, #300]	@ (800d9ac <ip4_output_if_src+0x14c>)
 800d880:	f001 f8f2 	bl	800ea68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d060      	beq.n	800d94c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d88a:	2314      	movs	r3, #20
 800d88c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d88e:	2114      	movs	r1, #20
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f7f7 feed 	bl	8005670 <pbuf_add_header>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d89c:	f06f 0301 	mvn.w	r3, #1
 800d8a0:	e07c      	b.n	800d99c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	895b      	ldrh	r3, [r3, #10]
 800d8ac:	2b13      	cmp	r3, #19
 800d8ae:	d806      	bhi.n	800d8be <ip4_output_if_src+0x5e>
 800d8b0:	4b3c      	ldr	r3, [pc, #240]	@ (800d9a4 <ip4_output_if_src+0x144>)
 800d8b2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800d8b6:	493e      	ldr	r1, [pc, #248]	@ (800d9b0 <ip4_output_if_src+0x150>)
 800d8b8:	483c      	ldr	r0, [pc, #240]	@ (800d9ac <ip4_output_if_src+0x14c>)
 800d8ba:	f001 f8d5 	bl	800ea68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	78fa      	ldrb	r2, [r7, #3]
 800d8c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800d8ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d8d4:	8b7b      	ldrh	r3, [r7, #26]
 800d8d6:	089b      	lsrs	r3, r3, #2
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d8e6:	69fb      	ldr	r3, [r7, #28]
 800d8e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d8ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	891b      	ldrh	r3, [r3, #8]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7f6 fbf0 	bl	80040d8 <lwip_htons>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	2200      	movs	r2, #0
 800d904:	719a      	strb	r2, [r3, #6]
 800d906:	2200      	movs	r2, #0
 800d908:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d90a:	4b2a      	ldr	r3, [pc, #168]	@ (800d9b4 <ip4_output_if_src+0x154>)
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f6 fbe2 	bl	80040d8 <lwip_htons>
 800d914:	4603      	mov	r3, r0
 800d916:	461a      	mov	r2, r3
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d91c:	4b25      	ldr	r3, [pc, #148]	@ (800d9b4 <ip4_output_if_src+0x154>)
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	3301      	adds	r3, #1
 800d922:	b29a      	uxth	r2, r3
 800d924:	4b23      	ldr	r3, [pc, #140]	@ (800d9b4 <ip4_output_if_src+0x154>)
 800d926:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d104      	bne.n	800d938 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d92e:	4b22      	ldr	r3, [pc, #136]	@ (800d9b8 <ip4_output_if_src+0x158>)
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	60da      	str	r2, [r3, #12]
 800d936:	e003      	b.n	800d940 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	2200      	movs	r2, #0
 800d944:	729a      	strb	r2, [r3, #10]
 800d946:	2200      	movs	r2, #0
 800d948:	72da      	strb	r2, [r3, #11]
 800d94a:	e00f      	b.n	800d96c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	895b      	ldrh	r3, [r3, #10]
 800d950:	2b13      	cmp	r3, #19
 800d952:	d802      	bhi.n	800d95a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d954:	f06f 0301 	mvn.w	r3, #1
 800d958:	e020      	b.n	800d99c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d966:	f107 0314 	add.w	r3, r7, #20
 800d96a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00c      	beq.n	800d98e <ip4_output_if_src+0x12e>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	891a      	ldrh	r2, [r3, #8]
 800d978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d906      	bls.n	800d98e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f000 fd53 	bl	800e430 <ip4_frag>
 800d98a:	4603      	mov	r3, r0
 800d98c:	e006      	b.n	800d99c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	68f9      	ldr	r1, [r7, #12]
 800d996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d998:	4798      	blx	r3
 800d99a:	4603      	mov	r3, r0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3720      	adds	r7, #32
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	08011ff4 	.word	0x08011ff4
 800d9a8:	08012028 	.word	0x08012028
 800d9ac:	08012034 	.word	0x08012034
 800d9b0:	0801205c 	.word	0x0801205c
 800d9b4:	20008456 	.word	0x20008456
 800d9b8:	0801244c 	.word	0x0801244c

0800d9bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d0:	d002      	beq.n	800d9d8 <ip4_addr_isbroadcast_u32+0x1c>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d101      	bne.n	800d9dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e02a      	b.n	800da32 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e021      	b.n	800da32 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d101      	bne.n	800d9fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e019      	b.n	800da32 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	3304      	adds	r3, #4
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	405a      	eors	r2, r3
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	3308      	adds	r3, #8
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4013      	ands	r3, r2
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10d      	bne.n	800da30 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	43da      	mvns	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	3308      	adds	r3, #8
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da28:	429a      	cmp	r2, r3
 800da2a:	d101      	bne.n	800da30 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e000      	b.n	800da32 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800da30:	2300      	movs	r3, #0
  }
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
	...

0800da40 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800da46:	2300      	movs	r3, #0
 800da48:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800da4a:	4b12      	ldr	r3, [pc, #72]	@ (800da94 <ip_reass_tmr+0x54>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800da50:	e018      	b.n	800da84 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	7fdb      	ldrb	r3, [r3, #31]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00b      	beq.n	800da72 <ip_reass_tmr+0x32>
      r->timer--;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	7fdb      	ldrb	r3, [r3, #31]
 800da5e:	3b01      	subs	r3, #1
 800da60:	b2da      	uxtb	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	e008      	b.n	800da84 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f80a 	bl	800da98 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e3      	bne.n	800da52 <ip_reass_tmr+0x12>
    }
  }
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	20008458 	.word	0x20008458

0800da98 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b088      	sub	sp, #32
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d105      	bne.n	800daba <ip_reass_free_complete_datagram+0x22>
 800daae:	4b45      	ldr	r3, [pc, #276]	@ (800dbc4 <ip_reass_free_complete_datagram+0x12c>)
 800dab0:	22ab      	movs	r2, #171	@ 0xab
 800dab2:	4945      	ldr	r1, [pc, #276]	@ (800dbc8 <ip_reass_free_complete_datagram+0x130>)
 800dab4:	4845      	ldr	r0, [pc, #276]	@ (800dbcc <ip_reass_free_complete_datagram+0x134>)
 800dab6:	f000 ffd7 	bl	800ea68 <iprintf>
  if (prev != NULL) {
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00a      	beq.n	800dad6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d005      	beq.n	800dad6 <ip_reass_free_complete_datagram+0x3e>
 800daca:	4b3e      	ldr	r3, [pc, #248]	@ (800dbc4 <ip_reass_free_complete_datagram+0x12c>)
 800dacc:	22ad      	movs	r2, #173	@ 0xad
 800dace:	4940      	ldr	r1, [pc, #256]	@ (800dbd0 <ip_reass_free_complete_datagram+0x138>)
 800dad0:	483e      	ldr	r0, [pc, #248]	@ (800dbcc <ip_reass_free_complete_datagram+0x134>)
 800dad2:	f000 ffc9 	bl	800ea68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	889b      	ldrh	r3, [r3, #4]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d12a      	bne.n	800db3e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	6858      	ldr	r0, [r3, #4]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3308      	adds	r3, #8
 800dafe:	2214      	movs	r2, #20
 800db00:	4619      	mov	r1, r3
 800db02:	f001 f88c 	bl	800ec1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800db06:	2101      	movs	r1, #1
 800db08:	69b8      	ldr	r0, [r7, #24]
 800db0a:	f7ff fc3b 	bl	800d384 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800db0e:	69b8      	ldr	r0, [r7, #24]
 800db10:	f7f7 fecc 	bl	80058ac <pbuf_clen>
 800db14:	4603      	mov	r3, r0
 800db16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db18:	8bfa      	ldrh	r2, [r7, #30]
 800db1a:	8a7b      	ldrh	r3, [r7, #18]
 800db1c:	4413      	add	r3, r2
 800db1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db22:	db05      	blt.n	800db30 <ip_reass_free_complete_datagram+0x98>
 800db24:	4b27      	ldr	r3, [pc, #156]	@ (800dbc4 <ip_reass_free_complete_datagram+0x12c>)
 800db26:	22bc      	movs	r2, #188	@ 0xbc
 800db28:	492a      	ldr	r1, [pc, #168]	@ (800dbd4 <ip_reass_free_complete_datagram+0x13c>)
 800db2a:	4828      	ldr	r0, [pc, #160]	@ (800dbcc <ip_reass_free_complete_datagram+0x134>)
 800db2c:	f000 ff9c 	bl	800ea68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db30:	8bfa      	ldrh	r2, [r7, #30]
 800db32:	8a7b      	ldrh	r3, [r7, #18]
 800db34:	4413      	add	r3, r2
 800db36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800db38:	69b8      	ldr	r0, [r7, #24]
 800db3a:	f7f7 fe2f 	bl	800579c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800db44:	e01f      	b.n	800db86 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7f7 fea8 	bl	80058ac <pbuf_clen>
 800db5c:	4603      	mov	r3, r0
 800db5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db60:	8bfa      	ldrh	r2, [r7, #30]
 800db62:	8a7b      	ldrh	r3, [r7, #18]
 800db64:	4413      	add	r3, r2
 800db66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db6a:	db05      	blt.n	800db78 <ip_reass_free_complete_datagram+0xe0>
 800db6c:	4b15      	ldr	r3, [pc, #84]	@ (800dbc4 <ip_reass_free_complete_datagram+0x12c>)
 800db6e:	22cc      	movs	r2, #204	@ 0xcc
 800db70:	4918      	ldr	r1, [pc, #96]	@ (800dbd4 <ip_reass_free_complete_datagram+0x13c>)
 800db72:	4816      	ldr	r0, [pc, #88]	@ (800dbcc <ip_reass_free_complete_datagram+0x134>)
 800db74:	f000 ff78 	bl	800ea68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db78:	8bfa      	ldrh	r2, [r7, #30]
 800db7a:	8a7b      	ldrh	r3, [r7, #18]
 800db7c:	4413      	add	r3, r2
 800db7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f7f7 fe0b 	bl	800579c <pbuf_free>
  while (p != NULL) {
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1dc      	bne.n	800db46 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f8c2 	bl	800dd18 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800db94:	4b10      	ldr	r3, [pc, #64]	@ (800dbd8 <ip_reass_free_complete_datagram+0x140>)
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	8bfa      	ldrh	r2, [r7, #30]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d905      	bls.n	800dbaa <ip_reass_free_complete_datagram+0x112>
 800db9e:	4b09      	ldr	r3, [pc, #36]	@ (800dbc4 <ip_reass_free_complete_datagram+0x12c>)
 800dba0:	22d2      	movs	r2, #210	@ 0xd2
 800dba2:	490e      	ldr	r1, [pc, #56]	@ (800dbdc <ip_reass_free_complete_datagram+0x144>)
 800dba4:	4809      	ldr	r0, [pc, #36]	@ (800dbcc <ip_reass_free_complete_datagram+0x134>)
 800dba6:	f000 ff5f 	bl	800ea68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dbaa:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd8 <ip_reass_free_complete_datagram+0x140>)
 800dbac:	881a      	ldrh	r2, [r3, #0]
 800dbae:	8bfb      	ldrh	r3, [r7, #30]
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	4b08      	ldr	r3, [pc, #32]	@ (800dbd8 <ip_reass_free_complete_datagram+0x140>)
 800dbb6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dbb8:	8bfb      	ldrh	r3, [r7, #30]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	0801208c 	.word	0x0801208c
 800dbc8:	080120c8 	.word	0x080120c8
 800dbcc:	080120d4 	.word	0x080120d4
 800dbd0:	080120fc 	.word	0x080120fc
 800dbd4:	08012110 	.word	0x08012110
 800dbd8:	2000845c 	.word	0x2000845c
 800dbdc:	08012130 	.word	0x08012130

0800dbe0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b08a      	sub	sp, #40	@ 0x28
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dbea:	2300      	movs	r3, #0
 800dbec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dbfe:	4b28      	ldr	r3, [pc, #160]	@ (800dca0 <ip_reass_remove_oldest_datagram+0xc0>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800dc04:	e030      	b.n	800dc68 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc08:	695a      	ldr	r2, [r3, #20]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d10c      	bne.n	800dc2c <ip_reass_remove_oldest_datagram+0x4c>
 800dc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc14:	699a      	ldr	r2, [r3, #24]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d106      	bne.n	800dc2c <ip_reass_remove_oldest_datagram+0x4c>
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc20:	899a      	ldrh	r2, [r3, #12]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	889b      	ldrh	r3, [r3, #4]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d014      	beq.n	800dc56 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d104      	bne.n	800dc42 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	61bb      	str	r3, [r7, #24]
 800dc40:	e009      	b.n	800dc56 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc44:	7fda      	ldrb	r2, [r3, #31]
 800dc46:	6a3b      	ldr	r3, [r7, #32]
 800dc48:	7fdb      	ldrb	r3, [r3, #31]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d803      	bhi.n	800dc56 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc50:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d001      	beq.n	800dc62 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc60:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800dc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1cb      	bne.n	800dc06 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d008      	beq.n	800dc86 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dc74:	69b9      	ldr	r1, [r7, #24]
 800dc76:	6a38      	ldr	r0, [r7, #32]
 800dc78:	f7ff ff0e 	bl	800da98 <ip_reass_free_complete_datagram>
 800dc7c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	da02      	bge.n	800dc94 <ip_reass_remove_oldest_datagram+0xb4>
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	dcac      	bgt.n	800dbee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dc94:	697b      	ldr	r3, [r7, #20]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3728      	adds	r7, #40	@ 0x28
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20008458 	.word	0x20008458

0800dca4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dcae:	2005      	movs	r0, #5
 800dcb0:	f7f6 fe8a 	bl	80049c8 <memp_malloc>
 800dcb4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d110      	bne.n	800dcde <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff ff8e 	bl	800dbe0 <ip_reass_remove_oldest_datagram>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	dc03      	bgt.n	800dcd4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dccc:	2005      	movs	r0, #5
 800dcce:	f7f6 fe7b 	bl	80049c8 <memp_malloc>
 800dcd2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e016      	b.n	800dd0c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dcde:	2220      	movs	r2, #32
 800dce0:	2100      	movs	r1, #0
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f000 ff25 	bl	800eb32 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	220f      	movs	r2, #15
 800dcec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dcee:	4b09      	ldr	r3, [pc, #36]	@ (800dd14 <ip_reass_enqueue_new_datagram+0x70>)
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dcf6:	4a07      	ldr	r2, [pc, #28]	@ (800dd14 <ip_reass_enqueue_new_datagram+0x70>)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	3308      	adds	r3, #8
 800dd00:	2214      	movs	r2, #20
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 ff8a 	bl	800ec1e <memcpy>
  return ipr;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	20008458 	.word	0x20008458

0800dd18 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dd22:	4b10      	ldr	r3, [pc, #64]	@ (800dd64 <ip_reass_dequeue_datagram+0x4c>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d104      	bne.n	800dd36 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a0c      	ldr	r2, [pc, #48]	@ (800dd64 <ip_reass_dequeue_datagram+0x4c>)
 800dd32:	6013      	str	r3, [r2, #0]
 800dd34:	e00d      	b.n	800dd52 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d106      	bne.n	800dd4a <ip_reass_dequeue_datagram+0x32>
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd68 <ip_reass_dequeue_datagram+0x50>)
 800dd3e:	f240 1245 	movw	r2, #325	@ 0x145
 800dd42:	490a      	ldr	r1, [pc, #40]	@ (800dd6c <ip_reass_dequeue_datagram+0x54>)
 800dd44:	480a      	ldr	r0, [pc, #40]	@ (800dd70 <ip_reass_dequeue_datagram+0x58>)
 800dd46:	f000 fe8f 	bl	800ea68 <iprintf>
    prev->next = ipr->next;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	2005      	movs	r0, #5
 800dd56:	f7f6 fea7 	bl	8004aa8 <memp_free>
}
 800dd5a:	bf00      	nop
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	20008458 	.word	0x20008458
 800dd68:	0801208c 	.word	0x0801208c
 800dd6c:	08012154 	.word	0x08012154
 800dd70:	080120d4 	.word	0x080120d4

0800dd74 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b08c      	sub	sp, #48	@ 0x30
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dd84:	2301      	movs	r3, #1
 800dd86:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	885b      	ldrh	r3, [r3, #2]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7f6 f99f 	bl	80040d8 <lwip_htons>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	f003 030f 	and.w	r3, r3, #15
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ddac:	7e7b      	ldrb	r3, [r7, #25]
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	8b7a      	ldrh	r2, [r7, #26]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d202      	bcs.n	800ddbc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ddb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddba:	e135      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ddbc:	7e7b      	ldrb	r3, [r7, #25]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	8b7a      	ldrh	r2, [r7, #26]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	88db      	ldrh	r3, [r3, #6]
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f6 f983 	bl	80040d8 <lwip_htons>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	00db      	lsls	r3, r3, #3
 800dddc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde6:	2200      	movs	r2, #0
 800dde8:	701a      	strb	r2, [r3, #0]
 800ddea:	2200      	movs	r2, #0
 800ddec:	705a      	strb	r2, [r3, #1]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	709a      	strb	r2, [r3, #2]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ddf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf8:	8afa      	ldrh	r2, [r7, #22]
 800ddfa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ddfc:	8afa      	ldrh	r2, [r7, #22]
 800ddfe:	8b7b      	ldrh	r3, [r7, #26]
 800de00:	4413      	add	r3, r2
 800de02:	b29a      	uxth	r2, r3
 800de04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de06:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800de08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0a:	88db      	ldrh	r3, [r3, #6]
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	8afa      	ldrh	r2, [r7, #22]
 800de10:	429a      	cmp	r2, r3
 800de12:	d902      	bls.n	800de1a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de14:	f04f 33ff 	mov.w	r3, #4294967295
 800de18:	e106      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de20:	e068      	b.n	800def4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800de22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800de28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2a:	889b      	ldrh	r3, [r3, #4]
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	889b      	ldrh	r3, [r3, #4]
 800de32:	b29b      	uxth	r3, r3
 800de34:	429a      	cmp	r2, r3
 800de36:	d235      	bcs.n	800dea4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800de38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	2b00      	cmp	r3, #0
 800de42:	d020      	beq.n	800de86 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de46:	889b      	ldrh	r3, [r3, #4]
 800de48:	b29a      	uxth	r2, r3
 800de4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4c:	88db      	ldrh	r3, [r3, #6]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	429a      	cmp	r2, r3
 800de52:	d307      	bcc.n	800de64 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de56:	88db      	ldrh	r3, [r3, #6]
 800de58:	b29a      	uxth	r2, r3
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	889b      	ldrh	r3, [r3, #4]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	429a      	cmp	r2, r3
 800de62:	d902      	bls.n	800de6a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de64:	f04f 33ff 	mov.w	r3, #4294967295
 800de68:	e0de      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800de6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800de70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de72:	88db      	ldrh	r3, [r3, #6]
 800de74:	b29a      	uxth	r2, r3
 800de76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de78:	889b      	ldrh	r3, [r3, #4]
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d03d      	beq.n	800defc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800de80:	2300      	movs	r3, #0
 800de82:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800de84:	e03a      	b.n	800defc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de88:	88db      	ldrh	r3, [r3, #6]
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	889b      	ldrh	r3, [r3, #4]
 800de90:	b29b      	uxth	r3, r3
 800de92:	429a      	cmp	r2, r3
 800de94:	d902      	bls.n	800de9c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de96:	f04f 33ff 	mov.w	r3, #4294967295
 800de9a:	e0c5      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	605a      	str	r2, [r3, #4]
      break;
 800dea2:	e02b      	b.n	800defc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800dea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea6:	889b      	ldrh	r3, [r3, #4]
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	889b      	ldrh	r3, [r3, #4]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d102      	bne.n	800deba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800deb4:	f04f 33ff 	mov.w	r3, #4294967295
 800deb8:	e0b6      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800deba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debc:	889b      	ldrh	r3, [r3, #4]
 800debe:	b29a      	uxth	r2, r3
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	88db      	ldrh	r3, [r3, #6]
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d202      	bcs.n	800ded0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800deca:	f04f 33ff 	mov.w	r3, #4294967295
 800dece:	e0ab      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ded0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ded6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded8:	88db      	ldrh	r3, [r3, #6]
 800deda:	b29a      	uxth	r2, r3
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	889b      	ldrh	r3, [r3, #4]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d001      	beq.n	800deea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800def4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def6:	2b00      	cmp	r3, #0
 800def8:	d193      	bne.n	800de22 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800defa:	e000      	b.n	800defe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800defc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800defe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d12d      	bne.n	800df60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800df04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df06:	2b00      	cmp	r3, #0
 800df08:	d01c      	beq.n	800df44 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800df0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0c:	88db      	ldrh	r3, [r3, #6]
 800df0e:	b29a      	uxth	r2, r3
 800df10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df12:	889b      	ldrh	r3, [r3, #4]
 800df14:	b29b      	uxth	r3, r3
 800df16:	429a      	cmp	r2, r3
 800df18:	d906      	bls.n	800df28 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800df1a:	4b45      	ldr	r3, [pc, #276]	@ (800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df1c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800df20:	4944      	ldr	r1, [pc, #272]	@ (800e034 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800df22:	4845      	ldr	r0, [pc, #276]	@ (800e038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df24:	f000 fda0 	bl	800ea68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800df28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800df2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df30:	88db      	ldrh	r3, [r3, #6]
 800df32:	b29a      	uxth	r2, r3
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	889b      	ldrh	r3, [r3, #4]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d010      	beq.n	800df60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	623b      	str	r3, [r7, #32]
 800df42:	e00d      	b.n	800df60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d006      	beq.n	800df5a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800df4c:	4b38      	ldr	r3, [pc, #224]	@ (800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df4e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800df52:	493a      	ldr	r1, [pc, #232]	@ (800e03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800df54:	4838      	ldr	r0, [pc, #224]	@ (800e038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df56:	f000 fd87 	bl	800ea68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d105      	bne.n	800df72 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	7f9b      	ldrb	r3, [r3, #30]
 800df6a:	f003 0301 	and.w	r3, r3, #1
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d059      	beq.n	800e026 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d04f      	beq.n	800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	889b      	ldrh	r3, [r3, #4]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	623b      	str	r3, [r7, #32]
 800df92:	e041      	b.n	800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800df94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df96:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800df98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800df9e:	e012      	b.n	800dfc6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800dfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa8:	88db      	ldrh	r3, [r3, #6]
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfae:	889b      	ldrh	r3, [r3, #4]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d002      	beq.n	800dfbc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	623b      	str	r3, [r7, #32]
            break;
 800dfba:	e007      	b.n	800dfcc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800dfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1e9      	bne.n	800dfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d022      	beq.n	800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dfda:	4b15      	ldr	r3, [pc, #84]	@ (800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfdc:	f240 12df 	movw	r2, #479	@ 0x1df
 800dfe0:	4917      	ldr	r1, [pc, #92]	@ (800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dfe2:	4815      	ldr	r0, [pc, #84]	@ (800e038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfe4:	f000 fd40 	bl	800ea68 <iprintf>
          LWIP_ASSERT("sanity check",
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d106      	bne.n	800e002 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dff4:	4b0e      	ldr	r3, [pc, #56]	@ (800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dff6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dffa:	4911      	ldr	r1, [pc, #68]	@ (800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dffc:	480e      	ldr	r0, [pc, #56]	@ (800e038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dffe:	f000 fd33 	bl	800ea68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d006      	beq.n	800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e00a:	4b09      	ldr	r3, [pc, #36]	@ (800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e00c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e010:	490c      	ldr	r1, [pc, #48]	@ (800e044 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e012:	4809      	ldr	r0, [pc, #36]	@ (800e038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e014:	f000 fd28 	bl	800ea68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	bf14      	ite	ne
 800e01e:	2301      	movne	r3, #1
 800e020:	2300      	moveq	r3, #0
 800e022:	b2db      	uxtb	r3, r3
 800e024:	e000      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3730      	adds	r7, #48	@ 0x30
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	0801208c 	.word	0x0801208c
 800e034:	08012170 	.word	0x08012170
 800e038:	080120d4 	.word	0x080120d4
 800e03c:	08012190 	.word	0x08012190
 800e040:	080121c8 	.word	0x080121c8
 800e044:	080121d8 	.word	0x080121d8

0800e048 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08e      	sub	sp, #56	@ 0x38
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	f003 030f 	and.w	r3, r3, #15
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2b14      	cmp	r3, #20
 800e066:	f040 8171 	bne.w	800e34c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e06c:	88db      	ldrh	r3, [r3, #6]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	4618      	mov	r0, r3
 800e072:	f7f6 f831 	bl	80040d8 <lwip_htons>
 800e076:	4603      	mov	r3, r0
 800e078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	00db      	lsls	r3, r3, #3
 800e080:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e084:	885b      	ldrh	r3, [r3, #2]
 800e086:	b29b      	uxth	r3, r3
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f6 f825 	bl	80040d8 <lwip_htons>
 800e08e:	4603      	mov	r3, r0
 800e090:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	f003 030f 	and.w	r3, r3, #15
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e0a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	f0c0 8150 	bcc.w	800e350 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e0b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7f7 fbf5 	bl	80058ac <pbuf_clen>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e0c6:	4b8c      	ldr	r3, [pc, #560]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	8c3b      	ldrh	r3, [r7, #32]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	2b0a      	cmp	r3, #10
 800e0d2:	dd10      	ble.n	800e0f6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0d4:	8c3b      	ldrh	r3, [r7, #32]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0da:	f7ff fd81 	bl	800dbe0 <ip_reass_remove_oldest_datagram>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 8137 	beq.w	800e354 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e0e6:	4b84      	ldr	r3, [pc, #528]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	8c3b      	ldrh	r3, [r7, #32]
 800e0ee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0f0:	2b0a      	cmp	r3, #10
 800e0f2:	f300 812f 	bgt.w	800e354 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e0f6:	4b81      	ldr	r3, [pc, #516]	@ (800e2fc <ip4_reass+0x2b4>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0fc:	e015      	b.n	800e12a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	695a      	ldr	r2, [r3, #20]
 800e102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	429a      	cmp	r2, r3
 800e108:	d10c      	bne.n	800e124 <ip4_reass+0xdc>
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	699a      	ldr	r2, [r3, #24]
 800e10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	429a      	cmp	r2, r3
 800e114:	d106      	bne.n	800e124 <ip4_reass+0xdc>
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	899a      	ldrh	r2, [r3, #12]
 800e11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11c:	889b      	ldrh	r3, [r3, #4]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	429a      	cmp	r2, r3
 800e122:	d006      	beq.n	800e132 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	633b      	str	r3, [r7, #48]	@ 0x30
 800e12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1e6      	bne.n	800e0fe <ip4_reass+0xb6>
 800e130:	e000      	b.n	800e134 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e132:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	2b00      	cmp	r3, #0
 800e138:	d109      	bne.n	800e14e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e13a:	8c3b      	ldrh	r3, [r7, #32]
 800e13c:	4619      	mov	r1, r3
 800e13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e140:	f7ff fdb0 	bl	800dca4 <ip_reass_enqueue_new_datagram>
 800e144:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d11c      	bne.n	800e186 <ip4_reass+0x13e>
      goto nullreturn;
 800e14c:	e105      	b.n	800e35a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e150:	88db      	ldrh	r3, [r3, #6]
 800e152:	b29b      	uxth	r3, r3
 800e154:	4618      	mov	r0, r3
 800e156:	f7f5 ffbf 	bl	80040d8 <lwip_htons>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e160:	2b00      	cmp	r3, #0
 800e162:	d110      	bne.n	800e186 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e166:	89db      	ldrh	r3, [r3, #14]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f5 ffb5 	bl	80040d8 <lwip_htons>
 800e16e:	4603      	mov	r3, r0
 800e170:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e174:	2b00      	cmp	r3, #0
 800e176:	d006      	beq.n	800e186 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17a:	3308      	adds	r3, #8
 800e17c:	2214      	movs	r2, #20
 800e17e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e180:	4618      	mov	r0, r3
 800e182:	f000 fd4c 	bl	800ec1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e188:	88db      	ldrh	r3, [r3, #6]
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	f003 0320 	and.w	r3, r3, #32
 800e190:	2b00      	cmp	r3, #0
 800e192:	bf0c      	ite	eq
 800e194:	2301      	moveq	r3, #1
 800e196:	2300      	movne	r3, #0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00e      	beq.n	800e1c0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e1a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1a6:	4413      	add	r3, r2
 800e1a8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e1aa:	8b7a      	ldrh	r2, [r7, #26]
 800e1ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	f0c0 80a0 	bcc.w	800e2f4 <ip4_reass+0x2ac>
 800e1b4:	8b7b      	ldrh	r3, [r7, #26]
 800e1b6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	f200 809a 	bhi.w	800e2f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e1c0:	69fa      	ldr	r2, [r7, #28]
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1c6:	f7ff fdd5 	bl	800dd74 <ip_reass_chain_frag_into_datagram_and_validate>
 800e1ca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d2:	f000 809b 	beq.w	800e30c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e1d6:	4b48      	ldr	r3, [pc, #288]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e1d8:	881a      	ldrh	r2, [r3, #0]
 800e1da:	8c3b      	ldrh	r3, [r7, #32]
 800e1dc:	4413      	add	r3, r2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	4b45      	ldr	r3, [pc, #276]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e1e2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00d      	beq.n	800e206 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e1ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1ee:	4413      	add	r3, r2
 800e1f0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f4:	8a7a      	ldrh	r2, [r7, #18]
 800e1f6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fa:	7f9b      	ldrb	r3, [r3, #30]
 800e1fc:	f043 0301 	orr.w	r3, r3, #1
 800e200:	b2da      	uxtb	r2, r3
 800e202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e204:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d171      	bne.n	800e2f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20e:	8b9b      	ldrh	r3, [r3, #28]
 800e210:	3314      	adds	r3, #20
 800e212:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e228:	3308      	adds	r3, #8
 800e22a:	2214      	movs	r2, #20
 800e22c:	4619      	mov	r1, r3
 800e22e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e230:	f000 fcf5 	bl	800ec1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e234:	8a3b      	ldrh	r3, [r7, #16]
 800e236:	4618      	mov	r0, r3
 800e238:	f7f5 ff4e 	bl	80040d8 <lwip_htons>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461a      	mov	r2, r3
 800e240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e242:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e246:	2200      	movs	r2, #0
 800e248:	719a      	strb	r2, [r3, #6]
 800e24a:	2200      	movs	r2, #0
 800e24c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e250:	2200      	movs	r2, #0
 800e252:	729a      	strb	r2, [r3, #10]
 800e254:	2200      	movs	r2, #0
 800e256:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e25e:	e00d      	b.n	800e27c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e266:	2114      	movs	r1, #20
 800e268:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e26a:	f7f7 fa11 	bl	8005690 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e26e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7f7 fb55 	bl	8005920 <pbuf_cat>
      r = iprh->next_pbuf;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1ee      	bne.n	800e260 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e282:	4b1e      	ldr	r3, [pc, #120]	@ (800e2fc <ip4_reass+0x2b4>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e288:	429a      	cmp	r2, r3
 800e28a:	d102      	bne.n	800e292 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e28c:	2300      	movs	r3, #0
 800e28e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e290:	e010      	b.n	800e2b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e292:	4b1a      	ldr	r3, [pc, #104]	@ (800e2fc <ip4_reass+0x2b4>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e298:	e007      	b.n	800e2aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d006      	beq.n	800e2b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1f4      	bne.n	800e29a <ip4_reass+0x252>
 800e2b0:	e000      	b.n	800e2b4 <ip4_reass+0x26c>
          break;
 800e2b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e2b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2b8:	f7ff fd2e 	bl	800dd18 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7f7 faf5 	bl	80058ac <pbuf_clen>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	8c3a      	ldrh	r2, [r7, #32]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d906      	bls.n	800e2de <ip4_reass+0x296>
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e300 <ip4_reass+0x2b8>)
 800e2d2:	f240 229b 	movw	r2, #667	@ 0x29b
 800e2d6:	490b      	ldr	r1, [pc, #44]	@ (800e304 <ip4_reass+0x2bc>)
 800e2d8:	480b      	ldr	r0, [pc, #44]	@ (800e308 <ip4_reass+0x2c0>)
 800e2da:	f000 fbc5 	bl	800ea68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e2de:	4b06      	ldr	r3, [pc, #24]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e2e0:	881a      	ldrh	r2, [r3, #0]
 800e2e2:	8c3b      	ldrh	r3, [r7, #32]
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	4b03      	ldr	r3, [pc, #12]	@ (800e2f8 <ip4_reass+0x2b0>)
 800e2ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	e038      	b.n	800e362 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	e036      	b.n	800e362 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e2f4:	bf00      	nop
 800e2f6:	e00a      	b.n	800e30e <ip4_reass+0x2c6>
 800e2f8:	2000845c 	.word	0x2000845c
 800e2fc:	20008458 	.word	0x20008458
 800e300:	0801208c 	.word	0x0801208c
 800e304:	080121fc 	.word	0x080121fc
 800e308:	080120d4 	.word	0x080120d4
    goto nullreturn_ipr;
 800e30c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	2b00      	cmp	r3, #0
 800e312:	d106      	bne.n	800e322 <ip4_reass+0x2da>
 800e314:	4b15      	ldr	r3, [pc, #84]	@ (800e36c <ip4_reass+0x324>)
 800e316:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e31a:	4915      	ldr	r1, [pc, #84]	@ (800e370 <ip4_reass+0x328>)
 800e31c:	4815      	ldr	r0, [pc, #84]	@ (800e374 <ip4_reass+0x32c>)
 800e31e:	f000 fba3 	bl	800ea68 <iprintf>
  if (ipr->p == NULL) {
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d116      	bne.n	800e358 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e32a:	4b13      	ldr	r3, [pc, #76]	@ (800e378 <ip4_reass+0x330>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e330:	429a      	cmp	r2, r3
 800e332:	d006      	beq.n	800e342 <ip4_reass+0x2fa>
 800e334:	4b0d      	ldr	r3, [pc, #52]	@ (800e36c <ip4_reass+0x324>)
 800e336:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e33a:	4910      	ldr	r1, [pc, #64]	@ (800e37c <ip4_reass+0x334>)
 800e33c:	480d      	ldr	r0, [pc, #52]	@ (800e374 <ip4_reass+0x32c>)
 800e33e:	f000 fb93 	bl	800ea68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e342:	2100      	movs	r1, #0
 800e344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e346:	f7ff fce7 	bl	800dd18 <ip_reass_dequeue_datagram>
 800e34a:	e006      	b.n	800e35a <ip4_reass+0x312>
    goto nullreturn;
 800e34c:	bf00      	nop
 800e34e:	e004      	b.n	800e35a <ip4_reass+0x312>
    goto nullreturn;
 800e350:	bf00      	nop
 800e352:	e002      	b.n	800e35a <ip4_reass+0x312>
      goto nullreturn;
 800e354:	bf00      	nop
 800e356:	e000      	b.n	800e35a <ip4_reass+0x312>
  }

nullreturn:
 800e358:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7f7 fa1e 	bl	800579c <pbuf_free>
  return NULL;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3738      	adds	r7, #56	@ 0x38
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	0801208c 	.word	0x0801208c
 800e370:	08012218 	.word	0x08012218
 800e374:	080120d4 	.word	0x080120d4
 800e378:	20008458 	.word	0x20008458
 800e37c:	08012224 	.word	0x08012224

0800e380 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e384:	2006      	movs	r0, #6
 800e386:	f7f6 fb1f 	bl	80049c8 <memp_malloc>
 800e38a:	4603      	mov	r3, r0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d106      	bne.n	800e3ac <ip_frag_free_pbuf_custom_ref+0x1c>
 800e39e:	4b07      	ldr	r3, [pc, #28]	@ (800e3bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e3a0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e3a4:	4906      	ldr	r1, [pc, #24]	@ (800e3c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e3a6:	4807      	ldr	r0, [pc, #28]	@ (800e3c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e3a8:	f000 fb5e 	bl	800ea68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	2006      	movs	r0, #6
 800e3b0:	f7f6 fb7a 	bl	8004aa8 <memp_free>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	0801208c 	.word	0x0801208c
 800e3c0:	08012244 	.word	0x08012244
 800e3c4:	080120d4 	.word	0x080120d4

0800e3c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <ipfrag_free_pbuf_custom+0x20>
 800e3da:	4b11      	ldr	r3, [pc, #68]	@ (800e420 <ipfrag_free_pbuf_custom+0x58>)
 800e3dc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e3e0:	4910      	ldr	r1, [pc, #64]	@ (800e424 <ipfrag_free_pbuf_custom+0x5c>)
 800e3e2:	4811      	ldr	r0, [pc, #68]	@ (800e428 <ipfrag_free_pbuf_custom+0x60>)
 800e3e4:	f000 fb40 	bl	800ea68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d006      	beq.n	800e3fe <ipfrag_free_pbuf_custom+0x36>
 800e3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e420 <ipfrag_free_pbuf_custom+0x58>)
 800e3f2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e3f6:	490d      	ldr	r1, [pc, #52]	@ (800e42c <ipfrag_free_pbuf_custom+0x64>)
 800e3f8:	480b      	ldr	r0, [pc, #44]	@ (800e428 <ipfrag_free_pbuf_custom+0x60>)
 800e3fa:	f000 fb35 	bl	800ea68 <iprintf>
  if (pcr->original != NULL) {
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	695b      	ldr	r3, [r3, #20]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d004      	beq.n	800e410 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f7 f9c6 	bl	800579c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7ff ffbd 	bl	800e390 <ip_frag_free_pbuf_custom_ref>
}
 800e416:	bf00      	nop
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	0801208c 	.word	0x0801208c
 800e424:	08012250 	.word	0x08012250
 800e428:	080120d4 	.word	0x080120d4
 800e42c:	0801225c 	.word	0x0801225c

0800e430 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b094      	sub	sp, #80	@ 0x50
 800e434:	af02      	add	r7, sp, #8
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e446:	3b14      	subs	r3, #20
 800e448:	2b00      	cmp	r3, #0
 800e44a:	da00      	bge.n	800e44e <ip4_frag+0x1e>
 800e44c:	3307      	adds	r3, #7
 800e44e:	10db      	asrs	r3, r3, #3
 800e450:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e452:	2314      	movs	r3, #20
 800e454:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800e45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e45e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	f003 030f 	and.w	r3, r3, #15
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b14      	cmp	r3, #20
 800e470:	d002      	beq.n	800e478 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e472:	f06f 0305 	mvn.w	r3, #5
 800e476:	e110      	b.n	800e69a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	895b      	ldrh	r3, [r3, #10]
 800e47c:	2b13      	cmp	r3, #19
 800e47e:	d809      	bhi.n	800e494 <ip4_frag+0x64>
 800e480:	4b88      	ldr	r3, [pc, #544]	@ (800e6a4 <ip4_frag+0x274>)
 800e482:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800e486:	4988      	ldr	r1, [pc, #544]	@ (800e6a8 <ip4_frag+0x278>)
 800e488:	4888      	ldr	r0, [pc, #544]	@ (800e6ac <ip4_frag+0x27c>)
 800e48a:	f000 faed 	bl	800ea68 <iprintf>
 800e48e:	f06f 0305 	mvn.w	r3, #5
 800e492:	e102      	b.n	800e69a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e496:	88db      	ldrh	r3, [r3, #6]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7f5 fe1c 	bl	80040d8 <lwip_htons>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800e4a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e4a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e4ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e4b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	891b      	ldrh	r3, [r3, #8]
 800e4ba:	3b14      	subs	r3, #20
 800e4bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800e4c0:	e0e1      	b.n	800e686 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e4c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	bf28      	it	cs
 800e4d0:	4613      	movcs	r3, r2
 800e4d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e4d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e4d8:	2114      	movs	r1, #20
 800e4da:	200e      	movs	r0, #14
 800e4dc:	f7f6 fe7a 	bl	80051d4 <pbuf_alloc>
 800e4e0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 80d5 	beq.w	800e694 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ec:	895b      	ldrh	r3, [r3, #10]
 800e4ee:	2b13      	cmp	r3, #19
 800e4f0:	d806      	bhi.n	800e500 <ip4_frag+0xd0>
 800e4f2:	4b6c      	ldr	r3, [pc, #432]	@ (800e6a4 <ip4_frag+0x274>)
 800e4f4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e4f8:	496d      	ldr	r1, [pc, #436]	@ (800e6b0 <ip4_frag+0x280>)
 800e4fa:	486c      	ldr	r0, [pc, #432]	@ (800e6ac <ip4_frag+0x27c>)
 800e4fc:	f000 fab4 	bl	800ea68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	2214      	movs	r2, #20
 800e506:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 fb88 	bl	800ec1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800e514:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e516:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800e51a:	e064      	b.n	800e5e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	895a      	ldrh	r2, [r3, #10]
 800e520:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	895b      	ldrh	r3, [r3, #10]
 800e52a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d906      	bls.n	800e53e <ip4_frag+0x10e>
 800e530:	4b5c      	ldr	r3, [pc, #368]	@ (800e6a4 <ip4_frag+0x274>)
 800e532:	f240 322d 	movw	r2, #813	@ 0x32d
 800e536:	495f      	ldr	r1, [pc, #380]	@ (800e6b4 <ip4_frag+0x284>)
 800e538:	485c      	ldr	r0, [pc, #368]	@ (800e6ac <ip4_frag+0x27c>)
 800e53a:	f000 fa95 	bl	800ea68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e53e:	8bfa      	ldrh	r2, [r7, #30]
 800e540:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e544:	4293      	cmp	r3, r2
 800e546:	bf28      	it	cs
 800e548:	4613      	movcs	r3, r2
 800e54a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e54e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e552:	2b00      	cmp	r3, #0
 800e554:	d105      	bne.n	800e562 <ip4_frag+0x132>
        poff = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	60fb      	str	r3, [r7, #12]
        continue;
 800e560:	e041      	b.n	800e5e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e562:	f7ff ff0d 	bl	800e380 <ip_frag_alloc_pbuf_custom_ref>
 800e566:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d103      	bne.n	800e576 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e56e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e570:	f7f7 f914 	bl	800579c <pbuf_free>
        goto memerr;
 800e574:	e08f      	b.n	800e696 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e576:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e57c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e57e:	4413      	add	r3, r2
 800e580:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800e584:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e588:	9201      	str	r2, [sp, #4]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4603      	mov	r3, r0
 800e58e:	2241      	movs	r2, #65	@ 0x41
 800e590:	2000      	movs	r0, #0
 800e592:	f7f6 ff49 	bl	8005428 <pbuf_alloced_custom>
 800e596:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e59e:	69b8      	ldr	r0, [r7, #24]
 800e5a0:	f7ff fef6 	bl	800e390 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e5a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e5a6:	f7f7 f8f9 	bl	800579c <pbuf_free>
        goto memerr;
 800e5aa:	e074      	b.n	800e696 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f7f7 f995 	bl	80058dc <pbuf_ref>
      pcr->original = p;
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	4a3f      	ldr	r2, [pc, #252]	@ (800e6b8 <ip4_frag+0x288>)
 800e5bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e5be:	6979      	ldr	r1, [r7, #20]
 800e5c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e5c2:	f7f7 f9ad 	bl	8005920 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e5c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e5ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800e5d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d004      	beq.n	800e5e6 <ip4_frag+0x1b6>
        poff = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e5e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d196      	bne.n	800e51c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e5ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e5f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e5f4:	4413      	add	r3, r2
 800e5f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e5fc:	f1a3 0213 	sub.w	r2, r3, #19
 800e600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e604:	429a      	cmp	r2, r3
 800e606:	bfcc      	ite	gt
 800e608:	2301      	movgt	r3, #1
 800e60a:	2300      	movle	r3, #0
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e618:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800e61a:	6a3b      	ldr	r3, [r7, #32]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <ip4_frag+0x1f6>
 800e620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e626:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e628:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e62c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e62e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e630:	4618      	mov	r0, r3
 800e632:	f7f5 fd51 	bl	80040d8 <lwip_htons>
 800e636:	4603      	mov	r3, r0
 800e638:	461a      	mov	r2, r3
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e63e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e640:	3314      	adds	r3, #20
 800e642:	b29b      	uxth	r3, r3
 800e644:	4618      	mov	r0, r3
 800e646:	f7f5 fd47 	bl	80040d8 <lwip_htons>
 800e64a:	4603      	mov	r3, r0
 800e64c:	461a      	mov	r2, r3
 800e64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e650:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	2200      	movs	r2, #0
 800e656:	729a      	strb	r2, [r3, #10]
 800e658:	2200      	movs	r2, #0
 800e65a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e664:	68b8      	ldr	r0, [r7, #8]
 800e666:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e668:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e66a:	f7f7 f897 	bl	800579c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e66e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e672:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800e67a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e67e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e680:	4413      	add	r3, r2
 800e682:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800e686:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f47f af19 	bne.w	800e4c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	e002      	b.n	800e69a <ip4_frag+0x26a>
      goto memerr;
 800e694:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3748      	adds	r7, #72	@ 0x48
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	0801208c 	.word	0x0801208c
 800e6a8:	08012268 	.word	0x08012268
 800e6ac:	080120d4 	.word	0x080120d4
 800e6b0:	08012284 	.word	0x08012284
 800e6b4:	080122a4 	.word	0x080122a4
 800e6b8:	0800e3c9 	.word	0x0800e3c9

0800e6bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e6c6:	230e      	movs	r3, #14
 800e6c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	895b      	ldrh	r3, [r3, #10]
 800e6ce:	2b0e      	cmp	r3, #14
 800e6d0:	d96e      	bls.n	800e7b0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7bdb      	ldrb	r3, [r3, #15]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d106      	bne.n	800e6e8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	7b1a      	ldrb	r2, [r3, #12]
 800e6f2:	7b5b      	ldrb	r3, [r3, #13]
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	f003 0301 	and.w	r3, r3, #1
 800e702:	2b00      	cmp	r3, #0
 800e704:	d023      	beq.n	800e74e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d10f      	bne.n	800e72e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	785b      	ldrb	r3, [r3, #1]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d11b      	bne.n	800e74e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e71a:	2b5e      	cmp	r3, #94	@ 0x5e
 800e71c:	d117      	bne.n	800e74e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	7b5b      	ldrb	r3, [r3, #13]
 800e722:	f043 0310 	orr.w	r3, r3, #16
 800e726:	b2da      	uxtb	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	735a      	strb	r2, [r3, #13]
 800e72c:	e00f      	b.n	800e74e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2206      	movs	r2, #6
 800e732:	4928      	ldr	r1, [pc, #160]	@ (800e7d4 <ethernet_input+0x118>)
 800e734:	4618      	mov	r0, r3
 800e736:	f000 f9ec 	bl	800eb12 <memcmp>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d106      	bne.n	800e74e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7b5b      	ldrb	r3, [r3, #13]
 800e744:	f043 0308 	orr.w	r3, r3, #8
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e74e:	89fb      	ldrh	r3, [r7, #14]
 800e750:	2b08      	cmp	r3, #8
 800e752:	d003      	beq.n	800e75c <ethernet_input+0xa0>
 800e754:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e758:	d014      	beq.n	800e784 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e75a:	e032      	b.n	800e7c2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e762:	f003 0308 	and.w	r3, r3, #8
 800e766:	2b00      	cmp	r3, #0
 800e768:	d024      	beq.n	800e7b4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e76a:	8afb      	ldrh	r3, [r7, #22]
 800e76c:	4619      	mov	r1, r3
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7f6 ff8e 	bl	8005690 <pbuf_remove_header>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d11e      	bne.n	800e7b8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7fe ff15 	bl	800d5ac <ip4_input>
      break;
 800e782:	e013      	b.n	800e7ac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e78a:	f003 0308 	and.w	r3, r3, #8
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d014      	beq.n	800e7bc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e792:	8afb      	ldrh	r3, [r7, #22]
 800e794:	4619      	mov	r1, r3
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f7f6 ff7a 	bl	8005690 <pbuf_remove_header>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d10e      	bne.n	800e7c0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7fe f8b5 	bl	800c914 <etharp_input>
      break;
 800e7aa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	e00c      	b.n	800e7ca <ethernet_input+0x10e>
    goto free_and_return;
 800e7b0:	bf00      	nop
 800e7b2:	e006      	b.n	800e7c2 <ethernet_input+0x106>
        goto free_and_return;
 800e7b4:	bf00      	nop
 800e7b6:	e004      	b.n	800e7c2 <ethernet_input+0x106>
        goto free_and_return;
 800e7b8:	bf00      	nop
 800e7ba:	e002      	b.n	800e7c2 <ethernet_input+0x106>
        goto free_and_return;
 800e7bc:	bf00      	nop
 800e7be:	e000      	b.n	800e7c2 <ethernet_input+0x106>
        goto free_and_return;
 800e7c0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7f6 ffea 	bl	800579c <pbuf_free>
  return ERR_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3718      	adds	r7, #24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	08012450 	.word	0x08012450

0800e7d8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e7e6:	8c3b      	ldrh	r3, [r7, #32]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f5 fc75 	bl	80040d8 <lwip_htons>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e7f2:	210e      	movs	r1, #14
 800e7f4:	68b8      	ldr	r0, [r7, #8]
 800e7f6:	f7f6 ff3b 	bl	8005670 <pbuf_add_header>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d125      	bne.n	800e84c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	8afa      	ldrh	r2, [r7, #22]
 800e80a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	2206      	movs	r2, #6
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	4618      	mov	r0, r3
 800e814:	f000 fa03 	bl	800ec1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	3306      	adds	r3, #6
 800e81c:	2206      	movs	r2, #6
 800e81e:	6879      	ldr	r1, [r7, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	f000 f9fc 	bl	800ec1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e82c:	2b06      	cmp	r3, #6
 800e82e:	d006      	beq.n	800e83e <ethernet_output+0x66>
 800e830:	4b0a      	ldr	r3, [pc, #40]	@ (800e85c <ethernet_output+0x84>)
 800e832:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800e836:	490a      	ldr	r1, [pc, #40]	@ (800e860 <ethernet_output+0x88>)
 800e838:	480a      	ldr	r0, [pc, #40]	@ (800e864 <ethernet_output+0x8c>)
 800e83a:	f000 f915 	bl	800ea68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	699b      	ldr	r3, [r3, #24]
 800e842:	68b9      	ldr	r1, [r7, #8]
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	4798      	blx	r3
 800e848:	4603      	mov	r3, r0
 800e84a:	e002      	b.n	800e852 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e84c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e84e:	f06f 0301 	mvn.w	r3, #1
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	080122b4 	.word	0x080122b4
 800e860:	080122ec 	.word	0x080122ec
 800e864:	08012320 	.word	0x08012320

0800e868 <rand>:
 800e868:	4b16      	ldr	r3, [pc, #88]	@ (800e8c4 <rand+0x5c>)
 800e86a:	b510      	push	{r4, lr}
 800e86c:	681c      	ldr	r4, [r3, #0]
 800e86e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e870:	b9b3      	cbnz	r3, 800e8a0 <rand+0x38>
 800e872:	2018      	movs	r0, #24
 800e874:	f000 fa4a 	bl	800ed0c <malloc>
 800e878:	4602      	mov	r2, r0
 800e87a:	6320      	str	r0, [r4, #48]	@ 0x30
 800e87c:	b920      	cbnz	r0, 800e888 <rand+0x20>
 800e87e:	4b12      	ldr	r3, [pc, #72]	@ (800e8c8 <rand+0x60>)
 800e880:	4812      	ldr	r0, [pc, #72]	@ (800e8cc <rand+0x64>)
 800e882:	2152      	movs	r1, #82	@ 0x52
 800e884:	f000 f9da 	bl	800ec3c <__assert_func>
 800e888:	4911      	ldr	r1, [pc, #68]	@ (800e8d0 <rand+0x68>)
 800e88a:	4b12      	ldr	r3, [pc, #72]	@ (800e8d4 <rand+0x6c>)
 800e88c:	e9c0 1300 	strd	r1, r3, [r0]
 800e890:	4b11      	ldr	r3, [pc, #68]	@ (800e8d8 <rand+0x70>)
 800e892:	6083      	str	r3, [r0, #8]
 800e894:	230b      	movs	r3, #11
 800e896:	8183      	strh	r3, [r0, #12]
 800e898:	2100      	movs	r1, #0
 800e89a:	2001      	movs	r0, #1
 800e89c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e8a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e8a2:	480e      	ldr	r0, [pc, #56]	@ (800e8dc <rand+0x74>)
 800e8a4:	690b      	ldr	r3, [r1, #16]
 800e8a6:	694c      	ldr	r4, [r1, #20]
 800e8a8:	4a0d      	ldr	r2, [pc, #52]	@ (800e8e0 <rand+0x78>)
 800e8aa:	4358      	muls	r0, r3
 800e8ac:	fb02 0004 	mla	r0, r2, r4, r0
 800e8b0:	fba3 3202 	umull	r3, r2, r3, r2
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	eb40 0002 	adc.w	r0, r0, r2
 800e8ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e8be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e8c2:	bd10      	pop	{r4, pc}
 800e8c4:	20000038 	.word	0x20000038
 800e8c8:	0801245e 	.word	0x0801245e
 800e8cc:	08012475 	.word	0x08012475
 800e8d0:	abcd330e 	.word	0xabcd330e
 800e8d4:	e66d1234 	.word	0xe66d1234
 800e8d8:	0005deec 	.word	0x0005deec
 800e8dc:	5851f42d 	.word	0x5851f42d
 800e8e0:	4c957f2d 	.word	0x4c957f2d

0800e8e4 <std>:
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	b510      	push	{r4, lr}
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8f2:	6083      	str	r3, [r0, #8]
 800e8f4:	8181      	strh	r1, [r0, #12]
 800e8f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e8f8:	81c2      	strh	r2, [r0, #14]
 800e8fa:	6183      	str	r3, [r0, #24]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	2208      	movs	r2, #8
 800e900:	305c      	adds	r0, #92	@ 0x5c
 800e902:	f000 f916 	bl	800eb32 <memset>
 800e906:	4b0d      	ldr	r3, [pc, #52]	@ (800e93c <std+0x58>)
 800e908:	6263      	str	r3, [r4, #36]	@ 0x24
 800e90a:	4b0d      	ldr	r3, [pc, #52]	@ (800e940 <std+0x5c>)
 800e90c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e90e:	4b0d      	ldr	r3, [pc, #52]	@ (800e944 <std+0x60>)
 800e910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e912:	4b0d      	ldr	r3, [pc, #52]	@ (800e948 <std+0x64>)
 800e914:	6323      	str	r3, [r4, #48]	@ 0x30
 800e916:	4b0d      	ldr	r3, [pc, #52]	@ (800e94c <std+0x68>)
 800e918:	6224      	str	r4, [r4, #32]
 800e91a:	429c      	cmp	r4, r3
 800e91c:	d006      	beq.n	800e92c <std+0x48>
 800e91e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e922:	4294      	cmp	r4, r2
 800e924:	d002      	beq.n	800e92c <std+0x48>
 800e926:	33d0      	adds	r3, #208	@ 0xd0
 800e928:	429c      	cmp	r4, r3
 800e92a:	d105      	bne.n	800e938 <std+0x54>
 800e92c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e934:	f000 b970 	b.w	800ec18 <__retarget_lock_init_recursive>
 800e938:	bd10      	pop	{r4, pc}
 800e93a:	bf00      	nop
 800e93c:	0800ea8d 	.word	0x0800ea8d
 800e940:	0800eaaf 	.word	0x0800eaaf
 800e944:	0800eae7 	.word	0x0800eae7
 800e948:	0800eb0b 	.word	0x0800eb0b
 800e94c:	20008460 	.word	0x20008460

0800e950 <stdio_exit_handler>:
 800e950:	4a02      	ldr	r2, [pc, #8]	@ (800e95c <stdio_exit_handler+0xc>)
 800e952:	4903      	ldr	r1, [pc, #12]	@ (800e960 <stdio_exit_handler+0x10>)
 800e954:	4803      	ldr	r0, [pc, #12]	@ (800e964 <stdio_exit_handler+0x14>)
 800e956:	f000 b869 	b.w	800ea2c <_fwalk_sglue>
 800e95a:	bf00      	nop
 800e95c:	2000002c 	.word	0x2000002c
 800e960:	0800f51d 	.word	0x0800f51d
 800e964:	2000003c 	.word	0x2000003c

0800e968 <cleanup_stdio>:
 800e968:	6841      	ldr	r1, [r0, #4]
 800e96a:	4b0c      	ldr	r3, [pc, #48]	@ (800e99c <cleanup_stdio+0x34>)
 800e96c:	4299      	cmp	r1, r3
 800e96e:	b510      	push	{r4, lr}
 800e970:	4604      	mov	r4, r0
 800e972:	d001      	beq.n	800e978 <cleanup_stdio+0x10>
 800e974:	f000 fdd2 	bl	800f51c <_fflush_r>
 800e978:	68a1      	ldr	r1, [r4, #8]
 800e97a:	4b09      	ldr	r3, [pc, #36]	@ (800e9a0 <cleanup_stdio+0x38>)
 800e97c:	4299      	cmp	r1, r3
 800e97e:	d002      	beq.n	800e986 <cleanup_stdio+0x1e>
 800e980:	4620      	mov	r0, r4
 800e982:	f000 fdcb 	bl	800f51c <_fflush_r>
 800e986:	68e1      	ldr	r1, [r4, #12]
 800e988:	4b06      	ldr	r3, [pc, #24]	@ (800e9a4 <cleanup_stdio+0x3c>)
 800e98a:	4299      	cmp	r1, r3
 800e98c:	d004      	beq.n	800e998 <cleanup_stdio+0x30>
 800e98e:	4620      	mov	r0, r4
 800e990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e994:	f000 bdc2 	b.w	800f51c <_fflush_r>
 800e998:	bd10      	pop	{r4, pc}
 800e99a:	bf00      	nop
 800e99c:	20008460 	.word	0x20008460
 800e9a0:	200084c8 	.word	0x200084c8
 800e9a4:	20008530 	.word	0x20008530

0800e9a8 <global_stdio_init.part.0>:
 800e9a8:	b510      	push	{r4, lr}
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d8 <global_stdio_init.part.0+0x30>)
 800e9ac:	4c0b      	ldr	r4, [pc, #44]	@ (800e9dc <global_stdio_init.part.0+0x34>)
 800e9ae:	4a0c      	ldr	r2, [pc, #48]	@ (800e9e0 <global_stdio_init.part.0+0x38>)
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2104      	movs	r1, #4
 800e9b8:	f7ff ff94 	bl	800e8e4 <std>
 800e9bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	2109      	movs	r1, #9
 800e9c4:	f7ff ff8e 	bl	800e8e4 <std>
 800e9c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e9cc:	2202      	movs	r2, #2
 800e9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d2:	2112      	movs	r1, #18
 800e9d4:	f7ff bf86 	b.w	800e8e4 <std>
 800e9d8:	20008598 	.word	0x20008598
 800e9dc:	20008460 	.word	0x20008460
 800e9e0:	0800e951 	.word	0x0800e951

0800e9e4 <__sfp_lock_acquire>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	@ (800e9ec <__sfp_lock_acquire+0x8>)
 800e9e6:	f000 b918 	b.w	800ec1a <__retarget_lock_acquire_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	200085a1 	.word	0x200085a1

0800e9f0 <__sfp_lock_release>:
 800e9f0:	4801      	ldr	r0, [pc, #4]	@ (800e9f8 <__sfp_lock_release+0x8>)
 800e9f2:	f000 b913 	b.w	800ec1c <__retarget_lock_release_recursive>
 800e9f6:	bf00      	nop
 800e9f8:	200085a1 	.word	0x200085a1

0800e9fc <__sinit>:
 800e9fc:	b510      	push	{r4, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	f7ff fff0 	bl	800e9e4 <__sfp_lock_acquire>
 800ea04:	6a23      	ldr	r3, [r4, #32]
 800ea06:	b11b      	cbz	r3, 800ea10 <__sinit+0x14>
 800ea08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0c:	f7ff bff0 	b.w	800e9f0 <__sfp_lock_release>
 800ea10:	4b04      	ldr	r3, [pc, #16]	@ (800ea24 <__sinit+0x28>)
 800ea12:	6223      	str	r3, [r4, #32]
 800ea14:	4b04      	ldr	r3, [pc, #16]	@ (800ea28 <__sinit+0x2c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d1f5      	bne.n	800ea08 <__sinit+0xc>
 800ea1c:	f7ff ffc4 	bl	800e9a8 <global_stdio_init.part.0>
 800ea20:	e7f2      	b.n	800ea08 <__sinit+0xc>
 800ea22:	bf00      	nop
 800ea24:	0800e969 	.word	0x0800e969
 800ea28:	20008598 	.word	0x20008598

0800ea2c <_fwalk_sglue>:
 800ea2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea30:	4607      	mov	r7, r0
 800ea32:	4688      	mov	r8, r1
 800ea34:	4614      	mov	r4, r2
 800ea36:	2600      	movs	r6, #0
 800ea38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ea40:	d505      	bpl.n	800ea4e <_fwalk_sglue+0x22>
 800ea42:	6824      	ldr	r4, [r4, #0]
 800ea44:	2c00      	cmp	r4, #0
 800ea46:	d1f7      	bne.n	800ea38 <_fwalk_sglue+0xc>
 800ea48:	4630      	mov	r0, r6
 800ea4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea4e:	89ab      	ldrh	r3, [r5, #12]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d907      	bls.n	800ea64 <_fwalk_sglue+0x38>
 800ea54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	d003      	beq.n	800ea64 <_fwalk_sglue+0x38>
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4638      	mov	r0, r7
 800ea60:	47c0      	blx	r8
 800ea62:	4306      	orrs	r6, r0
 800ea64:	3568      	adds	r5, #104	@ 0x68
 800ea66:	e7e9      	b.n	800ea3c <_fwalk_sglue+0x10>

0800ea68 <iprintf>:
 800ea68:	b40f      	push	{r0, r1, r2, r3}
 800ea6a:	b507      	push	{r0, r1, r2, lr}
 800ea6c:	4906      	ldr	r1, [pc, #24]	@ (800ea88 <iprintf+0x20>)
 800ea6e:	ab04      	add	r3, sp, #16
 800ea70:	6808      	ldr	r0, [r1, #0]
 800ea72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea76:	6881      	ldr	r1, [r0, #8]
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	f000 fa27 	bl	800eecc <_vfiprintf_r>
 800ea7e:	b003      	add	sp, #12
 800ea80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea84:	b004      	add	sp, #16
 800ea86:	4770      	bx	lr
 800ea88:	20000038 	.word	0x20000038

0800ea8c <__sread>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	460c      	mov	r4, r1
 800ea90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea94:	f000 f878 	bl	800eb88 <_read_r>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	bfab      	itete	ge
 800ea9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea9e:	89a3      	ldrhlt	r3, [r4, #12]
 800eaa0:	181b      	addge	r3, r3, r0
 800eaa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eaa6:	bfac      	ite	ge
 800eaa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eaaa:	81a3      	strhlt	r3, [r4, #12]
 800eaac:	bd10      	pop	{r4, pc}

0800eaae <__swrite>:
 800eaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab2:	461f      	mov	r7, r3
 800eab4:	898b      	ldrh	r3, [r1, #12]
 800eab6:	05db      	lsls	r3, r3, #23
 800eab8:	4605      	mov	r5, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	4616      	mov	r6, r2
 800eabe:	d505      	bpl.n	800eacc <__swrite+0x1e>
 800eac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac4:	2302      	movs	r3, #2
 800eac6:	2200      	movs	r2, #0
 800eac8:	f000 f84c 	bl	800eb64 <_lseek_r>
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ead2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ead6:	81a3      	strh	r3, [r4, #12]
 800ead8:	4632      	mov	r2, r6
 800eada:	463b      	mov	r3, r7
 800eadc:	4628      	mov	r0, r5
 800eade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eae2:	f000 b863 	b.w	800ebac <_write_r>

0800eae6 <__sseek>:
 800eae6:	b510      	push	{r4, lr}
 800eae8:	460c      	mov	r4, r1
 800eaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaee:	f000 f839 	bl	800eb64 <_lseek_r>
 800eaf2:	1c43      	adds	r3, r0, #1
 800eaf4:	89a3      	ldrh	r3, [r4, #12]
 800eaf6:	bf15      	itete	ne
 800eaf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eafa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eafe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb02:	81a3      	strheq	r3, [r4, #12]
 800eb04:	bf18      	it	ne
 800eb06:	81a3      	strhne	r3, [r4, #12]
 800eb08:	bd10      	pop	{r4, pc}

0800eb0a <__sclose>:
 800eb0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb0e:	f000 b819 	b.w	800eb44 <_close_r>

0800eb12 <memcmp>:
 800eb12:	b510      	push	{r4, lr}
 800eb14:	3901      	subs	r1, #1
 800eb16:	4402      	add	r2, r0
 800eb18:	4290      	cmp	r0, r2
 800eb1a:	d101      	bne.n	800eb20 <memcmp+0xe>
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	e005      	b.n	800eb2c <memcmp+0x1a>
 800eb20:	7803      	ldrb	r3, [r0, #0]
 800eb22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb26:	42a3      	cmp	r3, r4
 800eb28:	d001      	beq.n	800eb2e <memcmp+0x1c>
 800eb2a:	1b18      	subs	r0, r3, r4
 800eb2c:	bd10      	pop	{r4, pc}
 800eb2e:	3001      	adds	r0, #1
 800eb30:	e7f2      	b.n	800eb18 <memcmp+0x6>

0800eb32 <memset>:
 800eb32:	4402      	add	r2, r0
 800eb34:	4603      	mov	r3, r0
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d100      	bne.n	800eb3c <memset+0xa>
 800eb3a:	4770      	bx	lr
 800eb3c:	f803 1b01 	strb.w	r1, [r3], #1
 800eb40:	e7f9      	b.n	800eb36 <memset+0x4>
	...

0800eb44 <_close_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4d06      	ldr	r5, [pc, #24]	@ (800eb60 <_close_r+0x1c>)
 800eb48:	2300      	movs	r3, #0
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	4608      	mov	r0, r1
 800eb4e:	602b      	str	r3, [r5, #0]
 800eb50:	f7f2 f806 	bl	8000b60 <_close>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <_close_r+0x1a>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	b103      	cbz	r3, 800eb5e <_close_r+0x1a>
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	bd38      	pop	{r3, r4, r5, pc}
 800eb60:	2000859c 	.word	0x2000859c

0800eb64 <_lseek_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	4d07      	ldr	r5, [pc, #28]	@ (800eb84 <_lseek_r+0x20>)
 800eb68:	4604      	mov	r4, r0
 800eb6a:	4608      	mov	r0, r1
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	2200      	movs	r2, #0
 800eb70:	602a      	str	r2, [r5, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	f7f2 f81b 	bl	8000bae <_lseek>
 800eb78:	1c43      	adds	r3, r0, #1
 800eb7a:	d102      	bne.n	800eb82 <_lseek_r+0x1e>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b103      	cbz	r3, 800eb82 <_lseek_r+0x1e>
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	bd38      	pop	{r3, r4, r5, pc}
 800eb84:	2000859c 	.word	0x2000859c

0800eb88 <_read_r>:
 800eb88:	b538      	push	{r3, r4, r5, lr}
 800eb8a:	4d07      	ldr	r5, [pc, #28]	@ (800eba8 <_read_r+0x20>)
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	4608      	mov	r0, r1
 800eb90:	4611      	mov	r1, r2
 800eb92:	2200      	movs	r2, #0
 800eb94:	602a      	str	r2, [r5, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	f7f1 ffa9 	bl	8000aee <_read>
 800eb9c:	1c43      	adds	r3, r0, #1
 800eb9e:	d102      	bne.n	800eba6 <_read_r+0x1e>
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	b103      	cbz	r3, 800eba6 <_read_r+0x1e>
 800eba4:	6023      	str	r3, [r4, #0]
 800eba6:	bd38      	pop	{r3, r4, r5, pc}
 800eba8:	2000859c 	.word	0x2000859c

0800ebac <_write_r>:
 800ebac:	b538      	push	{r3, r4, r5, lr}
 800ebae:	4d07      	ldr	r5, [pc, #28]	@ (800ebcc <_write_r+0x20>)
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	4608      	mov	r0, r1
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	602a      	str	r2, [r5, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	f7f1 ffb4 	bl	8000b28 <_write>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d102      	bne.n	800ebca <_write_r+0x1e>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b103      	cbz	r3, 800ebca <_write_r+0x1e>
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
 800ebcc:	2000859c 	.word	0x2000859c

0800ebd0 <__libc_init_array>:
 800ebd0:	b570      	push	{r4, r5, r6, lr}
 800ebd2:	4d0d      	ldr	r5, [pc, #52]	@ (800ec08 <__libc_init_array+0x38>)
 800ebd4:	4c0d      	ldr	r4, [pc, #52]	@ (800ec0c <__libc_init_array+0x3c>)
 800ebd6:	1b64      	subs	r4, r4, r5
 800ebd8:	10a4      	asrs	r4, r4, #2
 800ebda:	2600      	movs	r6, #0
 800ebdc:	42a6      	cmp	r6, r4
 800ebde:	d109      	bne.n	800ebf4 <__libc_init_array+0x24>
 800ebe0:	4d0b      	ldr	r5, [pc, #44]	@ (800ec10 <__libc_init_array+0x40>)
 800ebe2:	4c0c      	ldr	r4, [pc, #48]	@ (800ec14 <__libc_init_array+0x44>)
 800ebe4:	f000 fe48 	bl	800f878 <_init>
 800ebe8:	1b64      	subs	r4, r4, r5
 800ebea:	10a4      	asrs	r4, r4, #2
 800ebec:	2600      	movs	r6, #0
 800ebee:	42a6      	cmp	r6, r4
 800ebf0:	d105      	bne.n	800ebfe <__libc_init_array+0x2e>
 800ebf2:	bd70      	pop	{r4, r5, r6, pc}
 800ebf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebf8:	4798      	blx	r3
 800ebfa:	3601      	adds	r6, #1
 800ebfc:	e7ee      	b.n	800ebdc <__libc_init_array+0xc>
 800ebfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec02:	4798      	blx	r3
 800ec04:	3601      	adds	r6, #1
 800ec06:	e7f2      	b.n	800ebee <__libc_init_array+0x1e>
 800ec08:	08012544 	.word	0x08012544
 800ec0c:	08012544 	.word	0x08012544
 800ec10:	08012544 	.word	0x08012544
 800ec14:	08012548 	.word	0x08012548

0800ec18 <__retarget_lock_init_recursive>:
 800ec18:	4770      	bx	lr

0800ec1a <__retarget_lock_acquire_recursive>:
 800ec1a:	4770      	bx	lr

0800ec1c <__retarget_lock_release_recursive>:
 800ec1c:	4770      	bx	lr

0800ec1e <memcpy>:
 800ec1e:	440a      	add	r2, r1
 800ec20:	4291      	cmp	r1, r2
 800ec22:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec26:	d100      	bne.n	800ec2a <memcpy+0xc>
 800ec28:	4770      	bx	lr
 800ec2a:	b510      	push	{r4, lr}
 800ec2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec34:	4291      	cmp	r1, r2
 800ec36:	d1f9      	bne.n	800ec2c <memcpy+0xe>
 800ec38:	bd10      	pop	{r4, pc}
	...

0800ec3c <__assert_func>:
 800ec3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec3e:	4614      	mov	r4, r2
 800ec40:	461a      	mov	r2, r3
 800ec42:	4b09      	ldr	r3, [pc, #36]	@ (800ec68 <__assert_func+0x2c>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4605      	mov	r5, r0
 800ec48:	68d8      	ldr	r0, [r3, #12]
 800ec4a:	b14c      	cbz	r4, 800ec60 <__assert_func+0x24>
 800ec4c:	4b07      	ldr	r3, [pc, #28]	@ (800ec6c <__assert_func+0x30>)
 800ec4e:	9100      	str	r1, [sp, #0]
 800ec50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec54:	4906      	ldr	r1, [pc, #24]	@ (800ec70 <__assert_func+0x34>)
 800ec56:	462b      	mov	r3, r5
 800ec58:	f000 fc88 	bl	800f56c <fiprintf>
 800ec5c:	f000 fd3c 	bl	800f6d8 <abort>
 800ec60:	4b04      	ldr	r3, [pc, #16]	@ (800ec74 <__assert_func+0x38>)
 800ec62:	461c      	mov	r4, r3
 800ec64:	e7f3      	b.n	800ec4e <__assert_func+0x12>
 800ec66:	bf00      	nop
 800ec68:	20000038 	.word	0x20000038
 800ec6c:	080124cd 	.word	0x080124cd
 800ec70:	080124da 	.word	0x080124da
 800ec74:	08012508 	.word	0x08012508

0800ec78 <_free_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	2900      	cmp	r1, #0
 800ec7e:	d041      	beq.n	800ed04 <_free_r+0x8c>
 800ec80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec84:	1f0c      	subs	r4, r1, #4
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	bfb8      	it	lt
 800ec8a:	18e4      	addlt	r4, r4, r3
 800ec8c:	f000 f8e8 	bl	800ee60 <__malloc_lock>
 800ec90:	4a1d      	ldr	r2, [pc, #116]	@ (800ed08 <_free_r+0x90>)
 800ec92:	6813      	ldr	r3, [r2, #0]
 800ec94:	b933      	cbnz	r3, 800eca4 <_free_r+0x2c>
 800ec96:	6063      	str	r3, [r4, #4]
 800ec98:	6014      	str	r4, [r2, #0]
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eca0:	f000 b8e4 	b.w	800ee6c <__malloc_unlock>
 800eca4:	42a3      	cmp	r3, r4
 800eca6:	d908      	bls.n	800ecba <_free_r+0x42>
 800eca8:	6820      	ldr	r0, [r4, #0]
 800ecaa:	1821      	adds	r1, r4, r0
 800ecac:	428b      	cmp	r3, r1
 800ecae:	bf01      	itttt	eq
 800ecb0:	6819      	ldreq	r1, [r3, #0]
 800ecb2:	685b      	ldreq	r3, [r3, #4]
 800ecb4:	1809      	addeq	r1, r1, r0
 800ecb6:	6021      	streq	r1, [r4, #0]
 800ecb8:	e7ed      	b.n	800ec96 <_free_r+0x1e>
 800ecba:	461a      	mov	r2, r3
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	b10b      	cbz	r3, 800ecc4 <_free_r+0x4c>
 800ecc0:	42a3      	cmp	r3, r4
 800ecc2:	d9fa      	bls.n	800ecba <_free_r+0x42>
 800ecc4:	6811      	ldr	r1, [r2, #0]
 800ecc6:	1850      	adds	r0, r2, r1
 800ecc8:	42a0      	cmp	r0, r4
 800ecca:	d10b      	bne.n	800ece4 <_free_r+0x6c>
 800eccc:	6820      	ldr	r0, [r4, #0]
 800ecce:	4401      	add	r1, r0
 800ecd0:	1850      	adds	r0, r2, r1
 800ecd2:	4283      	cmp	r3, r0
 800ecd4:	6011      	str	r1, [r2, #0]
 800ecd6:	d1e0      	bne.n	800ec9a <_free_r+0x22>
 800ecd8:	6818      	ldr	r0, [r3, #0]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	6053      	str	r3, [r2, #4]
 800ecde:	4408      	add	r0, r1
 800ece0:	6010      	str	r0, [r2, #0]
 800ece2:	e7da      	b.n	800ec9a <_free_r+0x22>
 800ece4:	d902      	bls.n	800ecec <_free_r+0x74>
 800ece6:	230c      	movs	r3, #12
 800ece8:	602b      	str	r3, [r5, #0]
 800ecea:	e7d6      	b.n	800ec9a <_free_r+0x22>
 800ecec:	6820      	ldr	r0, [r4, #0]
 800ecee:	1821      	adds	r1, r4, r0
 800ecf0:	428b      	cmp	r3, r1
 800ecf2:	bf04      	itt	eq
 800ecf4:	6819      	ldreq	r1, [r3, #0]
 800ecf6:	685b      	ldreq	r3, [r3, #4]
 800ecf8:	6063      	str	r3, [r4, #4]
 800ecfa:	bf04      	itt	eq
 800ecfc:	1809      	addeq	r1, r1, r0
 800ecfe:	6021      	streq	r1, [r4, #0]
 800ed00:	6054      	str	r4, [r2, #4]
 800ed02:	e7ca      	b.n	800ec9a <_free_r+0x22>
 800ed04:	bd38      	pop	{r3, r4, r5, pc}
 800ed06:	bf00      	nop
 800ed08:	200085a8 	.word	0x200085a8

0800ed0c <malloc>:
 800ed0c:	4b02      	ldr	r3, [pc, #8]	@ (800ed18 <malloc+0xc>)
 800ed0e:	4601      	mov	r1, r0
 800ed10:	6818      	ldr	r0, [r3, #0]
 800ed12:	f000 b825 	b.w	800ed60 <_malloc_r>
 800ed16:	bf00      	nop
 800ed18:	20000038 	.word	0x20000038

0800ed1c <sbrk_aligned>:
 800ed1c:	b570      	push	{r4, r5, r6, lr}
 800ed1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ed5c <sbrk_aligned+0x40>)
 800ed20:	460c      	mov	r4, r1
 800ed22:	6831      	ldr	r1, [r6, #0]
 800ed24:	4605      	mov	r5, r0
 800ed26:	b911      	cbnz	r1, 800ed2e <sbrk_aligned+0x12>
 800ed28:	f000 fcc6 	bl	800f6b8 <_sbrk_r>
 800ed2c:	6030      	str	r0, [r6, #0]
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4628      	mov	r0, r5
 800ed32:	f000 fcc1 	bl	800f6b8 <_sbrk_r>
 800ed36:	1c43      	adds	r3, r0, #1
 800ed38:	d103      	bne.n	800ed42 <sbrk_aligned+0x26>
 800ed3a:	f04f 34ff 	mov.w	r4, #4294967295
 800ed3e:	4620      	mov	r0, r4
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
 800ed42:	1cc4      	adds	r4, r0, #3
 800ed44:	f024 0403 	bic.w	r4, r4, #3
 800ed48:	42a0      	cmp	r0, r4
 800ed4a:	d0f8      	beq.n	800ed3e <sbrk_aligned+0x22>
 800ed4c:	1a21      	subs	r1, r4, r0
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f000 fcb2 	bl	800f6b8 <_sbrk_r>
 800ed54:	3001      	adds	r0, #1
 800ed56:	d1f2      	bne.n	800ed3e <sbrk_aligned+0x22>
 800ed58:	e7ef      	b.n	800ed3a <sbrk_aligned+0x1e>
 800ed5a:	bf00      	nop
 800ed5c:	200085a4 	.word	0x200085a4

0800ed60 <_malloc_r>:
 800ed60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed64:	1ccd      	adds	r5, r1, #3
 800ed66:	f025 0503 	bic.w	r5, r5, #3
 800ed6a:	3508      	adds	r5, #8
 800ed6c:	2d0c      	cmp	r5, #12
 800ed6e:	bf38      	it	cc
 800ed70:	250c      	movcc	r5, #12
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	4606      	mov	r6, r0
 800ed76:	db01      	blt.n	800ed7c <_malloc_r+0x1c>
 800ed78:	42a9      	cmp	r1, r5
 800ed7a:	d904      	bls.n	800ed86 <_malloc_r+0x26>
 800ed7c:	230c      	movs	r3, #12
 800ed7e:	6033      	str	r3, [r6, #0]
 800ed80:	2000      	movs	r0, #0
 800ed82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee5c <_malloc_r+0xfc>
 800ed8a:	f000 f869 	bl	800ee60 <__malloc_lock>
 800ed8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ed92:	461c      	mov	r4, r3
 800ed94:	bb44      	cbnz	r4, 800ede8 <_malloc_r+0x88>
 800ed96:	4629      	mov	r1, r5
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7ff ffbf 	bl	800ed1c <sbrk_aligned>
 800ed9e:	1c43      	adds	r3, r0, #1
 800eda0:	4604      	mov	r4, r0
 800eda2:	d158      	bne.n	800ee56 <_malloc_r+0xf6>
 800eda4:	f8d8 4000 	ldr.w	r4, [r8]
 800eda8:	4627      	mov	r7, r4
 800edaa:	2f00      	cmp	r7, #0
 800edac:	d143      	bne.n	800ee36 <_malloc_r+0xd6>
 800edae:	2c00      	cmp	r4, #0
 800edb0:	d04b      	beq.n	800ee4a <_malloc_r+0xea>
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	4639      	mov	r1, r7
 800edb6:	4630      	mov	r0, r6
 800edb8:	eb04 0903 	add.w	r9, r4, r3
 800edbc:	f000 fc7c 	bl	800f6b8 <_sbrk_r>
 800edc0:	4581      	cmp	r9, r0
 800edc2:	d142      	bne.n	800ee4a <_malloc_r+0xea>
 800edc4:	6821      	ldr	r1, [r4, #0]
 800edc6:	1a6d      	subs	r5, r5, r1
 800edc8:	4629      	mov	r1, r5
 800edca:	4630      	mov	r0, r6
 800edcc:	f7ff ffa6 	bl	800ed1c <sbrk_aligned>
 800edd0:	3001      	adds	r0, #1
 800edd2:	d03a      	beq.n	800ee4a <_malloc_r+0xea>
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	442b      	add	r3, r5
 800edd8:	6023      	str	r3, [r4, #0]
 800edda:	f8d8 3000 	ldr.w	r3, [r8]
 800edde:	685a      	ldr	r2, [r3, #4]
 800ede0:	bb62      	cbnz	r2, 800ee3c <_malloc_r+0xdc>
 800ede2:	f8c8 7000 	str.w	r7, [r8]
 800ede6:	e00f      	b.n	800ee08 <_malloc_r+0xa8>
 800ede8:	6822      	ldr	r2, [r4, #0]
 800edea:	1b52      	subs	r2, r2, r5
 800edec:	d420      	bmi.n	800ee30 <_malloc_r+0xd0>
 800edee:	2a0b      	cmp	r2, #11
 800edf0:	d917      	bls.n	800ee22 <_malloc_r+0xc2>
 800edf2:	1961      	adds	r1, r4, r5
 800edf4:	42a3      	cmp	r3, r4
 800edf6:	6025      	str	r5, [r4, #0]
 800edf8:	bf18      	it	ne
 800edfa:	6059      	strne	r1, [r3, #4]
 800edfc:	6863      	ldr	r3, [r4, #4]
 800edfe:	bf08      	it	eq
 800ee00:	f8c8 1000 	streq.w	r1, [r8]
 800ee04:	5162      	str	r2, [r4, r5]
 800ee06:	604b      	str	r3, [r1, #4]
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f000 f82f 	bl	800ee6c <__malloc_unlock>
 800ee0e:	f104 000b 	add.w	r0, r4, #11
 800ee12:	1d23      	adds	r3, r4, #4
 800ee14:	f020 0007 	bic.w	r0, r0, #7
 800ee18:	1ac2      	subs	r2, r0, r3
 800ee1a:	bf1c      	itt	ne
 800ee1c:	1a1b      	subne	r3, r3, r0
 800ee1e:	50a3      	strne	r3, [r4, r2]
 800ee20:	e7af      	b.n	800ed82 <_malloc_r+0x22>
 800ee22:	6862      	ldr	r2, [r4, #4]
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	bf0c      	ite	eq
 800ee28:	f8c8 2000 	streq.w	r2, [r8]
 800ee2c:	605a      	strne	r2, [r3, #4]
 800ee2e:	e7eb      	b.n	800ee08 <_malloc_r+0xa8>
 800ee30:	4623      	mov	r3, r4
 800ee32:	6864      	ldr	r4, [r4, #4]
 800ee34:	e7ae      	b.n	800ed94 <_malloc_r+0x34>
 800ee36:	463c      	mov	r4, r7
 800ee38:	687f      	ldr	r7, [r7, #4]
 800ee3a:	e7b6      	b.n	800edaa <_malloc_r+0x4a>
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	42a3      	cmp	r3, r4
 800ee42:	d1fb      	bne.n	800ee3c <_malloc_r+0xdc>
 800ee44:	2300      	movs	r3, #0
 800ee46:	6053      	str	r3, [r2, #4]
 800ee48:	e7de      	b.n	800ee08 <_malloc_r+0xa8>
 800ee4a:	230c      	movs	r3, #12
 800ee4c:	6033      	str	r3, [r6, #0]
 800ee4e:	4630      	mov	r0, r6
 800ee50:	f000 f80c 	bl	800ee6c <__malloc_unlock>
 800ee54:	e794      	b.n	800ed80 <_malloc_r+0x20>
 800ee56:	6005      	str	r5, [r0, #0]
 800ee58:	e7d6      	b.n	800ee08 <_malloc_r+0xa8>
 800ee5a:	bf00      	nop
 800ee5c:	200085a8 	.word	0x200085a8

0800ee60 <__malloc_lock>:
 800ee60:	4801      	ldr	r0, [pc, #4]	@ (800ee68 <__malloc_lock+0x8>)
 800ee62:	f7ff beda 	b.w	800ec1a <__retarget_lock_acquire_recursive>
 800ee66:	bf00      	nop
 800ee68:	200085a0 	.word	0x200085a0

0800ee6c <__malloc_unlock>:
 800ee6c:	4801      	ldr	r0, [pc, #4]	@ (800ee74 <__malloc_unlock+0x8>)
 800ee6e:	f7ff bed5 	b.w	800ec1c <__retarget_lock_release_recursive>
 800ee72:	bf00      	nop
 800ee74:	200085a0 	.word	0x200085a0

0800ee78 <__sfputc_r>:
 800ee78:	6893      	ldr	r3, [r2, #8]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	b410      	push	{r4}
 800ee80:	6093      	str	r3, [r2, #8]
 800ee82:	da08      	bge.n	800ee96 <__sfputc_r+0x1e>
 800ee84:	6994      	ldr	r4, [r2, #24]
 800ee86:	42a3      	cmp	r3, r4
 800ee88:	db01      	blt.n	800ee8e <__sfputc_r+0x16>
 800ee8a:	290a      	cmp	r1, #10
 800ee8c:	d103      	bne.n	800ee96 <__sfputc_r+0x1e>
 800ee8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee92:	f000 bb7d 	b.w	800f590 <__swbuf_r>
 800ee96:	6813      	ldr	r3, [r2, #0]
 800ee98:	1c58      	adds	r0, r3, #1
 800ee9a:	6010      	str	r0, [r2, #0]
 800ee9c:	7019      	strb	r1, [r3, #0]
 800ee9e:	4608      	mov	r0, r1
 800eea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea4:	4770      	bx	lr

0800eea6 <__sfputs_r>:
 800eea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea8:	4606      	mov	r6, r0
 800eeaa:	460f      	mov	r7, r1
 800eeac:	4614      	mov	r4, r2
 800eeae:	18d5      	adds	r5, r2, r3
 800eeb0:	42ac      	cmp	r4, r5
 800eeb2:	d101      	bne.n	800eeb8 <__sfputs_r+0x12>
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	e007      	b.n	800eec8 <__sfputs_r+0x22>
 800eeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eebc:	463a      	mov	r2, r7
 800eebe:	4630      	mov	r0, r6
 800eec0:	f7ff ffda 	bl	800ee78 <__sfputc_r>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	d1f3      	bne.n	800eeb0 <__sfputs_r+0xa>
 800eec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eecc <_vfiprintf_r>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	460d      	mov	r5, r1
 800eed2:	b09d      	sub	sp, #116	@ 0x74
 800eed4:	4614      	mov	r4, r2
 800eed6:	4698      	mov	r8, r3
 800eed8:	4606      	mov	r6, r0
 800eeda:	b118      	cbz	r0, 800eee4 <_vfiprintf_r+0x18>
 800eedc:	6a03      	ldr	r3, [r0, #32]
 800eede:	b90b      	cbnz	r3, 800eee4 <_vfiprintf_r+0x18>
 800eee0:	f7ff fd8c 	bl	800e9fc <__sinit>
 800eee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eee6:	07d9      	lsls	r1, r3, #31
 800eee8:	d405      	bmi.n	800eef6 <_vfiprintf_r+0x2a>
 800eeea:	89ab      	ldrh	r3, [r5, #12]
 800eeec:	059a      	lsls	r2, r3, #22
 800eeee:	d402      	bmi.n	800eef6 <_vfiprintf_r+0x2a>
 800eef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eef2:	f7ff fe92 	bl	800ec1a <__retarget_lock_acquire_recursive>
 800eef6:	89ab      	ldrh	r3, [r5, #12]
 800eef8:	071b      	lsls	r3, r3, #28
 800eefa:	d501      	bpl.n	800ef00 <_vfiprintf_r+0x34>
 800eefc:	692b      	ldr	r3, [r5, #16]
 800eefe:	b99b      	cbnz	r3, 800ef28 <_vfiprintf_r+0x5c>
 800ef00:	4629      	mov	r1, r5
 800ef02:	4630      	mov	r0, r6
 800ef04:	f000 fb82 	bl	800f60c <__swsetup_r>
 800ef08:	b170      	cbz	r0, 800ef28 <_vfiprintf_r+0x5c>
 800ef0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef0c:	07dc      	lsls	r4, r3, #31
 800ef0e:	d504      	bpl.n	800ef1a <_vfiprintf_r+0x4e>
 800ef10:	f04f 30ff 	mov.w	r0, #4294967295
 800ef14:	b01d      	add	sp, #116	@ 0x74
 800ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1a:	89ab      	ldrh	r3, [r5, #12]
 800ef1c:	0598      	lsls	r0, r3, #22
 800ef1e:	d4f7      	bmi.n	800ef10 <_vfiprintf_r+0x44>
 800ef20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef22:	f7ff fe7b 	bl	800ec1c <__retarget_lock_release_recursive>
 800ef26:	e7f3      	b.n	800ef10 <_vfiprintf_r+0x44>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef2c:	2320      	movs	r3, #32
 800ef2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef36:	2330      	movs	r3, #48	@ 0x30
 800ef38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f0e8 <_vfiprintf_r+0x21c>
 800ef3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef40:	f04f 0901 	mov.w	r9, #1
 800ef44:	4623      	mov	r3, r4
 800ef46:	469a      	mov	sl, r3
 800ef48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef4c:	b10a      	cbz	r2, 800ef52 <_vfiprintf_r+0x86>
 800ef4e:	2a25      	cmp	r2, #37	@ 0x25
 800ef50:	d1f9      	bne.n	800ef46 <_vfiprintf_r+0x7a>
 800ef52:	ebba 0b04 	subs.w	fp, sl, r4
 800ef56:	d00b      	beq.n	800ef70 <_vfiprintf_r+0xa4>
 800ef58:	465b      	mov	r3, fp
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f7ff ffa1 	bl	800eea6 <__sfputs_r>
 800ef64:	3001      	adds	r0, #1
 800ef66:	f000 80a7 	beq.w	800f0b8 <_vfiprintf_r+0x1ec>
 800ef6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef6c:	445a      	add	r2, fp
 800ef6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef70:	f89a 3000 	ldrb.w	r3, [sl]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f000 809f 	beq.w	800f0b8 <_vfiprintf_r+0x1ec>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef84:	f10a 0a01 	add.w	sl, sl, #1
 800ef88:	9304      	str	r3, [sp, #16]
 800ef8a:	9307      	str	r3, [sp, #28]
 800ef8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef92:	4654      	mov	r4, sl
 800ef94:	2205      	movs	r2, #5
 800ef96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9a:	4853      	ldr	r0, [pc, #332]	@ (800f0e8 <_vfiprintf_r+0x21c>)
 800ef9c:	f7f1 f930 	bl	8000200 <memchr>
 800efa0:	9a04      	ldr	r2, [sp, #16]
 800efa2:	b9d8      	cbnz	r0, 800efdc <_vfiprintf_r+0x110>
 800efa4:	06d1      	lsls	r1, r2, #27
 800efa6:	bf44      	itt	mi
 800efa8:	2320      	movmi	r3, #32
 800efaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efae:	0713      	lsls	r3, r2, #28
 800efb0:	bf44      	itt	mi
 800efb2:	232b      	movmi	r3, #43	@ 0x2b
 800efb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efb8:	f89a 3000 	ldrb.w	r3, [sl]
 800efbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800efbe:	d015      	beq.n	800efec <_vfiprintf_r+0x120>
 800efc0:	9a07      	ldr	r2, [sp, #28]
 800efc2:	4654      	mov	r4, sl
 800efc4:	2000      	movs	r0, #0
 800efc6:	f04f 0c0a 	mov.w	ip, #10
 800efca:	4621      	mov	r1, r4
 800efcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efd0:	3b30      	subs	r3, #48	@ 0x30
 800efd2:	2b09      	cmp	r3, #9
 800efd4:	d94b      	bls.n	800f06e <_vfiprintf_r+0x1a2>
 800efd6:	b1b0      	cbz	r0, 800f006 <_vfiprintf_r+0x13a>
 800efd8:	9207      	str	r2, [sp, #28]
 800efda:	e014      	b.n	800f006 <_vfiprintf_r+0x13a>
 800efdc:	eba0 0308 	sub.w	r3, r0, r8
 800efe0:	fa09 f303 	lsl.w	r3, r9, r3
 800efe4:	4313      	orrs	r3, r2
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	46a2      	mov	sl, r4
 800efea:	e7d2      	b.n	800ef92 <_vfiprintf_r+0xc6>
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	1d19      	adds	r1, r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	9103      	str	r1, [sp, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	bfbb      	ittet	lt
 800eff8:	425b      	neglt	r3, r3
 800effa:	f042 0202 	orrlt.w	r2, r2, #2
 800effe:	9307      	strge	r3, [sp, #28]
 800f000:	9307      	strlt	r3, [sp, #28]
 800f002:	bfb8      	it	lt
 800f004:	9204      	strlt	r2, [sp, #16]
 800f006:	7823      	ldrb	r3, [r4, #0]
 800f008:	2b2e      	cmp	r3, #46	@ 0x2e
 800f00a:	d10a      	bne.n	800f022 <_vfiprintf_r+0x156>
 800f00c:	7863      	ldrb	r3, [r4, #1]
 800f00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f010:	d132      	bne.n	800f078 <_vfiprintf_r+0x1ac>
 800f012:	9b03      	ldr	r3, [sp, #12]
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	9203      	str	r2, [sp, #12]
 800f01a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f01e:	3402      	adds	r4, #2
 800f020:	9305      	str	r3, [sp, #20]
 800f022:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0f8 <_vfiprintf_r+0x22c>
 800f026:	7821      	ldrb	r1, [r4, #0]
 800f028:	2203      	movs	r2, #3
 800f02a:	4650      	mov	r0, sl
 800f02c:	f7f1 f8e8 	bl	8000200 <memchr>
 800f030:	b138      	cbz	r0, 800f042 <_vfiprintf_r+0x176>
 800f032:	9b04      	ldr	r3, [sp, #16]
 800f034:	eba0 000a 	sub.w	r0, r0, sl
 800f038:	2240      	movs	r2, #64	@ 0x40
 800f03a:	4082      	lsls	r2, r0
 800f03c:	4313      	orrs	r3, r2
 800f03e:	3401      	adds	r4, #1
 800f040:	9304      	str	r3, [sp, #16]
 800f042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f046:	4829      	ldr	r0, [pc, #164]	@ (800f0ec <_vfiprintf_r+0x220>)
 800f048:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f04c:	2206      	movs	r2, #6
 800f04e:	f7f1 f8d7 	bl	8000200 <memchr>
 800f052:	2800      	cmp	r0, #0
 800f054:	d03f      	beq.n	800f0d6 <_vfiprintf_r+0x20a>
 800f056:	4b26      	ldr	r3, [pc, #152]	@ (800f0f0 <_vfiprintf_r+0x224>)
 800f058:	bb1b      	cbnz	r3, 800f0a2 <_vfiprintf_r+0x1d6>
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	3307      	adds	r3, #7
 800f05e:	f023 0307 	bic.w	r3, r3, #7
 800f062:	3308      	adds	r3, #8
 800f064:	9303      	str	r3, [sp, #12]
 800f066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f068:	443b      	add	r3, r7
 800f06a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f06c:	e76a      	b.n	800ef44 <_vfiprintf_r+0x78>
 800f06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f072:	460c      	mov	r4, r1
 800f074:	2001      	movs	r0, #1
 800f076:	e7a8      	b.n	800efca <_vfiprintf_r+0xfe>
 800f078:	2300      	movs	r3, #0
 800f07a:	3401      	adds	r4, #1
 800f07c:	9305      	str	r3, [sp, #20]
 800f07e:	4619      	mov	r1, r3
 800f080:	f04f 0c0a 	mov.w	ip, #10
 800f084:	4620      	mov	r0, r4
 800f086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08a:	3a30      	subs	r2, #48	@ 0x30
 800f08c:	2a09      	cmp	r2, #9
 800f08e:	d903      	bls.n	800f098 <_vfiprintf_r+0x1cc>
 800f090:	2b00      	cmp	r3, #0
 800f092:	d0c6      	beq.n	800f022 <_vfiprintf_r+0x156>
 800f094:	9105      	str	r1, [sp, #20]
 800f096:	e7c4      	b.n	800f022 <_vfiprintf_r+0x156>
 800f098:	fb0c 2101 	mla	r1, ip, r1, r2
 800f09c:	4604      	mov	r4, r0
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e7f0      	b.n	800f084 <_vfiprintf_r+0x1b8>
 800f0a2:	ab03      	add	r3, sp, #12
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4b12      	ldr	r3, [pc, #72]	@ (800f0f4 <_vfiprintf_r+0x228>)
 800f0aa:	a904      	add	r1, sp, #16
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f3af 8000 	nop.w
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	1c78      	adds	r0, r7, #1
 800f0b6:	d1d6      	bne.n	800f066 <_vfiprintf_r+0x19a>
 800f0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0ba:	07d9      	lsls	r1, r3, #31
 800f0bc:	d405      	bmi.n	800f0ca <_vfiprintf_r+0x1fe>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	059a      	lsls	r2, r3, #22
 800f0c2:	d402      	bmi.n	800f0ca <_vfiprintf_r+0x1fe>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0c6:	f7ff fda9 	bl	800ec1c <__retarget_lock_release_recursive>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	065b      	lsls	r3, r3, #25
 800f0ce:	f53f af1f 	bmi.w	800ef10 <_vfiprintf_r+0x44>
 800f0d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0d4:	e71e      	b.n	800ef14 <_vfiprintf_r+0x48>
 800f0d6:	ab03      	add	r3, sp, #12
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4b05      	ldr	r3, [pc, #20]	@ (800f0f4 <_vfiprintf_r+0x228>)
 800f0de:	a904      	add	r1, sp, #16
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f000 f879 	bl	800f1d8 <_printf_i>
 800f0e6:	e7e4      	b.n	800f0b2 <_vfiprintf_r+0x1e6>
 800f0e8:	08012509 	.word	0x08012509
 800f0ec:	08012513 	.word	0x08012513
 800f0f0:	00000000 	.word	0x00000000
 800f0f4:	0800eea7 	.word	0x0800eea7
 800f0f8:	0801250f 	.word	0x0801250f

0800f0fc <_printf_common>:
 800f0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f100:	4616      	mov	r6, r2
 800f102:	4698      	mov	r8, r3
 800f104:	688a      	ldr	r2, [r1, #8]
 800f106:	690b      	ldr	r3, [r1, #16]
 800f108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f10c:	4293      	cmp	r3, r2
 800f10e:	bfb8      	it	lt
 800f110:	4613      	movlt	r3, r2
 800f112:	6033      	str	r3, [r6, #0]
 800f114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f118:	4607      	mov	r7, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	b10a      	cbz	r2, 800f122 <_printf_common+0x26>
 800f11e:	3301      	adds	r3, #1
 800f120:	6033      	str	r3, [r6, #0]
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	0699      	lsls	r1, r3, #26
 800f126:	bf42      	ittt	mi
 800f128:	6833      	ldrmi	r3, [r6, #0]
 800f12a:	3302      	addmi	r3, #2
 800f12c:	6033      	strmi	r3, [r6, #0]
 800f12e:	6825      	ldr	r5, [r4, #0]
 800f130:	f015 0506 	ands.w	r5, r5, #6
 800f134:	d106      	bne.n	800f144 <_printf_common+0x48>
 800f136:	f104 0a19 	add.w	sl, r4, #25
 800f13a:	68e3      	ldr	r3, [r4, #12]
 800f13c:	6832      	ldr	r2, [r6, #0]
 800f13e:	1a9b      	subs	r3, r3, r2
 800f140:	42ab      	cmp	r3, r5
 800f142:	dc26      	bgt.n	800f192 <_printf_common+0x96>
 800f144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f148:	6822      	ldr	r2, [r4, #0]
 800f14a:	3b00      	subs	r3, #0
 800f14c:	bf18      	it	ne
 800f14e:	2301      	movne	r3, #1
 800f150:	0692      	lsls	r2, r2, #26
 800f152:	d42b      	bmi.n	800f1ac <_printf_common+0xb0>
 800f154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f158:	4641      	mov	r1, r8
 800f15a:	4638      	mov	r0, r7
 800f15c:	47c8      	blx	r9
 800f15e:	3001      	adds	r0, #1
 800f160:	d01e      	beq.n	800f1a0 <_printf_common+0xa4>
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	6922      	ldr	r2, [r4, #16]
 800f166:	f003 0306 	and.w	r3, r3, #6
 800f16a:	2b04      	cmp	r3, #4
 800f16c:	bf02      	ittt	eq
 800f16e:	68e5      	ldreq	r5, [r4, #12]
 800f170:	6833      	ldreq	r3, [r6, #0]
 800f172:	1aed      	subeq	r5, r5, r3
 800f174:	68a3      	ldr	r3, [r4, #8]
 800f176:	bf0c      	ite	eq
 800f178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f17c:	2500      	movne	r5, #0
 800f17e:	4293      	cmp	r3, r2
 800f180:	bfc4      	itt	gt
 800f182:	1a9b      	subgt	r3, r3, r2
 800f184:	18ed      	addgt	r5, r5, r3
 800f186:	2600      	movs	r6, #0
 800f188:	341a      	adds	r4, #26
 800f18a:	42b5      	cmp	r5, r6
 800f18c:	d11a      	bne.n	800f1c4 <_printf_common+0xc8>
 800f18e:	2000      	movs	r0, #0
 800f190:	e008      	b.n	800f1a4 <_printf_common+0xa8>
 800f192:	2301      	movs	r3, #1
 800f194:	4652      	mov	r2, sl
 800f196:	4641      	mov	r1, r8
 800f198:	4638      	mov	r0, r7
 800f19a:	47c8      	blx	r9
 800f19c:	3001      	adds	r0, #1
 800f19e:	d103      	bne.n	800f1a8 <_printf_common+0xac>
 800f1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1a8:	3501      	adds	r5, #1
 800f1aa:	e7c6      	b.n	800f13a <_printf_common+0x3e>
 800f1ac:	18e1      	adds	r1, r4, r3
 800f1ae:	1c5a      	adds	r2, r3, #1
 800f1b0:	2030      	movs	r0, #48	@ 0x30
 800f1b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f1b6:	4422      	add	r2, r4
 800f1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f1bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f1c0:	3302      	adds	r3, #2
 800f1c2:	e7c7      	b.n	800f154 <_printf_common+0x58>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	4622      	mov	r2, r4
 800f1c8:	4641      	mov	r1, r8
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	47c8      	blx	r9
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	d0e6      	beq.n	800f1a0 <_printf_common+0xa4>
 800f1d2:	3601      	adds	r6, #1
 800f1d4:	e7d9      	b.n	800f18a <_printf_common+0x8e>
	...

0800f1d8 <_printf_i>:
 800f1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1dc:	7e0f      	ldrb	r7, [r1, #24]
 800f1de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f1e0:	2f78      	cmp	r7, #120	@ 0x78
 800f1e2:	4691      	mov	r9, r2
 800f1e4:	4680      	mov	r8, r0
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	469a      	mov	sl, r3
 800f1ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f1ee:	d807      	bhi.n	800f200 <_printf_i+0x28>
 800f1f0:	2f62      	cmp	r7, #98	@ 0x62
 800f1f2:	d80a      	bhi.n	800f20a <_printf_i+0x32>
 800f1f4:	2f00      	cmp	r7, #0
 800f1f6:	f000 80d1 	beq.w	800f39c <_printf_i+0x1c4>
 800f1fa:	2f58      	cmp	r7, #88	@ 0x58
 800f1fc:	f000 80b8 	beq.w	800f370 <_printf_i+0x198>
 800f200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f208:	e03a      	b.n	800f280 <_printf_i+0xa8>
 800f20a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f20e:	2b15      	cmp	r3, #21
 800f210:	d8f6      	bhi.n	800f200 <_printf_i+0x28>
 800f212:	a101      	add	r1, pc, #4	@ (adr r1, 800f218 <_printf_i+0x40>)
 800f214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f218:	0800f271 	.word	0x0800f271
 800f21c:	0800f285 	.word	0x0800f285
 800f220:	0800f201 	.word	0x0800f201
 800f224:	0800f201 	.word	0x0800f201
 800f228:	0800f201 	.word	0x0800f201
 800f22c:	0800f201 	.word	0x0800f201
 800f230:	0800f285 	.word	0x0800f285
 800f234:	0800f201 	.word	0x0800f201
 800f238:	0800f201 	.word	0x0800f201
 800f23c:	0800f201 	.word	0x0800f201
 800f240:	0800f201 	.word	0x0800f201
 800f244:	0800f383 	.word	0x0800f383
 800f248:	0800f2af 	.word	0x0800f2af
 800f24c:	0800f33d 	.word	0x0800f33d
 800f250:	0800f201 	.word	0x0800f201
 800f254:	0800f201 	.word	0x0800f201
 800f258:	0800f3a5 	.word	0x0800f3a5
 800f25c:	0800f201 	.word	0x0800f201
 800f260:	0800f2af 	.word	0x0800f2af
 800f264:	0800f201 	.word	0x0800f201
 800f268:	0800f201 	.word	0x0800f201
 800f26c:	0800f345 	.word	0x0800f345
 800f270:	6833      	ldr	r3, [r6, #0]
 800f272:	1d1a      	adds	r2, r3, #4
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6032      	str	r2, [r6, #0]
 800f278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f27c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f280:	2301      	movs	r3, #1
 800f282:	e09c      	b.n	800f3be <_printf_i+0x1e6>
 800f284:	6833      	ldr	r3, [r6, #0]
 800f286:	6820      	ldr	r0, [r4, #0]
 800f288:	1d19      	adds	r1, r3, #4
 800f28a:	6031      	str	r1, [r6, #0]
 800f28c:	0606      	lsls	r6, r0, #24
 800f28e:	d501      	bpl.n	800f294 <_printf_i+0xbc>
 800f290:	681d      	ldr	r5, [r3, #0]
 800f292:	e003      	b.n	800f29c <_printf_i+0xc4>
 800f294:	0645      	lsls	r5, r0, #25
 800f296:	d5fb      	bpl.n	800f290 <_printf_i+0xb8>
 800f298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f29c:	2d00      	cmp	r5, #0
 800f29e:	da03      	bge.n	800f2a8 <_printf_i+0xd0>
 800f2a0:	232d      	movs	r3, #45	@ 0x2d
 800f2a2:	426d      	negs	r5, r5
 800f2a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2a8:	4858      	ldr	r0, [pc, #352]	@ (800f40c <_printf_i+0x234>)
 800f2aa:	230a      	movs	r3, #10
 800f2ac:	e011      	b.n	800f2d2 <_printf_i+0xfa>
 800f2ae:	6821      	ldr	r1, [r4, #0]
 800f2b0:	6833      	ldr	r3, [r6, #0]
 800f2b2:	0608      	lsls	r0, r1, #24
 800f2b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f2b8:	d402      	bmi.n	800f2c0 <_printf_i+0xe8>
 800f2ba:	0649      	lsls	r1, r1, #25
 800f2bc:	bf48      	it	mi
 800f2be:	b2ad      	uxthmi	r5, r5
 800f2c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f2c2:	4852      	ldr	r0, [pc, #328]	@ (800f40c <_printf_i+0x234>)
 800f2c4:	6033      	str	r3, [r6, #0]
 800f2c6:	bf14      	ite	ne
 800f2c8:	230a      	movne	r3, #10
 800f2ca:	2308      	moveq	r3, #8
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f2d2:	6866      	ldr	r6, [r4, #4]
 800f2d4:	60a6      	str	r6, [r4, #8]
 800f2d6:	2e00      	cmp	r6, #0
 800f2d8:	db05      	blt.n	800f2e6 <_printf_i+0x10e>
 800f2da:	6821      	ldr	r1, [r4, #0]
 800f2dc:	432e      	orrs	r6, r5
 800f2de:	f021 0104 	bic.w	r1, r1, #4
 800f2e2:	6021      	str	r1, [r4, #0]
 800f2e4:	d04b      	beq.n	800f37e <_printf_i+0x1a6>
 800f2e6:	4616      	mov	r6, r2
 800f2e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f2ec:	fb03 5711 	mls	r7, r3, r1, r5
 800f2f0:	5dc7      	ldrb	r7, [r0, r7]
 800f2f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f2f6:	462f      	mov	r7, r5
 800f2f8:	42bb      	cmp	r3, r7
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	d9f4      	bls.n	800f2e8 <_printf_i+0x110>
 800f2fe:	2b08      	cmp	r3, #8
 800f300:	d10b      	bne.n	800f31a <_printf_i+0x142>
 800f302:	6823      	ldr	r3, [r4, #0]
 800f304:	07df      	lsls	r7, r3, #31
 800f306:	d508      	bpl.n	800f31a <_printf_i+0x142>
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	6861      	ldr	r1, [r4, #4]
 800f30c:	4299      	cmp	r1, r3
 800f30e:	bfde      	ittt	le
 800f310:	2330      	movle	r3, #48	@ 0x30
 800f312:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f316:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f31a:	1b92      	subs	r2, r2, r6
 800f31c:	6122      	str	r2, [r4, #16]
 800f31e:	f8cd a000 	str.w	sl, [sp]
 800f322:	464b      	mov	r3, r9
 800f324:	aa03      	add	r2, sp, #12
 800f326:	4621      	mov	r1, r4
 800f328:	4640      	mov	r0, r8
 800f32a:	f7ff fee7 	bl	800f0fc <_printf_common>
 800f32e:	3001      	adds	r0, #1
 800f330:	d14a      	bne.n	800f3c8 <_printf_i+0x1f0>
 800f332:	f04f 30ff 	mov.w	r0, #4294967295
 800f336:	b004      	add	sp, #16
 800f338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	f043 0320 	orr.w	r3, r3, #32
 800f342:	6023      	str	r3, [r4, #0]
 800f344:	4832      	ldr	r0, [pc, #200]	@ (800f410 <_printf_i+0x238>)
 800f346:	2778      	movs	r7, #120	@ 0x78
 800f348:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f34c:	6823      	ldr	r3, [r4, #0]
 800f34e:	6831      	ldr	r1, [r6, #0]
 800f350:	061f      	lsls	r7, r3, #24
 800f352:	f851 5b04 	ldr.w	r5, [r1], #4
 800f356:	d402      	bmi.n	800f35e <_printf_i+0x186>
 800f358:	065f      	lsls	r7, r3, #25
 800f35a:	bf48      	it	mi
 800f35c:	b2ad      	uxthmi	r5, r5
 800f35e:	6031      	str	r1, [r6, #0]
 800f360:	07d9      	lsls	r1, r3, #31
 800f362:	bf44      	itt	mi
 800f364:	f043 0320 	orrmi.w	r3, r3, #32
 800f368:	6023      	strmi	r3, [r4, #0]
 800f36a:	b11d      	cbz	r5, 800f374 <_printf_i+0x19c>
 800f36c:	2310      	movs	r3, #16
 800f36e:	e7ad      	b.n	800f2cc <_printf_i+0xf4>
 800f370:	4826      	ldr	r0, [pc, #152]	@ (800f40c <_printf_i+0x234>)
 800f372:	e7e9      	b.n	800f348 <_printf_i+0x170>
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	f023 0320 	bic.w	r3, r3, #32
 800f37a:	6023      	str	r3, [r4, #0]
 800f37c:	e7f6      	b.n	800f36c <_printf_i+0x194>
 800f37e:	4616      	mov	r6, r2
 800f380:	e7bd      	b.n	800f2fe <_printf_i+0x126>
 800f382:	6833      	ldr	r3, [r6, #0]
 800f384:	6825      	ldr	r5, [r4, #0]
 800f386:	6961      	ldr	r1, [r4, #20]
 800f388:	1d18      	adds	r0, r3, #4
 800f38a:	6030      	str	r0, [r6, #0]
 800f38c:	062e      	lsls	r6, r5, #24
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	d501      	bpl.n	800f396 <_printf_i+0x1be>
 800f392:	6019      	str	r1, [r3, #0]
 800f394:	e002      	b.n	800f39c <_printf_i+0x1c4>
 800f396:	0668      	lsls	r0, r5, #25
 800f398:	d5fb      	bpl.n	800f392 <_printf_i+0x1ba>
 800f39a:	8019      	strh	r1, [r3, #0]
 800f39c:	2300      	movs	r3, #0
 800f39e:	6123      	str	r3, [r4, #16]
 800f3a0:	4616      	mov	r6, r2
 800f3a2:	e7bc      	b.n	800f31e <_printf_i+0x146>
 800f3a4:	6833      	ldr	r3, [r6, #0]
 800f3a6:	1d1a      	adds	r2, r3, #4
 800f3a8:	6032      	str	r2, [r6, #0]
 800f3aa:	681e      	ldr	r6, [r3, #0]
 800f3ac:	6862      	ldr	r2, [r4, #4]
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7f0 ff25 	bl	8000200 <memchr>
 800f3b6:	b108      	cbz	r0, 800f3bc <_printf_i+0x1e4>
 800f3b8:	1b80      	subs	r0, r0, r6
 800f3ba:	6060      	str	r0, [r4, #4]
 800f3bc:	6863      	ldr	r3, [r4, #4]
 800f3be:	6123      	str	r3, [r4, #16]
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3c6:	e7aa      	b.n	800f31e <_printf_i+0x146>
 800f3c8:	6923      	ldr	r3, [r4, #16]
 800f3ca:	4632      	mov	r2, r6
 800f3cc:	4649      	mov	r1, r9
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	47d0      	blx	sl
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	d0ad      	beq.n	800f332 <_printf_i+0x15a>
 800f3d6:	6823      	ldr	r3, [r4, #0]
 800f3d8:	079b      	lsls	r3, r3, #30
 800f3da:	d413      	bmi.n	800f404 <_printf_i+0x22c>
 800f3dc:	68e0      	ldr	r0, [r4, #12]
 800f3de:	9b03      	ldr	r3, [sp, #12]
 800f3e0:	4298      	cmp	r0, r3
 800f3e2:	bfb8      	it	lt
 800f3e4:	4618      	movlt	r0, r3
 800f3e6:	e7a6      	b.n	800f336 <_printf_i+0x15e>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	4632      	mov	r2, r6
 800f3ec:	4649      	mov	r1, r9
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	47d0      	blx	sl
 800f3f2:	3001      	adds	r0, #1
 800f3f4:	d09d      	beq.n	800f332 <_printf_i+0x15a>
 800f3f6:	3501      	adds	r5, #1
 800f3f8:	68e3      	ldr	r3, [r4, #12]
 800f3fa:	9903      	ldr	r1, [sp, #12]
 800f3fc:	1a5b      	subs	r3, r3, r1
 800f3fe:	42ab      	cmp	r3, r5
 800f400:	dcf2      	bgt.n	800f3e8 <_printf_i+0x210>
 800f402:	e7eb      	b.n	800f3dc <_printf_i+0x204>
 800f404:	2500      	movs	r5, #0
 800f406:	f104 0619 	add.w	r6, r4, #25
 800f40a:	e7f5      	b.n	800f3f8 <_printf_i+0x220>
 800f40c:	0801251a 	.word	0x0801251a
 800f410:	0801252b 	.word	0x0801252b

0800f414 <__sflush_r>:
 800f414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41c:	0716      	lsls	r6, r2, #28
 800f41e:	4605      	mov	r5, r0
 800f420:	460c      	mov	r4, r1
 800f422:	d454      	bmi.n	800f4ce <__sflush_r+0xba>
 800f424:	684b      	ldr	r3, [r1, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc02      	bgt.n	800f430 <__sflush_r+0x1c>
 800f42a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	dd48      	ble.n	800f4c2 <__sflush_r+0xae>
 800f430:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f432:	2e00      	cmp	r6, #0
 800f434:	d045      	beq.n	800f4c2 <__sflush_r+0xae>
 800f436:	2300      	movs	r3, #0
 800f438:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f43c:	682f      	ldr	r7, [r5, #0]
 800f43e:	6a21      	ldr	r1, [r4, #32]
 800f440:	602b      	str	r3, [r5, #0]
 800f442:	d030      	beq.n	800f4a6 <__sflush_r+0x92>
 800f444:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	0759      	lsls	r1, r3, #29
 800f44a:	d505      	bpl.n	800f458 <__sflush_r+0x44>
 800f44c:	6863      	ldr	r3, [r4, #4]
 800f44e:	1ad2      	subs	r2, r2, r3
 800f450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f452:	b10b      	cbz	r3, 800f458 <__sflush_r+0x44>
 800f454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f456:	1ad2      	subs	r2, r2, r3
 800f458:	2300      	movs	r3, #0
 800f45a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f45c:	6a21      	ldr	r1, [r4, #32]
 800f45e:	4628      	mov	r0, r5
 800f460:	47b0      	blx	r6
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	89a3      	ldrh	r3, [r4, #12]
 800f466:	d106      	bne.n	800f476 <__sflush_r+0x62>
 800f468:	6829      	ldr	r1, [r5, #0]
 800f46a:	291d      	cmp	r1, #29
 800f46c:	d82b      	bhi.n	800f4c6 <__sflush_r+0xb2>
 800f46e:	4a2a      	ldr	r2, [pc, #168]	@ (800f518 <__sflush_r+0x104>)
 800f470:	40ca      	lsrs	r2, r1
 800f472:	07d6      	lsls	r6, r2, #31
 800f474:	d527      	bpl.n	800f4c6 <__sflush_r+0xb2>
 800f476:	2200      	movs	r2, #0
 800f478:	6062      	str	r2, [r4, #4]
 800f47a:	04d9      	lsls	r1, r3, #19
 800f47c:	6922      	ldr	r2, [r4, #16]
 800f47e:	6022      	str	r2, [r4, #0]
 800f480:	d504      	bpl.n	800f48c <__sflush_r+0x78>
 800f482:	1c42      	adds	r2, r0, #1
 800f484:	d101      	bne.n	800f48a <__sflush_r+0x76>
 800f486:	682b      	ldr	r3, [r5, #0]
 800f488:	b903      	cbnz	r3, 800f48c <__sflush_r+0x78>
 800f48a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f48c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f48e:	602f      	str	r7, [r5, #0]
 800f490:	b1b9      	cbz	r1, 800f4c2 <__sflush_r+0xae>
 800f492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f496:	4299      	cmp	r1, r3
 800f498:	d002      	beq.n	800f4a0 <__sflush_r+0x8c>
 800f49a:	4628      	mov	r0, r5
 800f49c:	f7ff fbec 	bl	800ec78 <_free_r>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4a4:	e00d      	b.n	800f4c2 <__sflush_r+0xae>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	47b0      	blx	r6
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	1c50      	adds	r0, r2, #1
 800f4b0:	d1c9      	bne.n	800f446 <__sflush_r+0x32>
 800f4b2:	682b      	ldr	r3, [r5, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d0c6      	beq.n	800f446 <__sflush_r+0x32>
 800f4b8:	2b1d      	cmp	r3, #29
 800f4ba:	d001      	beq.n	800f4c0 <__sflush_r+0xac>
 800f4bc:	2b16      	cmp	r3, #22
 800f4be:	d11e      	bne.n	800f4fe <__sflush_r+0xea>
 800f4c0:	602f      	str	r7, [r5, #0]
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	e022      	b.n	800f50c <__sflush_r+0xf8>
 800f4c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ca:	b21b      	sxth	r3, r3
 800f4cc:	e01b      	b.n	800f506 <__sflush_r+0xf2>
 800f4ce:	690f      	ldr	r7, [r1, #16]
 800f4d0:	2f00      	cmp	r7, #0
 800f4d2:	d0f6      	beq.n	800f4c2 <__sflush_r+0xae>
 800f4d4:	0793      	lsls	r3, r2, #30
 800f4d6:	680e      	ldr	r6, [r1, #0]
 800f4d8:	bf08      	it	eq
 800f4da:	694b      	ldreq	r3, [r1, #20]
 800f4dc:	600f      	str	r7, [r1, #0]
 800f4de:	bf18      	it	ne
 800f4e0:	2300      	movne	r3, #0
 800f4e2:	eba6 0807 	sub.w	r8, r6, r7
 800f4e6:	608b      	str	r3, [r1, #8]
 800f4e8:	f1b8 0f00 	cmp.w	r8, #0
 800f4ec:	dde9      	ble.n	800f4c2 <__sflush_r+0xae>
 800f4ee:	6a21      	ldr	r1, [r4, #32]
 800f4f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f4f2:	4643      	mov	r3, r8
 800f4f4:	463a      	mov	r2, r7
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b0      	blx	r6
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	dc08      	bgt.n	800f510 <__sflush_r+0xfc>
 800f4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f506:	81a3      	strh	r3, [r4, #12]
 800f508:	f04f 30ff 	mov.w	r0, #4294967295
 800f50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f510:	4407      	add	r7, r0
 800f512:	eba8 0800 	sub.w	r8, r8, r0
 800f516:	e7e7      	b.n	800f4e8 <__sflush_r+0xd4>
 800f518:	20400001 	.word	0x20400001

0800f51c <_fflush_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	690b      	ldr	r3, [r1, #16]
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
 800f524:	b913      	cbnz	r3, 800f52c <_fflush_r+0x10>
 800f526:	2500      	movs	r5, #0
 800f528:	4628      	mov	r0, r5
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	b118      	cbz	r0, 800f536 <_fflush_r+0x1a>
 800f52e:	6a03      	ldr	r3, [r0, #32]
 800f530:	b90b      	cbnz	r3, 800f536 <_fflush_r+0x1a>
 800f532:	f7ff fa63 	bl	800e9fc <__sinit>
 800f536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d0f3      	beq.n	800f526 <_fflush_r+0xa>
 800f53e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f540:	07d0      	lsls	r0, r2, #31
 800f542:	d404      	bmi.n	800f54e <_fflush_r+0x32>
 800f544:	0599      	lsls	r1, r3, #22
 800f546:	d402      	bmi.n	800f54e <_fflush_r+0x32>
 800f548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f54a:	f7ff fb66 	bl	800ec1a <__retarget_lock_acquire_recursive>
 800f54e:	4628      	mov	r0, r5
 800f550:	4621      	mov	r1, r4
 800f552:	f7ff ff5f 	bl	800f414 <__sflush_r>
 800f556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f558:	07da      	lsls	r2, r3, #31
 800f55a:	4605      	mov	r5, r0
 800f55c:	d4e4      	bmi.n	800f528 <_fflush_r+0xc>
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	059b      	lsls	r3, r3, #22
 800f562:	d4e1      	bmi.n	800f528 <_fflush_r+0xc>
 800f564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f566:	f7ff fb59 	bl	800ec1c <__retarget_lock_release_recursive>
 800f56a:	e7dd      	b.n	800f528 <_fflush_r+0xc>

0800f56c <fiprintf>:
 800f56c:	b40e      	push	{r1, r2, r3}
 800f56e:	b503      	push	{r0, r1, lr}
 800f570:	4601      	mov	r1, r0
 800f572:	ab03      	add	r3, sp, #12
 800f574:	4805      	ldr	r0, [pc, #20]	@ (800f58c <fiprintf+0x20>)
 800f576:	f853 2b04 	ldr.w	r2, [r3], #4
 800f57a:	6800      	ldr	r0, [r0, #0]
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	f7ff fca5 	bl	800eecc <_vfiprintf_r>
 800f582:	b002      	add	sp, #8
 800f584:	f85d eb04 	ldr.w	lr, [sp], #4
 800f588:	b003      	add	sp, #12
 800f58a:	4770      	bx	lr
 800f58c:	20000038 	.word	0x20000038

0800f590 <__swbuf_r>:
 800f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f592:	460e      	mov	r6, r1
 800f594:	4614      	mov	r4, r2
 800f596:	4605      	mov	r5, r0
 800f598:	b118      	cbz	r0, 800f5a2 <__swbuf_r+0x12>
 800f59a:	6a03      	ldr	r3, [r0, #32]
 800f59c:	b90b      	cbnz	r3, 800f5a2 <__swbuf_r+0x12>
 800f59e:	f7ff fa2d 	bl	800e9fc <__sinit>
 800f5a2:	69a3      	ldr	r3, [r4, #24]
 800f5a4:	60a3      	str	r3, [r4, #8]
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	071a      	lsls	r2, r3, #28
 800f5aa:	d501      	bpl.n	800f5b0 <__swbuf_r+0x20>
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	b943      	cbnz	r3, 800f5c2 <__swbuf_r+0x32>
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f000 f82a 	bl	800f60c <__swsetup_r>
 800f5b8:	b118      	cbz	r0, 800f5c2 <__swbuf_r+0x32>
 800f5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800f5be:	4638      	mov	r0, r7
 800f5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5c2:	6823      	ldr	r3, [r4, #0]
 800f5c4:	6922      	ldr	r2, [r4, #16]
 800f5c6:	1a98      	subs	r0, r3, r2
 800f5c8:	6963      	ldr	r3, [r4, #20]
 800f5ca:	b2f6      	uxtb	r6, r6
 800f5cc:	4283      	cmp	r3, r0
 800f5ce:	4637      	mov	r7, r6
 800f5d0:	dc05      	bgt.n	800f5de <__swbuf_r+0x4e>
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	f7ff ffa1 	bl	800f51c <_fflush_r>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d1ed      	bne.n	800f5ba <__swbuf_r+0x2a>
 800f5de:	68a3      	ldr	r3, [r4, #8]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	60a3      	str	r3, [r4, #8]
 800f5e4:	6823      	ldr	r3, [r4, #0]
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	6022      	str	r2, [r4, #0]
 800f5ea:	701e      	strb	r6, [r3, #0]
 800f5ec:	6962      	ldr	r2, [r4, #20]
 800f5ee:	1c43      	adds	r3, r0, #1
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d004      	beq.n	800f5fe <__swbuf_r+0x6e>
 800f5f4:	89a3      	ldrh	r3, [r4, #12]
 800f5f6:	07db      	lsls	r3, r3, #31
 800f5f8:	d5e1      	bpl.n	800f5be <__swbuf_r+0x2e>
 800f5fa:	2e0a      	cmp	r6, #10
 800f5fc:	d1df      	bne.n	800f5be <__swbuf_r+0x2e>
 800f5fe:	4621      	mov	r1, r4
 800f600:	4628      	mov	r0, r5
 800f602:	f7ff ff8b 	bl	800f51c <_fflush_r>
 800f606:	2800      	cmp	r0, #0
 800f608:	d0d9      	beq.n	800f5be <__swbuf_r+0x2e>
 800f60a:	e7d6      	b.n	800f5ba <__swbuf_r+0x2a>

0800f60c <__swsetup_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4b29      	ldr	r3, [pc, #164]	@ (800f6b4 <__swsetup_r+0xa8>)
 800f610:	4605      	mov	r5, r0
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	460c      	mov	r4, r1
 800f616:	b118      	cbz	r0, 800f620 <__swsetup_r+0x14>
 800f618:	6a03      	ldr	r3, [r0, #32]
 800f61a:	b90b      	cbnz	r3, 800f620 <__swsetup_r+0x14>
 800f61c:	f7ff f9ee 	bl	800e9fc <__sinit>
 800f620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f624:	0719      	lsls	r1, r3, #28
 800f626:	d422      	bmi.n	800f66e <__swsetup_r+0x62>
 800f628:	06da      	lsls	r2, r3, #27
 800f62a:	d407      	bmi.n	800f63c <__swsetup_r+0x30>
 800f62c:	2209      	movs	r2, #9
 800f62e:	602a      	str	r2, [r5, #0]
 800f630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f634:	81a3      	strh	r3, [r4, #12]
 800f636:	f04f 30ff 	mov.w	r0, #4294967295
 800f63a:	e033      	b.n	800f6a4 <__swsetup_r+0x98>
 800f63c:	0758      	lsls	r0, r3, #29
 800f63e:	d512      	bpl.n	800f666 <__swsetup_r+0x5a>
 800f640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f642:	b141      	cbz	r1, 800f656 <__swsetup_r+0x4a>
 800f644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f648:	4299      	cmp	r1, r3
 800f64a:	d002      	beq.n	800f652 <__swsetup_r+0x46>
 800f64c:	4628      	mov	r0, r5
 800f64e:	f7ff fb13 	bl	800ec78 <_free_r>
 800f652:	2300      	movs	r3, #0
 800f654:	6363      	str	r3, [r4, #52]	@ 0x34
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f65c:	81a3      	strh	r3, [r4, #12]
 800f65e:	2300      	movs	r3, #0
 800f660:	6063      	str	r3, [r4, #4]
 800f662:	6923      	ldr	r3, [r4, #16]
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	f043 0308 	orr.w	r3, r3, #8
 800f66c:	81a3      	strh	r3, [r4, #12]
 800f66e:	6923      	ldr	r3, [r4, #16]
 800f670:	b94b      	cbnz	r3, 800f686 <__swsetup_r+0x7a>
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f67c:	d003      	beq.n	800f686 <__swsetup_r+0x7a>
 800f67e:	4621      	mov	r1, r4
 800f680:	4628      	mov	r0, r5
 800f682:	f000 f856 	bl	800f732 <__smakebuf_r>
 800f686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f68a:	f013 0201 	ands.w	r2, r3, #1
 800f68e:	d00a      	beq.n	800f6a6 <__swsetup_r+0x9a>
 800f690:	2200      	movs	r2, #0
 800f692:	60a2      	str	r2, [r4, #8]
 800f694:	6962      	ldr	r2, [r4, #20]
 800f696:	4252      	negs	r2, r2
 800f698:	61a2      	str	r2, [r4, #24]
 800f69a:	6922      	ldr	r2, [r4, #16]
 800f69c:	b942      	cbnz	r2, 800f6b0 <__swsetup_r+0xa4>
 800f69e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6a2:	d1c5      	bne.n	800f630 <__swsetup_r+0x24>
 800f6a4:	bd38      	pop	{r3, r4, r5, pc}
 800f6a6:	0799      	lsls	r1, r3, #30
 800f6a8:	bf58      	it	pl
 800f6aa:	6962      	ldrpl	r2, [r4, #20]
 800f6ac:	60a2      	str	r2, [r4, #8]
 800f6ae:	e7f4      	b.n	800f69a <__swsetup_r+0x8e>
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	e7f7      	b.n	800f6a4 <__swsetup_r+0x98>
 800f6b4:	20000038 	.word	0x20000038

0800f6b8 <_sbrk_r>:
 800f6b8:	b538      	push	{r3, r4, r5, lr}
 800f6ba:	4d06      	ldr	r5, [pc, #24]	@ (800f6d4 <_sbrk_r+0x1c>)
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4604      	mov	r4, r0
 800f6c0:	4608      	mov	r0, r1
 800f6c2:	602b      	str	r3, [r5, #0]
 800f6c4:	f7f1 fa80 	bl	8000bc8 <_sbrk>
 800f6c8:	1c43      	adds	r3, r0, #1
 800f6ca:	d102      	bne.n	800f6d2 <_sbrk_r+0x1a>
 800f6cc:	682b      	ldr	r3, [r5, #0]
 800f6ce:	b103      	cbz	r3, 800f6d2 <_sbrk_r+0x1a>
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	bd38      	pop	{r3, r4, r5, pc}
 800f6d4:	2000859c 	.word	0x2000859c

0800f6d8 <abort>:
 800f6d8:	b508      	push	{r3, lr}
 800f6da:	2006      	movs	r0, #6
 800f6dc:	f000 f88e 	bl	800f7fc <raise>
 800f6e0:	2001      	movs	r0, #1
 800f6e2:	f7f1 f9f9 	bl	8000ad8 <_exit>

0800f6e6 <__swhatbuf_r>:
 800f6e6:	b570      	push	{r4, r5, r6, lr}
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ee:	2900      	cmp	r1, #0
 800f6f0:	b096      	sub	sp, #88	@ 0x58
 800f6f2:	4615      	mov	r5, r2
 800f6f4:	461e      	mov	r6, r3
 800f6f6:	da0d      	bge.n	800f714 <__swhatbuf_r+0x2e>
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6fe:	f04f 0100 	mov.w	r1, #0
 800f702:	bf14      	ite	ne
 800f704:	2340      	movne	r3, #64	@ 0x40
 800f706:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f70a:	2000      	movs	r0, #0
 800f70c:	6031      	str	r1, [r6, #0]
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	b016      	add	sp, #88	@ 0x58
 800f712:	bd70      	pop	{r4, r5, r6, pc}
 800f714:	466a      	mov	r2, sp
 800f716:	f000 f879 	bl	800f80c <_fstat_r>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	dbec      	blt.n	800f6f8 <__swhatbuf_r+0x12>
 800f71e:	9901      	ldr	r1, [sp, #4]
 800f720:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f724:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f728:	4259      	negs	r1, r3
 800f72a:	4159      	adcs	r1, r3
 800f72c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f730:	e7eb      	b.n	800f70a <__swhatbuf_r+0x24>

0800f732 <__smakebuf_r>:
 800f732:	898b      	ldrh	r3, [r1, #12]
 800f734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f736:	079d      	lsls	r5, r3, #30
 800f738:	4606      	mov	r6, r0
 800f73a:	460c      	mov	r4, r1
 800f73c:	d507      	bpl.n	800f74e <__smakebuf_r+0x1c>
 800f73e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f742:	6023      	str	r3, [r4, #0]
 800f744:	6123      	str	r3, [r4, #16]
 800f746:	2301      	movs	r3, #1
 800f748:	6163      	str	r3, [r4, #20]
 800f74a:	b003      	add	sp, #12
 800f74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74e:	ab01      	add	r3, sp, #4
 800f750:	466a      	mov	r2, sp
 800f752:	f7ff ffc8 	bl	800f6e6 <__swhatbuf_r>
 800f756:	9f00      	ldr	r7, [sp, #0]
 800f758:	4605      	mov	r5, r0
 800f75a:	4639      	mov	r1, r7
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7ff faff 	bl	800ed60 <_malloc_r>
 800f762:	b948      	cbnz	r0, 800f778 <__smakebuf_r+0x46>
 800f764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f768:	059a      	lsls	r2, r3, #22
 800f76a:	d4ee      	bmi.n	800f74a <__smakebuf_r+0x18>
 800f76c:	f023 0303 	bic.w	r3, r3, #3
 800f770:	f043 0302 	orr.w	r3, r3, #2
 800f774:	81a3      	strh	r3, [r4, #12]
 800f776:	e7e2      	b.n	800f73e <__smakebuf_r+0xc>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	6020      	str	r0, [r4, #0]
 800f77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	9b01      	ldr	r3, [sp, #4]
 800f784:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f788:	b15b      	cbz	r3, 800f7a2 <__smakebuf_r+0x70>
 800f78a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f78e:	4630      	mov	r0, r6
 800f790:	f000 f84e 	bl	800f830 <_isatty_r>
 800f794:	b128      	cbz	r0, 800f7a2 <__smakebuf_r+0x70>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f023 0303 	bic.w	r3, r3, #3
 800f79c:	f043 0301 	orr.w	r3, r3, #1
 800f7a0:	81a3      	strh	r3, [r4, #12]
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	431d      	orrs	r5, r3
 800f7a6:	81a5      	strh	r5, [r4, #12]
 800f7a8:	e7cf      	b.n	800f74a <__smakebuf_r+0x18>

0800f7aa <_raise_r>:
 800f7aa:	291f      	cmp	r1, #31
 800f7ac:	b538      	push	{r3, r4, r5, lr}
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	d904      	bls.n	800f7be <_raise_r+0x14>
 800f7b4:	2316      	movs	r3, #22
 800f7b6:	6003      	str	r3, [r0, #0]
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	bd38      	pop	{r3, r4, r5, pc}
 800f7be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f7c0:	b112      	cbz	r2, 800f7c8 <_raise_r+0x1e>
 800f7c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7c6:	b94b      	cbnz	r3, 800f7dc <_raise_r+0x32>
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f000 f853 	bl	800f874 <_getpid_r>
 800f7ce:	4622      	mov	r2, r4
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7d8:	f000 b83a 	b.w	800f850 <_kill_r>
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d00a      	beq.n	800f7f6 <_raise_r+0x4c>
 800f7e0:	1c59      	adds	r1, r3, #1
 800f7e2:	d103      	bne.n	800f7ec <_raise_r+0x42>
 800f7e4:	2316      	movs	r3, #22
 800f7e6:	6003      	str	r3, [r0, #0]
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	e7e7      	b.n	800f7bc <_raise_r+0x12>
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	4798      	blx	r3
 800f7f6:	2000      	movs	r0, #0
 800f7f8:	e7e0      	b.n	800f7bc <_raise_r+0x12>
	...

0800f7fc <raise>:
 800f7fc:	4b02      	ldr	r3, [pc, #8]	@ (800f808 <raise+0xc>)
 800f7fe:	4601      	mov	r1, r0
 800f800:	6818      	ldr	r0, [r3, #0]
 800f802:	f7ff bfd2 	b.w	800f7aa <_raise_r>
 800f806:	bf00      	nop
 800f808:	20000038 	.word	0x20000038

0800f80c <_fstat_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	4d07      	ldr	r5, [pc, #28]	@ (800f82c <_fstat_r+0x20>)
 800f810:	2300      	movs	r3, #0
 800f812:	4604      	mov	r4, r0
 800f814:	4608      	mov	r0, r1
 800f816:	4611      	mov	r1, r2
 800f818:	602b      	str	r3, [r5, #0]
 800f81a:	f7f1 f9ad 	bl	8000b78 <_fstat>
 800f81e:	1c43      	adds	r3, r0, #1
 800f820:	d102      	bne.n	800f828 <_fstat_r+0x1c>
 800f822:	682b      	ldr	r3, [r5, #0]
 800f824:	b103      	cbz	r3, 800f828 <_fstat_r+0x1c>
 800f826:	6023      	str	r3, [r4, #0]
 800f828:	bd38      	pop	{r3, r4, r5, pc}
 800f82a:	bf00      	nop
 800f82c:	2000859c 	.word	0x2000859c

0800f830 <_isatty_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d06      	ldr	r5, [pc, #24]	@ (800f84c <_isatty_r+0x1c>)
 800f834:	2300      	movs	r3, #0
 800f836:	4604      	mov	r4, r0
 800f838:	4608      	mov	r0, r1
 800f83a:	602b      	str	r3, [r5, #0]
 800f83c:	f7f1 f9ac 	bl	8000b98 <_isatty>
 800f840:	1c43      	adds	r3, r0, #1
 800f842:	d102      	bne.n	800f84a <_isatty_r+0x1a>
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	b103      	cbz	r3, 800f84a <_isatty_r+0x1a>
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	bd38      	pop	{r3, r4, r5, pc}
 800f84c:	2000859c 	.word	0x2000859c

0800f850 <_kill_r>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	4d07      	ldr	r5, [pc, #28]	@ (800f870 <_kill_r+0x20>)
 800f854:	2300      	movs	r3, #0
 800f856:	4604      	mov	r4, r0
 800f858:	4608      	mov	r0, r1
 800f85a:	4611      	mov	r1, r2
 800f85c:	602b      	str	r3, [r5, #0]
 800f85e:	f7f1 f929 	bl	8000ab4 <_kill>
 800f862:	1c43      	adds	r3, r0, #1
 800f864:	d102      	bne.n	800f86c <_kill_r+0x1c>
 800f866:	682b      	ldr	r3, [r5, #0]
 800f868:	b103      	cbz	r3, 800f86c <_kill_r+0x1c>
 800f86a:	6023      	str	r3, [r4, #0]
 800f86c:	bd38      	pop	{r3, r4, r5, pc}
 800f86e:	bf00      	nop
 800f870:	2000859c 	.word	0x2000859c

0800f874 <_getpid_r>:
 800f874:	f7f1 b915 	b.w	8000aa2 <_getpid>

0800f878 <_init>:
 800f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87a:	bf00      	nop
 800f87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f87e:	bc08      	pop	{r3}
 800f880:	469e      	mov	lr, r3
 800f882:	4770      	bx	lr

0800f884 <_fini>:
 800f884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f886:	bf00      	nop
 800f888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f88a:	bc08      	pop	{r3}
 800f88c:	469e      	mov	lr, r3
 800f88e:	4770      	bx	lr
